{"version":3,"sources":["webpack:///./src/components/library/PageTabs/styles.scss.js","webpack:///./src/components/library/PageTabs/index.js","webpack:///./src/templates/Location/Components/LocationPageWrapper/index.js","webpack:///./src/templates/Location/Landing/layout.js","webpack:///./src/templates/Location/Landing/index.js","webpack:///./src/components/library/Block/styles.scss.js","webpack:///./src/components/library/Block/index.js","webpack:///./src/components/library/Section/SlideSection/styles.scss.js","webpack:///./src/components/library/Section/SlideSection/index.js","webpack:///./src/components/core/WrapperControl/index.js","webpack:///./src/components/library/Section/SimpleSection/styles.scss.js","webpack:///./src/components/library/Section/SimpleSection/index.js","webpack:///./src/components/library/Hero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/index.js","webpack:///./src/components/library/Breadcrumb/styles.scss.js","webpack:///./src/components/library/Breadcrumb/index.js","webpack:///./src/components/library/Hero/index.js","webpack:///./src/components/library/Widgets/Sidebar/Default/styles.scss.js","webpack:///./src/components/library/Widgets/Sidebar/Default/index.js","webpack:///./src/components/Library/Sidebar/styles.scss.js","webpack:///./src/components/Library/Sidebar/index.js","webpack:///./src/templates/SubLevelPage/styles.scss.js","webpack:///./src/templates/SubLevelPage/index.js","webpack:///./src/components/library/Section/WidgetSection/styles.scss.js","webpack:///./src/components/library/Section/WidgetSection/index.js","webpack:///./src/components/library/Section/index.js","webpack:///./src/components/library/Section/MasonrySection/styles.scss.js","webpack:///./src/components/library/Section/MasonrySection/index.js","webpack:///./src/components/library/SocialStrip/styles.scss.js","webpack:///./src/components/library/SocialStrip/index.js","webpack:///./src/components/library/QuestionListings/styles.scss.js","webpack:///./src/components/library/QuestionListings/index.js","webpack:///./src/components/library/Section/SplitSection/styles.scss.js","webpack:///./src/components/library/Section/SplitSection/index.js","webpack:///./src/components/library/QuestionFooter/styles.scss.js","webpack:///./src/components/library/QuestionFooter/index.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/components/library/Castle/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/index.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/index.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/styles.scss.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/index.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/index.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/index.js","webpack:///./src/components/library/Castle/index.js","webpack:///./src/components/library/HeroStrip/styles.scss.js","webpack:///./src/components/library/HeroStrip/index.js","webpack:///./src/helpers/hexToRGB.js","webpack:///./src/components/library/Section/StickyScrollSection/styles.scss.js","webpack:///./src/components/library/Section/StickyScrollSection/index.js","webpack:///./src/components/library/SimpleList/styles.scss.js","webpack:///./src/components/library/SimpleList/index.js","webpack:///./src/components/library/AwardBadge/styles.scss.js","webpack:///./src/components/library/AwardBadge/index.js","webpack:///./src/components/library/AwardHours/styles.scss.js","webpack:///./src/components/library/AwardHours/index.js","webpack:///./src/components/library/SuggestionList/styles.scss.js","webpack:///./src/components/library/SuggestionList/index.js","webpack:///./src/templates/Location/Transformer/index.js"],"names":["PageTabsStyle","styled","div","_templateObject","Root","Size","props","GradientColor","hexToRGB","Padding","Button","PageTabs","_ref","List","Location","Label","BaseUrl","TextColor","Affix","react_default","a","createElement","styles_scss","className","map","item","index","destination","currentLocation","DestinationPath","slug","LocationPathWithSlash","pathname","key","Btn","AddClass","slice","BgColor","name","Destination","LocationPageWrapper","children","LocationData","Headline","LocationTheme","about","PageTheme","Layout","Color","Background","PrimaryColor","Primary","SecondaryColor","Secondary","TertiaryColor","Tertiary","SubLevelPage","SimpleHero","Flex","Block","maxWidth","headline","IconClass","geography","state","toLowerCase","IconPosition","IconFas","contactDetails","location","address","meta","maps","External","AwardHours","Hours","hours","time","days","Data","start_time","library_PageTabs","Tint","TintBorder","SuggestionList","nearby","Theme","Nightsky","TemplateLayout","elements","SummaryHeadlineString","summary","Components_LocationPageWrapper","Castle","Bricks","href","LocationLandingTemplate","_ref2","layout_TemplateLayout","__webpack_require__","d","__webpack_exports__","query","LocationLandingPage","console","log","data","allPrismicLocation","edges","node","layout","locationLandingTransformer","BlockStyle","flex","AlignItems","Style","css","_templateObject2","JustifyContent","BgTint","Width","Base","Grid","SiteWidth","BgMatch","BgQuery","BgAlt","ImgMatch","src","AltText","ImgQuery","SlideSectionStyle","Sm","Black","Inner","SectionInnerStyle","Gutter","Left","Content","SectionContentStyle","_templateObject3","SectionSize","Media","Md","SectionHeader","_templateObject4","_templateObject5","Transition","Duration","CssEase","CallToAction","_templateObject6","NextArrow","style","onClick","Object","assign","onKeyPress","role","tabIndex","Icons","Name","PrevArrow","SectionSlider","_React$Component","call","this","render","_settings","_this","slidesToShow","ArrowColor","SliderSettings","slidesToScroll","autoplay","arrows","settings","dots","speed","autoplaySpeed","infinite","draggable","nextArrow","prevArrow","responsive","breakpoint","Fragment","Helmet","rel","type","lib_default","ref","h","slider","React","Component","SlideSection","Widgets","Header","Icon","ViewAll","SlideSection_styles_scss","IconclassName","SlideSection_SectionSlider","TextColr","Widget","Container","WidgetContent","WrapperLock","createGlobalStyle","WrapperRelease","SimpleSectionStyle","White","Right","FluidHeight","SimpleSection","SimpleSection_styles_scss","HeroInnerStyle","imgRight","imgLeft","imgTop","imgBottom","imgWidth","HeroContentStyle","FullWidth","SimpleHeroStyle","Nav","Hero","BreadCrumb","Link","Bread","Crumbs","crumb","to","HeroInner","HeroContent","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styles_scss__WEBPACK_IMPORTED_MODULE_2__","SidebarWidgetStyle","FadeIn","Radius","BgImage","TintColor","TintOpacity","Subhead","i","SidebarWidget","IconName","IconColor","gatsby_browser_entry","SidebarStyle","styles_scss_templateObject","styles_scss_templateObject2","Sidebar","Sidebar_styles_scss","Default","SubLevelPageStyle","SubLevelPage_styles_scss_templateObject","SubLevelPage_styles_scss_templateObject2","styles_scss_templateObject3","SubLevelPage_SubLevelPage","SubLevelPage_SubLevelPageContent","SubLevelPage_styles_scss","WrapperControl","Library_Sidebar","SubLevelPageContent","ItemProp","itemProp","WidgetSection","Slider","WidgetSection_styles_scss","MasonrySectionStyle","Columns","ColumnGap","MasonrySection","PaddingY","MasonrySection_styles_scss","SocialStripStyle","Margin","span","SocialStrip","target","HeroStripStyle","ViewWidthFontSize","QuestionCards","CategoryFilter","TagFilter","CategorySlug","TagSlug","AllCategories","QuestionSlugString","categoryMatch","categoryData","categoryFilter","matchedCategory","filter","category","allQuestionsJson","Question","filteredCategory","allQuestionCategoriesJson","title","BgImageFile","coverImage","BgImageAltText","tags","includes","Slug","_234893462","QuestionListings","QuestionListings_QuestionCards","SplitSectionStyle","Site","SplitSection","SplitSection_styles_scss","BrowseCategories","categoryWidgets","widgetArray","Meta","Generic","IconSize","viewAll","unshift","Slate","_4273665236","QuestionFooter","HideCategories","QuestionFooter_BrowseCategories","dP","f","FProto","Function","prototype","nameRE","configurable","get","match","e","CastleStyle","CastleHeroStyle","CastleHero","primaryData","primary","repeatableData","items","CastleHero_styles_scss","padding","replace","split","background_color","background_image","localFile","childImageSharp","fluid","text_color","tint_opacity","breadcrumb_url","Breadcrumb","breadcrumb_label","text","body_text","cta_destination","cta_label","cta_bg_color","cta_text_color","cta_icon","social_sharing","CastleFullSplitSection_styles_scss_templateObject","CastleSplitSection","CastleFullSplitSection_styles_scss","direction","image","alt","CastleSimpleSectionStyle","CastleSimpleSection_styles_scss_templateObject","CastleSimpleSection","CastleSimpleSection_styles_scss","text_alignment","CastleSplitSection_styles_scss_templateObject","CastleSplitSection_styles_scss","CastleSplitImageHero_styles_scss_templateObject","CastleSplitImageHero_styles_scss","CastlePromotionalStrip_styles_scss_templateObject","length","CastlePromotionalStrip_styles_scss","HeroStrip","bg_color","Items","Caption","caption","label","promotionalItemsTransformer","CastleStickyGallery_styles_scss_templateObject","CastleStickyGallery_styles_scss","StickyScrollSection","Subheadline","subheadline","Body","GalleryQueries","Query","Fluid","Alt","galleryImgQueriesTransformer","CastleWidgetRow_styles_scss_templateObject","CastleWidgetRow","CastleWidgetRow_styles_scss","widget_destination","widget_bg_color","widget_background_image","widget_subheadline","widget_headline","widget_text_color","widget_icon_class","widget_tint_color","widget_tint_opacity","widgetContentTransformer","section_size","CastleBuilder","bricks","brick","slice_type","components_CastleHero","CastleFullSplitSection","components_CastleSplitSection","CastleSplitImageHero","CastlePromotionalStrip","CastleStickyGallery","components_CastleSimpleSection","components_CastleWidgetRow","Castle_CastleBuilder","HeroStrip_styles_scss","Item","hex","alpha","r","parseInt","g","b","StickyScrollSectionStyle","ReleaseOverflow","StickyScrollSection_templateObject","Gallery","StickyScrollSection_styles_scss","Img","Src","SimpleListStyle","ul","li","SimpleList","AwardBadgeStyle","Text","AwardHoursStyle","AwardHours_styles_scss","AwardBadge","Logo","SuggestionListStyle","nearby_name","nearby_slug","id","uid","city","geo_city","geo_state","country","geo_country","status","delivery","status_delivery","store","status_store","reserveSpot","meta_reserve_spot_link","menu","meta_menu","meta_google_maps_url","phone","geo_location_address","geo_location_state","nearby_locations","about_headline","color_background","color_primary","color_secondary","color_tertiary","body","gallery"],"mappings":"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","file":"component---src-templates-location-landing-index-js-15236ad40bed97c742a8.js","sourcesContent":["// <PageTabsStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Helpers\nimport hexToRGB from 'helpers/hexToRGB';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const PageTabsStyle = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: 100%;\n  overflow: hidden;\n  position: relative;\n\n  &:before {\n    content: '';\n    position: absolute;\n    pointer-events: none;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    width: calc(${Root.Size} / 2);\n    z-index: 3;\n    background-image: ${props =>\n      props.GradientColor\n        ? 'linear-gradient(-90deg, ' +\n          hexToRGB(props.GradientColor, 1) +\n          ',' +\n          hexToRGB(props.GradientColor, 0.000001) +\n          ')'\n        : 'pink'};\n\n    /* hexToRGB(props.GradientColor, 1) */\n\n    /* background-image: linear-gradient(\n      -90deg,\n      rgba(25d5,255,0, 1) 20%,\n      rgba(25d5,255,0, 0) 100%\n    ); */\n  }\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n\n  ul {\n    display: block;\n    width: 100%;\n    max-width: 100%;\n    word-wrap: none;\n    white-space: nowrap;\n    overflow-x: auto;\n    padding: calc(${Root.Size} / 4) 0;\n\n    li {\n      display: inline-block;\n      margin-right: calc(${Root.Size});\n      font-size: 1.5rem;\n\n      .btn {\n        position: relative;\n        left: 0;\n        .btn-inner {\n          height: calc(${Root.Button.Size} * 0.7);\n          font-size: 1.8rem;\n          font-weight: normal;\n          padding: 0;\n          box-shadow: none;\n          opacity: 0.6;\n\n          &:hover {\n            box-shadow: none;\n            opacity: 1;\n          }\n        }\n\n        &.active {\n          .btn-inner {\n            font-weight: bold;\n            opacity: 1;\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default PageTabsStyle;\n//////////////////////////////////////////////////////////////////////\n","// PageTabs Component:\n// This is for listing out suggestions with an optional label in the front.\n// Reference: https://www.dropbox.com/s/qvn6rohf52unkpv/Screenshot%202019-05-02%2017.19.11.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Styles\nimport PageTabsStyle from './styles.scss';\n\n// Components\nimport Btn from 'components/library/Btn/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Our nearby locations component\nconst PageTabs = ({\n  List,\n  Label,\n  Location,\n  BaseUrl,\n  TextColor,\n  Padding,\n  Affix,\n}) => {\n  return (\n    <PageTabsStyle className=\"page-tabs\" Padding={Padding}>\n      <ul>\n        {List.map((item, index) => {\n          // Creating slugs.\n          const DestinationPath = Affix\n            ? BaseUrl + item.slug + Affix\n            : BaseUrl + item.slug;\n          const LocationPath = Location.pathname;\n          const LocationPathWithSlash = Location.pathname + '/';\n\n          // Helper function to match our locations.\n          function matchPath(destination, currentLocation) {\n            // If location & destination match:\n            if (destination == currentLocation) {\n              let className = 'active';\n              return className;\n            } else {\n              // Check and see if our destination matches without the\n              // last `/` of the url. I.e. `locations/reno vs locations/reno/`\n              if (destination == currentLocation.slice(0, -1)) {\n                let className = 'active';\n                return className;\n              } else {\n                // Then inactive:\n                let className = 'inactive';\n                return 'inactive';\n              }\n            }\n          }\n\n          // Return PageTabs.\n          return (\n            <li key={index}>\n              <Btn\n                AddClass={matchPath(DestinationPath, LocationPathWithSlash)}\n                BgColor=\"none\"\n                Label={item.name}\n                Destination={DestinationPath}\n                TextColor={TextColor}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </PageTabsStyle>\n  );\n};\n\nexport default PageTabs;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// templates/Learn.js:\n// This is the template for Learn pages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Layout from 'components/core/Layout';\nimport { SubLevelPageContent, SubLevelPage } from 'templates/SubLevelPage';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport AwardHours from 'components/library/AwardHours';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport SimpleSection from 'components/library/Section/SimpleSection';\nimport SlideSection from 'components/library/Section/SlideSection';\nimport QuestionListings from 'components/library/QuestionListings';\n\n//// Misc. Components\nimport Bread from 'components/library/Breadcrumb';\nimport SocialStrip from 'components/library/SocialStrip';\nimport QuestionFooter from 'components/library/QuestionFooter';\nimport Btn from 'components/library/Btn/';\nimport SuggestionList from 'components/library/SuggestionList';\nimport PageTabs from 'components/library/PageTabs';\nimport SimpleList from 'components/library/SimpleList';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// LocationPageWrapper component for page theming.\nconst LocationPageWrapper = ({\n  children,\n  Headline,\n  LocationData,\n  Location,\n}) => {\n  const LocationTheme = LocationData.about.PageTheme;\n\n  return (\n    <Layout\n      BgColor={LocationTheme.Color.Background}\n      PrimaryColor={LocationTheme.Color.Primary}\n      SecondaryColor={LocationTheme.Color.Secondary}\n      TertiaryColor={LocationTheme.Color.Tertiary}\n    >\n      <SubLevelPage\n        BgColor={LocationTheme.Color.Background}\n        PrimaryColor={LocationTheme.Color.Primary}\n        SecondaryColor={LocationTheme.Color.Secondary}\n        TertiaryColor={LocationTheme.Color.Tertiary}\n      >\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[3, 1, 1.45, 1]}\n          Flex=\"row\"\n          TextColor={LocationTheme.Color.Primary}\n        >\n          <Block maxWidth={0.5}>\n            {/* <Bread\n              Crumbs={[\n                {\n                  Destination: 'locations/',\n                  Label: 'Locations',\n                },\n                {\n                  Destination: 'locations/',\n                  Label: LocationData.geography.state,\n                },\n                {\n                  Destination:\n                    'locations/' +\n                    LocationData.geography.state.toLowerCase() +\n                    '/' +\n                    LocationData.slug,\n                  Label: LocationData.name,\n                },\n              ]}\n              TextColor={LocationTheme.Color.Primary}\n            /> */}\n            <h1 className=\"h2\">{LocationData.about.headline}</h1>\n            <Btn\n              IconClass=\"plus\"\n              Label=\"View Menu\"\n              BgColor={LocationTheme.Color.Primary}\n              TextColor={LocationTheme.Color.Tertiary}\n              Destination={\n                '/menu/' +\n                LocationData.geography.state.toLowerCase() +\n                '/' +\n                LocationData.slug\n              }\n              IconPosition=\"left\"\n              IconFas\n            />\n            <Btn\n              AddClass=\"btn-secondary\"\n              IconClass=\"map-marker-alt\"\n              Label={LocationData.contactDetails.location.address}\n              BgColor=\"none\"\n              TextColor={LocationTheme.Color.Tertiary}\n              Destination={LocationData.meta.maps}\n              IconPosition=\"left\"\n              External\n              IconFas\n            />\n            {/* <SocialStrip\n              Margin={[0.5, 0, 0, 0]}\n              Location={Location}\n              TextColor={LocationTheme.Color.Primary}\n            /> */}\n          </Block>\n          <Block Flex=\"row\" maxWidth={0.5}>\n            <AwardHours\n              TextColor={LocationTheme.Color.Primary}\n              Hours={LocationData.contactDetails.hours.map((time, index) => {\n                return {\n                  Label: time.days,\n                  Data: time.start_time,\n                };\n              })}\n            />\n          </Block>\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[0, 1, 0, 1]}\n          Flex=\"column\"\n          TextColor={LocationTheme.Color.Primary}\n        >\n          <PageTabs\n            Location={Location}\n            BaseUrl={\n              '/locations' +\n              '/' +\n              LocationData.geography.state.toLowerCase() +\n              '/' +\n              LocationData.slug +\n              '/'\n            }\n            List={[\n              { name: 'About', slug: '' },\n              { name: 'Specials', slug: 'specials' },\n              { name: 'Menu', slug: 'menu' },\n            ]}\n            TextColor={LocationTheme.Color.Primary}\n            Padding={[0, 0, 0, 0]}\n          />\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[0, 1, 0, 1]}\n          Flex=\"column\"\n          TextColor={LocationTheme.Color.Primary}\n          Tint={0}\n          TintBorder\n        >\n          <SuggestionList\n            BaseUrl={\n              '/locations' +\n              '/' +\n              LocationData.geography.state.toLowerCase() +\n              '/' +\n              LocationData.slug +\n              '/'\n            }\n            List={LocationData.nearby}\n            Affix=\"/menu\"\n            Label=\"Nearby\"\n            TextColor={LocationTheme.Color.Primary}\n            GradientColor={LocationTheme.Color.Background}\n            Padding={[0, 0, 0, 0]}\n          />\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        {/* Begin page content. */}\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n        <SubLevelPageContent\n          BgColor={Theme.Color.Background}\n          TextColor={Theme.Color.Nightsky}\n        >\n          {/* ///////////// */}\n\n          {/* ///////////// */}\n\n          {children}\n\n          {/* ///////////// */}\n\n          {/* ///////////// */}\n        </SubLevelPageContent>\n        {/* End page content. */}\n      </SubLevelPage>\n    </Layout>\n  );\n};\n\nexport default LocationPageWrapper;\n","// templates/Learn.js:\n// This is the template for Learn pages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport SimpleSection from 'components/library/Section/SimpleSection';\nimport SplitSection from 'components/library/Section/SplitSection';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport StickyScrollSection from 'components/library/Section/StickyScrollSection';\nimport QuestionFooter from 'components/library/QuestionFooter';\nimport Block from 'components/library/Block';\nimport Btn from 'components/library/Btn';\n\n// Template Specific Components\nimport LocationPageWrapper from '../Components/LocationPageWrapper';\n\n// Castle.js by L&M\nimport Castle from 'components/library/Castle';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// TemplateLayout Component to pass data where it needs to go for\n// the theming of the hero as well as the LearnSection and what\n// to display in those cards.\nconst TemplateLayout = ({ LocationData, Location, Headline, elements }) => {\n  // Build our automatic summary headline.\n  let SummaryHeadlineString =\n    LocationData.name +\n    // eslint-disable-next-line\n    \"'s leading cannabis dispensary — where humans come first.\";\n\n  // Check if a headline exists. If it does, display it. If it doesn't, use SummaryHeadlineString.\n  let SummaryHeadline =\n    LocationData.about.summary.headline != ''\n      ? LocationData.about.summary.headline\n      : SummaryHeadlineString;\n\n  return (\n    <LocationPageWrapper\n      Headline={Headline}\n      LocationData={LocationData}\n      Location={Location}\n    >\n      {/* Check if elements exist. If so, run Castle. If not, display nothing. */}\n      {elements ? <Castle Bricks={elements} Location={Location.href} /> : null}\n\n      {/* ///////////// */}\n    </LocationPageWrapper>\n  );\n};\n\n// The Template itself. Where it all begins.\nconst LocationLandingTemplate = ({ LocationData, Location, elements }) => {\n  return (\n    <TemplateLayout\n      LocationData={LocationData}\n      Location={Location}\n      elements={elements}\n    />\n  );\n};\n\nexport default LocationLandingTemplate;\n","// templates/Location/Landing/index.js:\n// This is the Location Landing page.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Templates\nimport LocationLandingTemplate from './layout';\n\n// Transformers\nimport { locationLandingTransformer } from 'templates/Location/Transformer';\n\n// Load Castle Fragments\nimport 'components/library/Castle';\n\n// Data\nimport { graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst LocationLandingPage = props => {\n  console.log(props.data.allPrismicLocation.edges[0].node.data.elements)\n  return (\n    <LocationLandingTemplate\n      LocationData={\n        locationLandingTransformer(props.data.allPrismicLocation.edges[0].node)\n          .edges.node\n      }\n      elements={props.data.allPrismicLocation.edges[0].node.data.elements}\n      Location={props.location}\n      Headline={\n        locationLandingTransformer(props.data.allPrismicLocation.edges[0].node)\n          .edges.node.about.headline\n      }\n    />\n  );\n};\n\nexport default LocationLandingPage;\n\n// GraphQL Queries\n/////////////////////////////////////////////////////////////////////\n\n// The post template's GraphQL query. Notice the slug\n// variable which is passed in. We set this on the page\n// context in gatsby-node.js.\n//\n// All GraphQL queries in Gatsby are run at build-time and\n// loaded as plain JSON files so have minimal client cost.\nexport const query = graphql`\n  query($Id: String!) {\n    allPrismicLocation(filter: { id: { eq: $Id } }) {\n      edges {\n        node {\n          id\n          tags\n          uid\n\n          # Load our Castle Component data.\n          ...PrismicLocationElementsHeroData\n          ...PrismicLocationElementsFullSplitSectionData\n          ...PrismicLocationElementsSimpleSectionData\n          ...PrismicLocationElementsSplitSectionData\n          ...PrismicLocationElementsStickyGalleryData\n          ...PrismicLocationElementsSplitImageHeroData\n          ...PrismicLocationElementsPromotionalStripData\n          ...PrismicLocationElementsWidgetRowData\n\n          data {\n            name {\n              text\n            }\n            status_delivery\n            status_store\n            geo_city\n            geo_state\n            geo_country\n            geo_location_address\n            geo_location_state\n            phone\n            hours {\n              days\n              start_time\n              end_time\n            }\n            meta_reserve_spot_link {\n              url\n            }\n            meta_menu {\n              url\n            }\n            meta_google_maps_url {\n              url\n            }\n            nearby_locations {\n              nearby_name\n              nearby_slug\n              color_background\n              color_primary\n              color_secondary\n              color_tertiary\n            }\n            about_headline {\n              text\n            }\n            color_background\n            color_primary\n            color_secondary\n            color_tertiary\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Block> Styles:\n// This is the primary column component.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\nexport const BlockStyle = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.flex : 'column')};\n  position: relative;\n  flex-shrink: 1;\n  ${props => (props.BgColor ? 'background: ' + props.BgColor + ';' : null)}\n  ${props => (props.TextColor ? 'color: ' + props.TextColor + ';' : null)}\n  \n  /* Item Alignment. We are aligning items */\n  /* 'stretch' by default. */\n  ${props =>\n    props.AlignItems ? 'align-items: ' + props.AlignItems + ';' : null}\n\n  /* Centered Style */\n  ${props =>\n    props.Style == 'centered' &&\n    css`\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto;\n\n      p,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        text-align: center;\n        width: 100%;\n      }\n\n      .btn {\n        margin: 0 auto;\n      }\n\n      .block-content {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n      }\n    `}\n\n  /* The block content. */\n  .block-content {\n    z-index: 2;\n    margin: 0 auto;\n    width: 100%;\n    ${props => (props.JustifyContent ? 'display:flex' : null)};\n    ${props =>\n      props.JustifyContent\n        ? 'justify-content: ' + props.JustifyContent + ';'\n        : null}\n\n    p {\n      max-width: 80%;\n    }\n  }\n\n  /* Background images with Gatsby-Img */\n  .block-img {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n\n    .img {\n      flex: 1;\n    }\n  }\n\n  /* Width Multiple */\n    ${props =>\n      props.Width ? 'width: ' + props.Width * 100 + '%;' : 'flex: 1;'}\n  max-width: ${props =>\n    props.maxWidth\n      ? 'calc(' + Theme.Base.Grid.SiteWidth + ' * ' + props.maxWidth + ')'\n      : Theme.Base.Grid.SiteWidth};\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n`;\n\nexport default BlockStyle;\n//////////////////////////////////////////////////////////////////////\n","// <Block> Component:\n// This is the sitewide block style of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Styles\nimport BlockStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Block = ({\n  children,\n  className,\n  Style,\n  maxWidth,\n  Width,\n  Padding,\n  AlignItems,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  BgTint,\n  BgColor,\n  TextColor,\n  JustifyContent,\n  Flex,\n}) => (\n  <BlockStyle\n    className={className ? className + ' block' : 'block'}\n    Width={Width}\n    maxWidth={maxWidth}\n    Style={Style}\n    Padding={Padding}\n    AlignItems={AlignItems ? AlignItems : false}\n    JustifyContent={JustifyContent ? JustifyContent : false}\n    BgTint={BgTint}\n    BgColor={BgColor}\n    TextColor={TextColor}\n    Flex={Flex}\n  >\n    {/* Block Content */}\n    {children ? <div className=\"block-content\">{children}</div> : null}\n\n    {/* For Background Images */}\n    {BgMatch ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n\n    {/* For Background Images with ImgQuery */}\n    {BgQuery ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgQuery src={BgQuery} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n  </BlockStyle>\n);\n\nexport default Block;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SlideSectionStyle = styled.div`\n  width: 100%;\n  overflow: hidden;\n\n  /* Slick styles */\n  .slick-slider {\n    padding-bottom: ${Theme.Base.Size.Sm};\n    margin-bottom: ${Theme.Base.Size.Sm};\n\n    .slick-slide {\n      &:first-child {\n        .widget {\n          padding-left: 0;\n        }\n      }\n    }\n    .slick-list {\n      overflow: visible;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      z-index: 400;\n      background: rgba(0, 0, 0, 0);\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc((${Root.Size} * 0.75) + (${Root.Size} * 0.25));\n      }\n\n      &.slick-next {\n        right: 0;\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n\n    .slick-dots {\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: auto;\n      padding: 0;\n      margin: 0;\n\n      li {\n        margin: 0;\n        padding: 0;\n        width: 10px;\n        height: 10px;\n        margin-right: 5px;\n\n        button {\n          margin: 0;\n          padding: 0;\n          position: relative;\n          width: 10px;\n          height: 10px;\n          margin-right: 5px;\n\n          &:before {\n            content: '';\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            width: 7px;\n            height: 7px;\n            border: 1px solid ${Theme.Color.Black};\n            border-radius: 50%;\n          }\n        }\n      }\n    }\n  }\n`;\n\nSlideSectionStyle.Inner = styled(SectionInnerStyle)`\n  width: 100%;\n  padding-bottom: 0;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: 0'};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n`;\n\nSlideSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: column;\n\n  .widget {\n    padding: calc(${Root.Size} / 6);\n    height: ${props =>\n      props.SectionSize\n        ? 'calc(' + Root.Size + '*' + props.SectionSize + ')'\n        : 'calc(' + Root.Size + '* 3)'};\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      padding: calc(${Root.Size}) calc(${Root.Size} / 4);\n      height: ${props =>\n        props.SectionSize\n          ? 'calc((' + Root.Size + '* 3) * ' + props.SectionSize + ')'\n          : 'calc((' + Root.Size + '* 3) * 3)'};\n    }\n  }\n`;\n\nSlideSectionStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n`;\n\nSlideSectionStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : null)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  i {\n    margin-right: ${Theme.Base.Size.Sm};\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n`;\n\nSlideSectionStyle.CallToAction = styled.div`\n  display: flex;\n\n  .btn {\n    background-color: rgba(0, 0, 0, 0);\n    color: ${Theme.Color.Black};\n\n    svg {\n      fill: ${Theme.Color.Black};\n      border: ${Theme.Color.Black};\n    }\n\n    i {\n      color: ${Theme.Color.Black};\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nexport default SlideSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SlideSection.js:\n//\n// Usage:\n// <SlideSection\n// Widgets={Widgets}\n// SectionSize=\"Large\"\n// SlidesToShow={4}\n// Header=\"Headline\"\n// ViewAll={['/', 'View All']}\n// />\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\nimport { Link } from 'gatsby';\n\n// Components\nimport WidgetContainer from 'components/library/Widgets/Container/';\nimport Btn from 'components/library/Btn';\nimport Icon from 'elements/Icons';\n\n// Constants\nimport { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport SlideSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Section Slider:\n// For displaying widgets within a SlideSection.\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The Slider itself.\nclass SectionSlider extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n\n    // Get any theming.\n    const ArrowColor = this.props.ArrowColor;\n\n    // Get any custom Slider Settings we want to pass.\n    const slidesToShow = this.props.SliderSettings.slidesToShow\n      ? this.props.SliderSettings.slidesToShow\n      : 1;\n    const slidesToScroll = this.props.SliderSettings.slidesToScroll\n      ? this.props.SliderSettings.slidesToScroll\n      : 1;\n    const autoplay = this.props.SliderSettings.autoplay\n      ? this.props.SliderSettings.autoplay\n      : false;\n    const arrows = this.props.SliderSettings.arrows\n      ? this.props.SliderSettings.arrows\n      : false;\n\n    // Pass into Slick Settings.\n    const settings = {\n      dots: true,\n      speed: 550,\n      arrows: false,\n      autoplaySpeed: 4000,\n      slidesToShow: slidesToShow,\n      slidesToScroll: slidesToScroll,\n      autoplay: autoplay,\n      infinite: false,\n      draggable: true,\n      arrows: arrows,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n      responsive: [\n        {\n          breakpoint: Base.Media.Width.Md + 'px',\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n          },\n        },\n      ],\n    };\n\n    return (\n      <>\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n        <Slider ref={h => (this.slider = h)} {...settings}>\n          {this.props.children}\n        </Slider>\n      </>\n    );\n  }\n}\n\n// The SubLevel Page Itself\nconst SlideSection = ({\n  Widgets,\n  SectionSize,\n  SliderSettings,\n  Header,\n  Icon,\n  ViewAll,\n  Theme,\n  Gutter,\n}) => (\n  <SlideSectionStyle>\n    <SlideSectionStyle.Inner Gutter={Gutter}>\n      <SlideSectionStyle.Content SectionSize={SectionSize}>\n        <SlideSectionStyle.SectionHeader>\n          <SlideSectionStyle.Headline TextColor={Theme.TextColor}>\n            {Icon ? <i className={'fas fa-' + Icon} /> : null}\n            <h2>{Header}</h2>\n          </SlideSectionStyle.Headline>\n          {ViewAll ? (\n            <SlideSectionStyle.CallToAction>\n              <Btn\n                Destination={ViewAll[0]}\n                BgColor=\"inherit\"\n                Label={ViewAll[1]}\n                IconclassName=\"carat\"\n              />\n            </SlideSectionStyle.CallToAction>\n          ) : null}\n        </SlideSectionStyle.SectionHeader>\n\n        <SectionSlider\n          SliderSettings={SliderSettings}\n          ArrowColor={Theme.TextColr}\n        >\n          {/* Map our Widgets data. */}\n          {Widgets.map((Widget, index) => {\n            // Pass our Widgets data to our WidgetContainers\n            return (\n              <WidgetContainer\n                key={index}\n                WidgetContent={Widget.WidgetContent}\n                Flex={Widget.Flex ? Widget.Flex : null}\n              />\n            );\n          })}\n        </SectionSlider>\n      </SlideSectionStyle.Content>\n    </SlideSectionStyle.Inner>\n  </SlideSectionStyle>\n);\n\nexport default SlideSection;\n","// WrapperControl.js:\n// For controlling our `.wrapper` class app-wide.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Lock Wrapper Scroll\nexport const WrapperLock = createGlobalStyle`\n  html, body {\n    overflow: hidden;\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: visible !important; \n      overflow: visible;\n      \n      .wrapper {\n        overflow-y: hidden;\n      }\n    }\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow: hidden;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow: hidden; \n      overflow-y: hidden;\n    }\n  }\n\n  .slick-slider {\n    touch-action: none !important;\n  }\n`;\n\n// Release Wrapper Scroll\nexport const WrapperRelease = createGlobalStyle`\n  html, body {\n      overflow: auto;\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow-y: visible;\n      height: auto;\n      position: absolute;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: hidden;\n      position: absolute;\n    }\n  }\n`;\n\n// Wrapper Flex Reseet\nexport const WrapperFlexStart = createGlobalStyle`\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      justify-content: flex-start;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      justify-content: space-between;\n    }\n  }\n`;\n","// SimpleSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nSimpleSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n    .img {\n      height: 100%;\n    }\n  }\n`;\n\nSimpleSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n`;\n\nexport default SimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SimpleSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  FluidHeight,\n  Gutter,\n  Flex,\n  children,\n}) => (\n  <SimpleSectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <SimpleSectionStyle.Inner\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <SimpleSectionStyle.Content\n        FluidHeight={FluidHeight}\n        Flex={Flex}\n        className=\"simple-section\"\n      >\n        {children}\n      </SimpleSectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </SimpleSectionStyle.Inner>\n  </SimpleSectionStyle>\n);\n\nexport default SimpleSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MenuHero Styles:\n// These are nearly identical to the Section base styles.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInnerStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  position: relative;\n  overflow: hidden;\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : 'padding-top: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : 'padding-bottom: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ' * ' +\n        props.Padding[3] +\n        ')'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  .hero-img {\n    pointer-events: none;\n    ${props =>\n      props.imgRight || props.imgLeft || props.imgTop || props.imgBottom\n        ? 'position: absolute'\n        : null};\n    ${props => (props.imgRight ? 'right: ' + props.imgRight : null)};\n    ${props => (props.imgLeft ? 'left: ' + props.imgLeft : null)};\n    ${props => (props.imgBottom ? 'bottom: ' + props.imgBottom : null)};\n    ${props => (props.imgTop ? 'top: ' + props.imgTop : null)};\n    ${props => (props.imgWidth ? 'width: ' + props.imgWidth : null)};\n  }\n\n  .btn-secondary {\n    margin-left: calc(${Root.Size} / 4);\n  }\n`;\n\nexport const HeroContentStyle = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: ${props =>\n    props.JustifyContent ? props.JustifyContent : 'flex-start'};\n  max-width: ${props => (props.FullWidth ? '100%' : Theme.Base.Grid.SiteWidth)};\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHeroStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  z-index: 1;\n  position: relative;\n  /* margin-top: calc(${Root.Nav.Size} * -1); */\n  background: ${props => (props.Background ? props.Background : 'none')};\n  background-size: cover;\n  background-position: center center;\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n  align-self: flex-start;\n  justify-self: flex-start;\n\n  /* Background Tint */\n  ${props =>\n    props.Tint\n      ? `\n  &.tint {\n    &:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      top: 0;\n      background-color: rgba(0,0,0,` +\n        props.Tint +\n        `);\n    }\n    .inner {\n      z-index: 500;\n    }\n  }\n  `\n      : null}\n  \n  /* Background Tint */\n  ${props =>\n    props.TintBorder\n      ? `\n      &:after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;      \n      top: 0;\n      height: 1px;\n      z-index: 5;\n      background-color: rgba(0,0,0, 0.05);\n    }\n  `\n      : null}\n\n  /* Block Spacing */\n  .block {\n    &:first-child {\n      padding-right: calc(${Root.Size} / 2);\n    }\n    &:second-child {\n      padding-left: calc(${Root.Size} / 2);\n    }\n  }\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n    height: 100%;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img, .img {\n      height: 100%;\n    }\n    .hero-img, .gatsby-image-wrapper {\n      position: unset !important;\n    }\n  }\n`;\n\nexport default SimpleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Helpers\nimport { HeroInner } from './../../Hero';\n\n// Styles\nimport SimpleHeroStyle from './styles.scss';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHero = ({\n  Background,\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  TextColor,\n  Tint,\n  Padding,\n  Size,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  Flex,\n  JustifyContent,\n  TintBorder,\n  children,\n}) => (\n  <SimpleHeroStyle\n    Background={Background}\n    TextColor={TextColor}\n    Tint={Tint}\n    TintBorder={TintBorder}\n    className={Tint ? 'tint' : null}\n  >\n    <HeroInner\n      Size={Size ? Size : false}\n      Padding={Padding}\n      imgRight={imgRight ? imgRight : false}\n      imgLeft={imgLeft ? imgLeft : false}\n      imgBottom={imgBottom ? imgBottom : false}\n      imgTop={imgTop ? imgTop : false}\n      imgWidth={imgWidth ? imgWidth : false}\n      JustifyContent={JustifyContent}\n      className=\"inner\"\n      Flex={Flex}\n    >\n      {children}\n    </HeroInner>\n    {BgMatch ? (\n      <div className=\"section-img\">\n        <ImgMatch src={BgMatch} AltText={BgAlt} className=\"hero-img\" />\n      </div>\n    ) : null}\n    {BgQuery ? (\n      <div className=\"section-img\">\n        <ImgQuery src={BgQuery} AltText=\"Hero Alt\" className=\"hero-img\" />\n      </div>\n    ) : null}\n  </SimpleHeroStyle>\n);\n\nexport default SimpleHero;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Breadcrumb> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const BreadCrumb = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  width: 100%;\n  align-items: center;\n  transform: translateX(calc(1rem * -1.5));\n  text-decoration: none;\n`;\n\nBreadCrumb.Label = styled(Link)`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  margin-left: calc(${Theme.Base.Size.Sm});\n  position: relative;\n  text-transform: capitalize;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: calc((${Theme.Base.Size.Sm} / 2) * -1);\n    transform: translateY(-50%);\n    width: 2px;\n    height: 2px;\n    border-radius: 50%;\n    background-color: ${props =>\n      props.TextColor ? props.TextColor : Theme.Color.Black};\n  }\n\n  &:first-child {\n    margin-left: 0;\n    position: relative;\n\n    &:before {\n      display: none;\n    }\n  }\n\n  svg {\n    transform: rotate(180deg) translateX(0%);\n    transform-origin: center center;\n    width: 1rem;\n    height: 1rem;\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transition: all 0.25s ease;\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n\n  &:hover {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    svg {\n      transform: rotate(180deg) translateX(50%);\n    }\n  }\n`;\n\nexport default BreadCrumb;\n//////////////////////////////////////////////////////////////////////\n","// <Bread Crumbs=\"\"> Component:\n// The breadcrumb component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport BreadCrumbStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Bread = ({ Crumbs, TextColor }) => (\n  <BreadCrumbStyle>\n    {Crumbs.map((crumb, index) => {\n      return (\n        <BreadCrumbStyle.Label\n          to={crumb.Destination}\n          key={index}\n          TextColor={TextColor}\n        >\n          {/* // Hide back button if nested item. */}\n          {index == 0 ? (\n            <Icon className=\"svg-carat\" Name=\"carat\" TextColor={TextColor} />\n          ) : null}\n\n          {crumb.Label}\n        </BreadCrumbStyle.Label>\n      );\n    })}\n  </BreadCrumbStyle>\n);\n\nexport default Bread;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Hero Component:\n// This is a helper component containing base\n// Hero styles shared across all Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { HeroInnerStyle, HeroContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInner = ({\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  Size,\n  Flex,\n  Padding,\n  children,\n  JustifyContent,\n}) => (\n  <HeroInnerStyle\n    Size={Size ? Size : false}\n    Padding={Padding ? Padding : false}\n    imgRight={imgRight ? imgRight : false}\n    imgLeft={imgLeft ? imgLeft : false}\n    imgBottom={imgBottom ? imgBottom : false}\n    imgTop={imgTop ? imgTop : false}\n    imgWidth={imgWidth ? imgWidth : false}\n  >\n    <HeroContentStyle\n      className=\"hero-content\"\n      JustifyContent={JustifyContent}\n      Flex={Flex}\n    >\n      {children}\n    </HeroContentStyle>\n  </HeroInnerStyle>\n);\n\nexport const HeroContent = ({ children, Flex }) => (\n  <HeroContentStyle Flex={Flex} className=\"hero-content\">\n    {children}\n  </HeroContentStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Widget Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Keyframes\nimport { FadeIn } from 'components/core/Transition/Keyframes';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidgetStyle = styled.div`\n  width: 100%;\n  padding-bottom: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  opacity: 0;\n  margin-top: ${Theme.Base.Size.Sm};\n  animation-fill-mode: forwards;\n  ${FadeIn};\n`;\n\nSidebarWidgetStyle.Inner = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: ${props =>\n    props.BgColor ? props.BgColor : Theme.Color.White};\n  border-radius: ${Root.Radius};\n  box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n  overflow: hidden;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  cursor: pointer;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Background Images */\n\n  ${props => {\n    if (props.BgImage)\n      return (\n        `\n        background-image: url(` +\n        props.BgImage +\n        `);\n        background-size: cover;\n        background-position: center center;\n        background-repeat: no-repeat;\n        `\n      );\n  }};\n\n  /* Tint */\n\n  ${props => {\n    if (props.TintColor || props.TintOpacity)\n      return (\n        `\n        &:before {\n          content: '';\n          position: absolute;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          right: 0;\n          background-color:` +\n        props.TintColor +\n        `;\n          opacity:` +\n        props.TintOpacity +\n        `;\n          transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n        }\n    `\n      );\n  }};\n\n  /* Links */\n  a {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    flex: 1;\n    width: 100%;\n    color: white;\n    transform: scale(1.000000001);\n    position: relative;\n    padding: ${Theme.Base.Size.Sm};\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* The Carat Icon */\n  svg {\n    position: absolute;\n    right: ${Theme.Base.Size.Sm};\n    top: ${Theme.Base.Size.Sm};\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transform: translateX(0%);\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* Hover Styles */\n  &:hover {\n    background-color: ${Theme.Color.Black};\n    color: ${Theme.Color.White};\n    box-shadow: 0 20px 30px 0 rgba(6, 10, 92, 0.21);\n\n    a {\n      text-decoration: none;\n      color: ${Theme.Color.White};\n    }\n\n    /* The Carat Icon */\n    svg {\n      transform: translateX(50%);\n      fill: ${Theme.Color.White};\n      height: 1.2rem;\n      width: 1.2rem;\n    }\n\n    /* The Widget Icon */\n    .fas {\n      color: ${Theme.Color.White};\n    }\n\n    /* Tint */\n    ${props => {\n      if (props.TintColor || props.TintOpacity)\n        return `\n        &:before {\n          opacity: 1\n        }\n    `;\n    }};\n  }\n`;\n\nSidebarWidgetStyle.Subhead = styled.div`\n  font-size: 1rem;\n  line-height: 1.2;\n`;\n\nSidebarWidgetStyle.Headline = styled.div`\n  font-size: 1.1rem;\n  line-height: 1.2;\n  font-weight: bold;\n`;\n\nSidebarWidgetStyle.Icon = styled.i`\n  position: absolute;\n  right: ${Theme.Base.Size.Sm};\n  top: ${Theme.Base.Size.Sm};\n  font-size: 1.2rem;\n  transform: scale(1.4);\n  transform-origin: top right;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  color: ${props => (props.Color ? props.Color : Theme.Color.Black)};\n`;\n\nexport default SidebarWidgetStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Default Widget.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport SidebarWidgetStyle from './styles.scss';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidget = ({\n  BgColor,\n  BgImage,\n  Headline,\n  TextColor,\n  IconName,\n  IconColor,\n  Destination,\n  TintColor,\n  TintOpacity,\n}) => (\n  <SidebarWidgetStyle className=\"widget\">\n    <SidebarWidgetStyle.Inner\n      BgColor={BgColor}\n      BgImage={BgImage}\n      TextColor={TextColor}\n      TintColor={TintColor}\n      TintOpacity={TintOpacity}\n    >\n      <Link to={Destination}>\n        <SidebarWidgetStyle.Headline>{Headline}</SidebarWidgetStyle.Headline>\n\n        {/* Pass Icon value using FontAwesome */}\n        {/* Read more: https://fontawesome.com/how-to-use/on-the-web/setup/getting-started */}\n        <SidebarWidgetStyle.Icon\n          className={'fas fa-' + IconName}\n          Color={IconColor}\n        />\n      </Link>\n    </SidebarWidgetStyle.Inner>\n  </SidebarWidgetStyle>\n);\n\nexport default SidebarWidget;\n","// Sidebar Component Styles\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SidebarStyle = styled.div`\n  position: fixed;\n  top: ${Root.Nav.Size};\n  bottom: 0;\n  height: calc(100vh - ${Root.Nav.Size});\n  display: flex;\n  z-index: 555;\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nSidebarStyle.Inner = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  padding: ${Theme.Base.Size.Sm};\n  width: ${Root.Grid.Gutter.Left};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nexport default SidebarStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Sidebar.js:\n// This is the sitewide sidebar component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport SidebarWidget from 'components/library/Widgets/Sidebar/Default';\n\n// Styles\nimport SidebarStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nconst Sidebar = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SidebarStyle>\n    <SidebarStyle.Inner>\n      <SidebarWidget\n        BgColor={Theme.Color.Primary}\n        BgImage=\"none\"\n        Headline=\"Delivery Available\"\n        TextColor={Theme.Color.White}\n        IconColor={Theme.Color.White}\n        IconName=\"car\"\n        Destination=\"/menu/delivery/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Reserve Spot\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"users\"\n        Destination=\"/menu/pick-up/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Visit\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"map-marker-alt\"\n        Destination=\"/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Chat\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"comment-alt\"\n        Destination=\"/culture\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Phone\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"phone\"\n        Destination=\"/contact\"\n      />\n    </SidebarStyle.Inner>\n  </SidebarStyle>\n);\n\nexport default Sidebar;\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SubLevelPageStyle = styled.div`\n  width: 100%;\n  flex: 1;\n  display: flex;\n  flex-wrap: nowrap;\n  color: ${Theme.Color.Background};\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n`;\n\nSubLevelPageStyle.Inner = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n\nSubLevelPageStyle.Content = styled.div`\n  width: 100%;\n  flex: 1;\n  background: ${props => (props.BgColor ? props.BgColor : 'none')};\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n`;\n\nexport default SubLevelPageStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SubLevelPage.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport Sidebar from 'components/Library/Sidebar/';\nimport { WrapperRelease } from 'components/core/WrapperControl';\n\n// Styles\nimport SubLevelPageStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nexport const SubLevelPage = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SubLevelPageStyle className=\"sub\">\n    <WrapperRelease />\n    <Sidebar\n      BgColor={BgColor}\n      PrimaryColor={PrimaryColor}\n      SecondaryColor={SecondaryColor}\n      TertiaryColor={TertiaryColor}\n    />\n    <SubLevelPageStyle.Inner className=\"sublevel-inner\">\n      {children}\n    </SubLevelPageStyle.Inner>\n  </SubLevelPageStyle>\n);\n\n// The SubLevel Page Content\nexport const SubLevelPageContent = ({\n  BgColor,\n  TextColor,\n  ItemProp,\n  children,\n}) => (\n  <SubLevelPageStyle.Content\n    TextColor={TextColor}\n    BgColor={BgColor}\n    itemProp={ItemProp}\n  >\n    {children}\n  </SubLevelPageStyle.Content>\n);\n","// WidgetSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nWidgetSection.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  height: 400px;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n`;\n\nWidgetSection.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-wrap: wrap;\n\n  .widget {\n    width: 25%;\n    padding: calc(${Root.Size} / 6);\n    &:first-child {\n      padding-left: 0;\n    }\n    &:last-child {\n      padding-right: 0;\n    }\n\n    @media (max-width: calc(${Theme.Base.Media.Width.Md} * 1.5)) {\n      width: 50%;\n      flex: unset;\n      &:nth-child(odd) {\n        padding-left: 0;\n      }\n      &:nth-child(even) {\n        padding-right: 0;\n      }\n    }\n  }\n`;\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// WidgetSection Component:\n// For displaying inline Widgets on Subpages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Widgets Container\nimport WidgetContainer from 'components/library/Widgets/Container/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport WidgetSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = ({ BgColor, Widgets, Slider, Gutter }) => (\n  <WidgetSectionStyle BgColor={BgColor}>\n    <WidgetSectionStyle.Inner Gutter={Gutter}>\n      <WidgetSectionStyle.Content className=\"widget-section\">\n        {/* Map our Widgets data. */}\n        {Widgets.map((Widget, index) => {\n          // Pass our Widgets data to our WidgetContainers\n          return (\n            <WidgetContainer\n              key={index}\n              WidgetContent={Widget.WidgetContent}\n              Flex={Widget.Flex ? Widget.Flex : null}\n            />\n          );\n        })}\n      </WidgetSectionStyle.Content>\n    </WidgetSectionStyle.Inner>\n  </WidgetSectionStyle>\n);\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Section Component:\n// This is a helper component containing base\n// Section styles shared across all Section components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { SectionInnerStyle, SectionContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const SectionInner = ({ children }) => (\n  <SectionInnerStyle>\n    <SectionContentStyle>{children}</SectionContentStyle>\n  </SectionInnerStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MasonrySecction Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst MasonrySectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n  overflow: visible;\n`;\n\nMasonrySectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n  overflow: visible;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n`;\n\nMasonrySectionStyle.Content = styled.div`\n  width: 100%;\n  position: relative;\n  margin: 0 auto;\n  overflow: visible;\n  max-width: ${Theme.Base.Grid.SiteWidth};\n\n  /* Performance fixes on Chrome & Safari */\n  -webkit-backface-visibility: hidden;\n  -moz-backface-visibility: hidden;\n  -ms-backface-visibility: hidden;\n  backface-visibility: hidden;\n\n  /* Performance fixes on Chrome & Safari */\n  -webkit-perspective: 1000;\n  -moz-perspective: 1000;\n  -ms-perspective: 1000;\n  perspective: 1000;\n\n  /* CSS Masonry */\n  /* Read more: https://w3bits.com/css-masonry/ */\n  column-width: 33%;\n  column-count: ${props => (props.Columns ? props.Columns : 3)};\n  column-gap: ${props =>\n    props.ColumnGap\n      ? ' calc(' + Root.Size + ' * ' + props.ColumnGap + ')'\n      : 'calc(' + Root.Size + '* .25)'};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    column-width: 100%;\n    column-count: 1;\n  }\n\n  .widget-content {\n    border-radius: ${Root.Radius};\n    box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n    position: relative;\n    overflow: hidden;\n    width: 100%;\n    display: inline-block;\n    margin-bottom: ${props =>\n      props.ColumnGap\n        ? ' calc(' + Root.Size + ' * ' + props.ColumnGap + ')'\n        : 'calc(' + Root.Size + '* .25)'};\n\n    .widget-headline {\n      margin-bottom: calc(${Root.Size} * 2);\n    }\n  }\n`;\n\nexport default MasonrySectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// MasonrySection Component:\n// This is a component for a MasonryGrid of Widgets.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport MasonrySectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst MasonrySection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  PaddingY,\n  FluidHeight,\n  Gutter,\n  Columns,\n  ColumnGap,\n  children,\n}) => (\n  <MasonrySectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <MasonrySectionStyle.Inner\n      Size={PaddingY}\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <MasonrySectionStyle.Content\n        FluidHeight={FluidHeight}\n        className=\"masonry-section\"\n        Columns={Columns}\n        ColumnGap={ColumnGap}\n      >\n        {children}\n      </MasonrySectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </MasonrySectionStyle.Inner>\n  </MasonrySectionStyle>\n);\n\nexport default MasonrySection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SocialStripStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SocialStripStyle = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Array-based margins utilizing root variable multiple. */\n  ${props =>\n    props.Margin\n      ? 'margin-top: calc(' + Root.Size + ' * ' + props.Margin[0] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-right: calc(' + Root.Size + ' * ' + props.Margin[1] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-bottom: calc(' + Root.Size + ' * ' + props.Margin[2] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-left: calc(' + Root.Size + ' * ' + props.Margin[3] + ')'\n      : null};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    margin-right: calc(${Theme.Base.Size.Md} * 0.8);\n    position: relative;\n    font-size: calc(${Root.Size} / 2);\n    width: calc(${Root.Size} / 2);\n    height: calc(${Root.Size} / 2);\n\n    span {\n      width: 100%;\n      height: auto;\n      font-size: calc(${Root.Size} / 2);\n      i {\n        font-size: calc(${Root.Size} / 2);\n      }\n    }\n\n    i {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%) scale(1.8);\n      transform-origin: center center;\n      opacity: 0;\n      border-radius: 50%;\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover {\n      &:before {\n        opacity: 0.1;\n      }\n    }\n  }\n`;\n\nSocialStripStyle.Label = styled.span`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  svg {\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nexport default SocialStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// SocialStrip Component:\n// The SocialStrip component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SocialStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SocialStrip = ({ TextColor, Location, Margin }) => (\n  <SocialStripStyle Margin={Margin} TextColor={TextColor}>\n    <a\n      href={'https://www.facebook.com/sharer.php?u=' + Location}\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"facebook\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://twitter.com/intent/tweet?url=' +\n        Location +\n        '&text=Test&via=Test&hashtags=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"twitter\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://www.linkedin.com/shareArticle?mini=true&url=' +\n        Location +\n        '&title=Test&summary=Test&source=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"linkedin\" Color={TextColor} />\n    </a>\n  </SocialStripStyle>\n);\n\nexport default SocialStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.4;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.09;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionListings Component:\n// The QuestionListings component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport QuestionListingsStyle from './styles.scss';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst QuestionCards = ({\n  CategoryFilter,\n  TagFilter,\n  CategorySlug,\n  AllCategories,\n  TagSlug,\n}) => {\n  // Assign our strings to build our slugs.\n  const CategorySlugString = CategorySlug ? '/' + CategorySlug : '';\n  const TagSlugString = TagSlug ? '/' + TagSlug : '';\n  const QuestionSlugString = CategorySlugString + TagSlugString;\n\n  // Helper Function to match the CategoryFilter to the right Category\n  function categoryMatch(categoryData, categoryFilter) {\n    // See  if our categoryData matches our supplied categoryFilter:\n    let matchedCategory = categoryData.filter(\n      category => category.node.Name === categoryFilter\n    );\n\n    // If it does, return the matched Category.\n    if (matchedCategory) {\n      return matchedCategory[0].node;\n    }\n  }\n\n  return (\n    // Run the StaticQuery to get the data we need.\n    <StaticQuery\n      query={graphql`\n        query {\n          allQuestionsJson {\n            edges {\n              node {\n                id\n                slug\n                date\n                author\n                title\n                category\n                tags\n                shortAnswer\n                longAnswer\n                coverImage\n              }\n            }\n          }\n\n          allQuestionCategoriesJson {\n            edges {\n              node {\n                Name\n                Icon\n                Slug\n                Tags {\n                  Name\n                  Icon\n                  Slug\n                }\n                PageTheme {\n                  Color {\n                    Background\n                    Primary\n                    Secondary\n                    Tertiary\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data =>\n        // Create our PageTheme variables for each Widget.\n\n        // Map the Question data we got.\n        data.allQuestionsJson.edges.map((Question, index) => {\n          // If the Question's Category is the same as the Filter supplied:\n          if (Question.node.category == CategoryFilter) {\n            // If there isn't a TagFilter applied:\n            if (TagFilter == 'all') {\n              // Use our helper function above to find the right Category's Data.\n              let filteredCategory = categoryMatch(\n                data.allQuestionCategoriesJson.edges,\n                CategoryFilter\n              );\n\n              return (\n                <DefaultWidget\n                  BgColor={filteredCategory.PageTheme.Color.Background}\n                  TextColor={filteredCategory.PageTheme.Color.Primary}\n                  Destination={\n                    '/learn' + QuestionSlugString + '/' + Question.node.slug\n                  }\n                  Subhead={Question.node.category}\n                  Headline={Question.node.title}\n                  IconName={filteredCategory.Icon}\n                  IconColor={filteredCategory.PageTheme.Color.Primary}\n                  BgImageFile={Question.node.coverImage}\n                  BgImageAltText={\n                    Question.node.category +\n                    ' & Cannabis | ' +\n                    Question.node.title\n                  }\n                  TintColor={Theme.Color.Black}\n                  TintOpacity={0.6}\n                  key={index}\n                />\n              );\n            } else {\n              // If there is a TagFilter applied, check the Tags Array\n              // to see if it includes our filter:\n              if (Question.node.tags.includes(TagFilter.toLowerCase())) {\n                // Use our helper function above to find the right Category's Data.\n                let filteredCategory = categoryMatch(\n                  data.allQuestionCategoriesJson.edges,\n                  CategoryFilter\n                );\n\n                return (\n                  <DefaultWidget\n                    BgColor={filteredCategory.PageTheme.Color.Background}\n                    TextColor={filteredCategory.PageTheme.Color.Primary}\n                    Destination={\n                      '/learn' + QuestionSlugString + '/' + Question.node.slug\n                    }\n                    Subhead={Question.node.category}\n                    Headline={Question.node.title}\n                    IconName={filteredCategory.Icon}\n                    IconColor={filteredCategory.PageTheme.Color.Primary}\n                    BgImageFile={Question.node.coverImage}\n                    BgImageAltText={\n                      Question.node.category +\n                      ' & Cannabis | ' +\n                      Question.node.title\n                    }\n                    TintColor={Theme.Color.Black}\n                    TintOpacity={0.6}\n                    key={index}\n                  />\n                );\n              } else {\n                // If it doesn't match anything, return false. And cry.\n                return false;\n              }\n            }\n          } else {\n            // If we want to display all the Questions, let's make their\n            // slug their root category.\n            if (CategoryFilter == 'all') {\n              // Use our helper function to match the Category data.\n              let filteredCategory = categoryMatch(\n                data.allQuestionCategoriesJson.edges,\n                Question.node.category\n              );\n\n              return (\n                <DefaultWidget\n                  BgColor={filteredCategory.PageTheme.Color.Background}\n                  TextColor={filteredCategory.PageTheme.Color.Primary}\n                  Destination={\n                    '/learn/' + filteredCategory.Slug + '/' + Question.node.slug\n                  }\n                  Subhead={Question.node.category}\n                  Headline={Question.node.title}\n                  IconName={filteredCategory.Icon}\n                  IconColor={filteredCategory.PageTheme.Color.Primary}\n                  BgImageFile={Question.node.coverImage}\n                  BgImageAltText={\n                    Question.node.category +\n                    ' & Cannabis | ' +\n                    Question.node.title\n                  }\n                  TintColor={Theme.Color.Black}\n                  TintOpacity={0.6}\n                  key={index}\n                />\n              );\n            } else {\n              // If nothing is supplied, don't return anything. Also, cry.\n              return null;\n            }\n          }\n        })\n      }\n    />\n  );\n};\n\nconst QuestionListings = ({\n  Gutter,\n  CategorySlug,\n  AllCategories,\n  TagSlug,\n  BgColor,\n  CategoryFilter,\n  TagFilter,\n}) => (\n  <MasonrySection\n    Columns={3}\n    ColumnGap={0.25}\n    BgColor={BgColor ? BgColor : Theme.Color.White}\n    TextColor={Theme.Color.Nightsky}\n    Gutter={Gutter ? Gutter : [0, 1, 2, 1]}\n  >\n    {/* If the CategoryFilter is supplied */}\n    {CategoryFilter ? (\n      <QuestionCards\n        CategorySlug={CategorySlug}\n        TagSlug={TagSlug ? TagSlug : null}\n        CategoryFilter={CategoryFilter}\n        TagFilter={TagFilter ? TagFilter : 'all'}\n        AllCategories={AllCategories}\n      />\n    ) : (\n      // If it isn't, revert to 'all'\n      <QuestionCards\n        CategorySlug={CategorySlug}\n        TagSlug={TagSlug ? TagSlug : null}\n        CategoryFilter=\"all\"\n        TagFilter={TagFilter}\n        AllCategories={AllCategories}\n      />\n    )}\n  </MasonrySection>\n);\n\nexport default QuestionListings;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SplitSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n`;\n\nSplitSectionStyle.Inner = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: center;\n  position: relative;\n\n  .block {\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n\n      /* Add left padding to first block if it's a text\n      block depending on it's flex property: */\n      ${props =>\n        props.Flex\n          ? null\n          : 'padding-left: calc(' +\n            Root.Grid.Gutter.Left +\n            ' + ' +\n            Root.Size +\n            ')'};\n    }\n\n    &:last-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n    }\n\n    .block-content {\n      max-width: calc(${Root.Site.Width} / 3);\n      width: 100%;\n    }\n\n    .block-img-wrap {\n      width: 100%;\n      padding-bottom: 80%;\n      overflow: hidden;\n      position: relative;\n\n      .block-img {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`;\n\nexport default SplitSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitSection Component:\n// This is a basic component for sections with.\n// fullwidth 50% areas compensating for the\n// left gutter sidebar.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SplitSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSection = ({ children, Flex }) => (\n  <SplitSectionStyle>\n    <SplitSectionStyle.Inner Flex={Flex}>{children}</SplitSectionStyle.Inner>\n  </SplitSectionStyle>\n);\n\nexport default SplitSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.4;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.09;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionFooter Component:\n// The QuestionFooter component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\nimport SimpleSection from 'components/library/Section/SimpleSection';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport Block from 'components/library/Block';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\nimport QuestionListings from 'components/library/QuestionListings';\nimport SlideSection from 'components/library/Section/SlideSection';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport QuestionFooterStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Create our Categories array.\nconst BrowseCategories = () => {\n  // Helper function to dissect the data into a usable map\n  function categoryWidgets(data) {\n    let widgetArray = data.map((category, index) => {\n      return {\n        Flex: 1,\n        WidgetContent: [\n          {\n            Destination: '/learn/' + category.node.Slug,\n            Style: 'Generic',\n            Meta: {\n              Generic: {\n                BgColor: category.node.PageTheme.Color.Background,\n                BgImage: '',\n                Subhead: '',\n                Headline: category.node.Name,\n                TextColor: category.node.PageTheme.Color.Primary,\n                IconColor: category.node.PageTheme.Color.Primary,\n                IconName: category.node.Icon, // FontAwesome Icon Name\n                TintColor: '',\n                TintOpacity: '',\n                IconSize: '',\n              },\n            },\n          },\n        ],\n      };\n    });\n\n    // Define our 'View All Widget'\n    let viewAll = {\n      Flex: 1,\n      WidgetContent: [\n        {\n          Destination: '/learn/all',\n          Style: 'Generic',\n          Meta: {\n            Generic: {\n              BgColor: Theme.Color.Nightsky,\n              BgImage: '',\n              Subhead: '',\n              Headline: 'All Categories',\n              TextColor: Theme.Color.White,\n              IconColor: Theme.Color.White,\n              IconName: 'question', // FontAwesome Icon Name\n              TintColor: '',\n              TintOpacity: '',\n              IconSize: '',\n            },\n          },\n        },\n      ],\n    };\n\n    // Add our 'View All Widget' to the beginning of the array with unshift().\n    widgetArray.unshift(viewAll);\n\n    // Return our new array.\n    return widgetArray;\n  }\n\n  // Return Slider with Categories\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          allQuestionCategoriesJson {\n            edges {\n              node {\n                id\n                Name\n                Icon\n                Headline\n                Slug\n                Tags {\n                  Name\n                  Icon\n                  Slug\n                }\n                Breadcrumb {\n                  Destination\n                  Label\n                }\n                PageTheme {\n                  Color {\n                    Background\n                    Primary\n                    Secondary\n                    Tertiary\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <SlideSection\n          Widgets={categoryWidgets(data.allQuestionCategoriesJson.edges)}\n          SectionSize={6}\n          Header=\"Browse Categories\"\n          Gutter={[0, 1, 1, 1]}\n          Theme={{\n            TextColor: Theme.Color.Slate,\n            BgColor: 'none',\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: false,\n            arrows: true,\n          }}\n        />\n      )}\n    />\n  );\n};\n\n// Return our footer.\nconst QuestionFooter = ({ CategoryFilter, TagFilter, HideCategories }) => (\n  <>\n    {/* ///////////// */}\n\n    <SimpleSection\n      BgColor={Theme.Color.White}\n      TextColor={Theme.Color.Nightsky}\n      Style=\"centered\"\n    >\n      <Block Style=\"centered\" Padding={[1, 0, 0, 0]} maxWidth={0.5}>\n        <h2>Not seeing your question?</h2>\n        <p className=\"p-md\">\n          Chat with an expert now or sumbit your own question\n        </p>\n        <Btn\n          IconClass=\"intercom\"\n          Label=\"Ask a question\"\n          BgColor={Theme.Color.Primary}\n          TextColor={Theme.Color.White}\n          Destination=\"/learn/all\"\n          IconPosition=\"left\"\n        />\n      </Block>\n    </SimpleSection>\n\n    {/* ///////////// */}\n\n    {HideCategories ? null : <BrowseCategories />}\n\n    {/* ///////////// */}\n\n    {/* ///////////// */}\n\n    <QuestionListings TagFilter={TagFilter} CategoryFilter={CategoryFilter} />\n\n    {/* ///////////// */}\n  </>\n);\n\nexport default QuestionFooter;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Simple Hero component:\n// slice_type: hero\n// example: https://www.dropbox.com/s/vp50dnga8ix2n8t/Screenshot%202019-05-07%2018.37.41.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleHeroStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleHero Component\nconst CastleHero = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleHeroStyle>\n      <SimpleHero\n        Padding={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        Background={primaryData.background_color}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1 itemProp=\"name\">\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n\n          {/* Check if Social Sharing is enabled */}\n          {primaryData.social_sharing.toLowerCase() == 'yes' ? (\n            <SocialStrip\n              Margin={[0.35, 0, 0, 0]}\n              Location={location}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n        </Block>\n      </SimpleHero>\n    </CastleHeroStyle>\n  );\n};\n\nexport default CastleHero;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .block {\n    .block-content {\n      width: 100% !important;\n      align-items: stretch;\n    }\n  }\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Full Split Section component:\n// slice_type: full_split_section\n// example: https://www.dropbox.com/s/3s19gold67oyspe/Screenshot%202019-05-08%2017.00.10.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SplitSection from 'components/library/Section/SplitSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleFullSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleFullSplitSectionStyle>\n      <SplitSection\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Padding={[1, 1, 1, 2]}\n          Width={0.5}\n          BgColor={primaryData.background_color}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n      </SplitSection>\n    </CastleFullSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsFullSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsFullSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .cta-wrap {\n    display: flex;\n    .btn {\n      margin-right: calc(${Root.Size} / 4);\n    }\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSimpleSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSimpleSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        BgMatch=\"placeholder_bg_4.jpg\"\n        BgTint={primaryData.tint_opacity}\n        BgAlt=\"Our Awesome Alt Tag\"\n        TextColor={primaryData.text_color}\n        Style={primaryData.text_alignment}\n      >\n        <Block\n          Style=\"centered\"\n          Padding={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          maxWidth={0.5}\n        >\n          {/* Check for Headline */}\n          <h2>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h2>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-md\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          <div className=\"cta-wrap\">\n            {repeatableData[0].cta_destination != null\n              ? repeatableData.map((item, index) => {\n                  return (\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  );\n                })\n              : null}\n          </div>\n        </Block>\n      </SimpleSection>\n    </CastleSimpleSectionStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSimpleSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSimpleSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Gutter={[1, 0, 1, 1]}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n\n        <Block\n          Padding={[3, 1, 3, 1]}\n          Width={0.5}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n      </SimpleSection>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitImageHero component:\n// slice_type: split_image_hero\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport Bread from 'components/library/Breadcrumb/';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleHero\n        imgLeft={primaryData.direction == 'normal' ? null : '0'}\n        imgRight={primaryData.direction == 'normal' ? '0' : null}\n        imgBottom=\"0\"\n        imgWidth=\"50%\"\n        Size={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        className=\"simple-hero\"\n        Background={primaryData.background_color}\n        JustifyContent={primaryData.direction == 'normal' ? null : 'flex-end'}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={0.5}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <Btn\n                    Label={item.cta_label}\n                    BgColor={item.cta_bg_color}\n                    TextColor={item.cta_text_color}\n                    Destination={item.cta_destination}\n                    IconPosition={item.cta_icon ? 'left' : null}\n                    IconClass={item.cta_icon ? item.cta_icon : null}\n                    IconFas\n                  />\n                );\n              })\n            : null}\n        </Block>\n        <Block className=\"hero-img\">\n          <ImgMatch src=\"hero-phone.png\" alt=\"100% Free Delivery\" />\n        </Block>\n      </SimpleHero>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitImageHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitImageHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// PromotionalStrip component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport HeroStrip from 'components/library/HeroStrip';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleSplitSectionStyle>\n      <HeroStrip\n        BgColor={\n          primaryData.bg_color ? primaryData.bg_color : Theme.Color.White\n        }\n        TextColor={\n          primaryData.text_color ? primaryData.text_color : Theme.Color.Nightsky\n        }\n        Items={promotionalItemsTransformer(repeatableData)}\n      />\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsPromotionalStripData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsPromotionalStripData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyGallery component:\n// slice_type: sticky_gallery\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport StickyScrollSection from 'components/library/Section/StickyScrollSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleStickyGalleryStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our GalleryQueries map.\n  const galleryImgQueriesTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let queries = data.map((Query, index) => {\n        return {\n          Fluid: Query.src.localFile.childImageSharp.fluid\n            ? Query.src.localFile.childImageSharp.fluid\n            : false,\n          Alt: Query.src.alt,\n        };\n      });\n\n      // Return new map.\n      return queries;\n    } else {\n      // Else, return 0.\n      return 0;\n    }\n  };\n\n  return (\n    <CastleStickyGalleryStyle>\n      <StickyScrollSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Content={{\n          Subheadline: primaryData.subheadline,\n          Headline: primaryData.headline.text,\n          Body: primaryData.body_text,\n        }}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n        GalleryQueries={galleryImgQueriesTransformer(repeatableData)}\n        Button={{\n          Label: primaryData.cta_label,\n          BgColor: primaryData.cta_bg_color,\n          TextColor: primaryData.cta_text_color,\n          Destination: primaryData.cta_destination,\n          IconClass: primaryData.cta_icon,\n        }}\n      />\n    </CastleStickyGalleryStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsStickyGalleryData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsStickyGalleryData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// CastleWidgetRow component:\n// slice_type: widget_row\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SlideSection from 'components/library/Section/SlideSection';\n\n// Style Overrides\nimport CastleWidgetRowStyle from './styles.scss';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleWidgetRow Component\nconst CastleWidgetRow = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const widgetContentTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: item.widget_destination,\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: item.widget_bg_color,\n                  BgQuery: item.widget_background_image.localFile\n                    ? item.widget_background_image.localFile.childImageSharp\n                        .fluid\n                    : false,\n                  Subhead: item.widget_subheadline,\n                  Headline: item.widget_headline.text,\n                  TextColor: item.widget_text_color,\n                  IconColor: item.widget_text_color,\n                  IconName: item.widget_icon_class, // FontAwesome Icon Name\n                  TintColor: item.widget_tint_color\n                    ? item.widget_tint_color\n                    : Theme.Color.Black,\n                  TintOpacity: item.widget_tint_opacity,\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleWidgetRowStyle>\n      <Block maxWidth=\"100%\">\n        <SlideSection\n          Widgets={widgetContentTransformer(repeatableData)}\n          SectionSize={primaryData.section_size}\n          Header={\n            primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Keep Browsing'\n          }\n          Gutter={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          Theme={{\n            TextColor: primaryData.text_color,\n            BgColor: primaryData.bg_color,\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: primaryData.autoplay == 'On' ? true : false,\n            arrows: true,\n          }}\n        />\n      </Block>\n    </CastleWidgetRowStyle>\n  );\n};\n\nexport default CastleWidgetRow;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsWidgetRowData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsWidgetRowData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// ::::::::      :::      ::::::::  ::::::::::: :::        ::::::::::\n// :+:    :+:   :+: :+:   :+:    :+:     :+:     :+:        :+:\n// +:+         +:+   +:+  +:+            +:+     +:+        +:+\n// +#+        +#++:++#++: +#++:++#++     +#+     +#+        +#++:++#\n// +#+        +#+     +#+        +#+     +#+     +#+        +#+\n// #+#    #+# #+#     #+# #+#    #+#     #+#     #+#        #+#\n//  ########  ###     ###  ########      ###     ########## ##########\n//\n// Castle.js // By Peter Laxalt // www.laxaltandmciver.co\n// This is the page builder for Elements.\n// Future regex for matching {{ variables }} https://regex101.com/r/xgOodL/1\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Styles\nimport CastleStyle from './styles.scss';\n\n// Components\nimport CastleHero from './components/CastleHero';\nimport CastleFullSplitSection from './components/CastleFullSplitSection';\nimport CastleSimpleSection from './components/CastleSimpleSection';\nimport CastleSplitSection from './components/CastleSplitSection';\nimport CastleSplitImageHero from './components/CastleSplitImageHero';\nimport CastlePromotionalStrip from './components/CastlePromotionalStrip';\nimport CastleStickyGallery from './components/CastleStickyGallery';\nimport CastleWidgetRow from './components/CastleWidgetRow';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Castle\nclass CastleBuilder extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  // Render\n  render() {\n    const bricks = this.props.Bricks;\n    const location = this.props.Location;\n\n    return (\n      <>\n        {bricks.map((brick, index) => {\n          switch (brick.slice_type) {\n            case 'hero':\n              return (\n                <CastleHero data={brick} location={location} key={index} />\n              );\n            case 'full_split_section':\n              return (\n                <CastleFullSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_section':\n              return (\n                <CastleSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_image_hero':\n              return (\n                <CastleSplitImageHero\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'promotional_strip':\n              return (\n                <CastlePromotionalStrip\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'sticky_gallery':\n              return (\n                <CastleStickyGallery\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'simple_section':\n              return (\n                <CastleSimpleSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'widget_row':\n              return (\n                <CastleWidgetRow data={brick} location={location} key={index} />\n              );\n          }\n        })}\n      </>\n    );\n  }\n}\n\nconst Castle = ({ Bricks, Location }) => (\n  <CastleStyle>\n    <CastleBuilder Bricks={Bricks} Location={Location} />\n  </CastleStyle>\n);\n\nexport default Castle;\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.6;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.15;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// HeroStrip Component:\n// The HeroStrip component, typically used in Hero components.\n// Example: https://www.dropbox.com/s/fkq5n663abznqpt/Screenshot%202019-04-19%2018.20.13.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\n\n// Styles\nimport HeroStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst HeroStrip = ({ Items, BgColor, TextColor }) => (\n  <HeroStripStyle BgColor={BgColor} TextColor={TextColor}>\n    <HeroStripStyle.Inner TextColor={TextColor}>\n      {Items.map((Item, index) => {\n        if (Item.Destination) {\n          return (\n            <div key={index} className=\"hero-strip-item focus\">\n              <Link to={Item.Destination}>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </Link>\n            </div>\n          );\n        } else {\n          return (\n            <div key={index} className=\"hero-strip-item\">\n              <div>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </div>\n            </div>\n          );\n        }\n      })}\n    </HeroStripStyle.Inner>\n  </HeroStripStyle>\n);\n\nexport default HeroStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Convert #HEXCODES to RGBA\n// hexToRGB('#FF0000', 0.5);\n\nconst hexToRGB = (hex, alpha) => {\n  var r = parseInt(hex.slice(1, 3), 16),\n    g = parseInt(hex.slice(3, 5), 16),\n    b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha) {\n    return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')';\n  } else {\n    return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n  }\n};\n\nexport default hexToRGB;\n","// StickyScrollSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst StickyScrollSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nStickyScrollSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n  }\n`;\n\nStickyScrollSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n\n  .block {\n    .gallery-img {\n      padding: 0 0 calc(${Root.Size} / 2) 0;\n\n      &:last-child {\n        padding: 0;\n      }\n    }\n\n    &.sticky-block {\n      .block-content {\n        position: sticky;\n        top: calc(${Root.Nav.Size});\n        padding-bottom: ${Root.Size};\n        height: calc(100vh - ${Root.Nav.Size});\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n    }\n  }\n\n  .txt-caption {\n    font-size: 1.4rem;\n    font-weight: bold;\n    color: ${Theme.Color.Slate};\n    display: block;\n    margin-bottom: calc(${Theme.Base.Size.Sm});\n  }\n`;\n\nexport default StickyScrollSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyScrollSection Component:\n// Desired outcome: https://www.dropbox.com/s/brll80qg306ywmk/Screenshot%202019-05-06%2015.01.12.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\nimport Block from 'components/library/Block';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport StickyScrollSectionStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// Render Element\nconst StickyScrollSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  Content,\n  Gallery,\n  GalleryQueries,\n  Gutter,\n  Flex,\n  Button,\n}) => (\n  <StickyScrollSectionStyle\n    Style={Style}\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <ReleaseOverflow />\n    <StickyScrollSectionStyle.Inner Gutter={Gutter}>\n      <StickyScrollSectionStyle.Content Flex={Flex} className=\"sticky-section\">\n        <Block Padding={[0, 1, 0, 1]} className=\"sticky-block\">\n          <span className=\"txt-caption\">{Content.Subheadline}</span>\n          <h2>{Content.Headline}</h2>\n          <p className=\"p-md\">{Content.Body}</p>\n\n          {/* Check if a Btn exists, display if so. */}\n          {Button ? (\n            <Btn\n              Label={Button.Label}\n              BgColor={Button.BgColor}\n              TextColor={Button.TextColor}\n              Destination={Button.Destination}\n              IconPosition=\"left\"\n              IconClass={Button.IconClass ? Button.IconClass : null}\n              IconFas\n            />\n          ) : null}\n        </Block>\n        <Block Padding={[0, 1, 0, 1]}>\n          {Gallery\n            ? Gallery.map((Img, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgMatch src={Img.Src} AltText={Img.Alt} />\n                  </div>\n                );\n              })\n            : null}\n          {GalleryQueries\n            ? GalleryQueries.map((query, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgQuery src={query.Fluid} AltText={query.Alt} />\n                  </div>\n                );\n              })\n            : null}\n        </Block>\n      </StickyScrollSectionStyle.Content>\n    </StickyScrollSectionStyle.Inner>\n  </StickyScrollSectionStyle>\n);\n\nexport default StickyScrollSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SimpleListStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SimpleListStyle = styled.div`\n  display: flex;\n`;\n\nSimpleListStyle.List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n`;\n\nSimpleListStyle.Item = styled.li`\n  display: block;\n  position: relative;\n  text-transform: capitalize;\n  margin-bottom: calc(${Root.Size} / 2);\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  span {\n    display: block;\n    &:first-child {\n      opacity: 0.6;\n      font-size: 1.2rem;\n      padding-bottom: calc(${Theme.Base.Size.Sm} / 2);\n    }\n    &:last-child {\n      font-weight: bold;\n      font-size: 1.5rem;\n    }\n  }\n`;\n\nexport default SimpleListStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SimpleListStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleList = ({ List, TextColor }) => (\n  <SimpleListStyle className=\"simple-list\" TextColor={TextColor}>\n    <SimpleListStyle.List TextColor={TextColor}>\n      {List.map((item, index) => {\n        return (\n          <SimpleListStyle.Item key={index}>\n            <span>{item.Label}</span>\n            <span>{item.Data}</span>\n          </SimpleListStyle.Item>\n        );\n      })}\n    </SimpleListStyle.List>\n  </SimpleListStyle>\n);\n\nexport default SimpleList;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <AwardBadgeStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const AwardBadgeStyle = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: calc(${Root.Size} * 3);\n  height: calc(${Root.Size} * 3);\n  background: ${Theme.Color.Primary};\n  color: ${Theme.Color.White};\n  border-radius: 50%;\n  box-shadow: 0 0px 8px 0 rgba(6, 10, 92, 0.12);\n  position: relative;\n  text-align: center;\n  padding: ${Theme.Base.Size.Sm};\n\n  .img {\n    width: 50%;\n  }\n\n  span {\n    margin-top: calc(${Theme.Base.Size.Sm} * 0.75);\n    padding-top: calc(${Theme.Base.Size.Sm} * 0.75);\n    text-align: center;\n    width: 100%;\n    position: relative;\n    font-weight: bold;\n    font-size: 0.9rem;\n    line-height: 1.3;\n\n    &:before {\n      content: '';\n      position: absolute;\n      left: 50%;\n      top: 0;\n      transform: translateX(-50%);\n      height: 1px;\n      width: ${Theme.Base.Size.Md};\n      background: ${Theme.Color.White};\n    }\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 3%;\n    right: 3%;\n    top: 3%;\n    bottom: 3%;\n    border: 1px solid ${Theme.Color.White};\n    border-radius: 50%;\n  }\n`;\n\nexport default AwardBadgeStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Styles\nimport AwardBadgeStyle from './styles.scss';\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst AwardHours = ({ Text, TextColor, BgColor }) => (\n  <AwardBadgeStyle TextColor={TextColor} BgColor={BgColor}>\n    <ImgMatch src=\"logos/leafly.png\" AltText=\"Leafly\" />\n    <span>{Text}</span>\n  </AwardBadgeStyle>\n);\n\nexport default AwardHours;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <AwardHoursStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const AwardHoursStyle = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: stretch;\n  flex: 1;\n\n  .simple-list {\n    padding-left: calc(${Root.Size} / 2);\n    margin-left: calc(${Root.Size} / 2);\n    border-left: 1px solid\n      ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    display: flex;\n    align-items: center;\n    ul {\n      justify-content: center;\n    }\n  }\n`;\n\nAwardHoursStyle.List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n`;\n\nAwardHoursStyle.Item = styled.li`\n  display: block;\n  position: relative;\n  text-transform: capitalize;\n  margin-bottom: calc(${Root.Size} / 2);\n\n  span {\n    display: block;\n    &:first-child {\n      opacity: 0.6;\n      font-size: 1.2rem;\n      padding-bottom: calc(${Theme.Base.Size.Sm} / 2);\n    }\n    &:last-child {\n      font-weight: bold;\n      font-size: 1.5rem;\n    }\n  }\n`;\n\nexport default AwardHoursStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport AwardBadge from 'components/library/AwardBadge';\nimport SimpleList from 'components/library/SimpleList';\n\n// Styles\nimport AwardHoursStyle from './styles.scss';\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst AwardHours = ({ Hours, TextColor }) => (\n  <AwardHoursStyle TextColor={TextColor}>\n    <AwardBadge\n      Logo=\"leafly\"\n      Text=\"2018 Voted Best Boutique Dispensary\"\n      BgColor={Theme.Color.Primary}\n      TextColor={Theme.Color.White}\n    />\n    <SimpleList TextColor={TextColor} List={Hours} />\n  </AwardHoursStyle>\n);\n\nexport default AwardHours;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SuggestionListStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Helpers\nimport hexToRGB from 'helpers/hexToRGB';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SuggestionListStyle = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: 100%;\n  overflow: hidden;\n  position: relative;\n\n  &:before {\n    content: '';\n    position: absolute;\n    pointer-events: none;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    width: calc(${Root.Size} / 2);\n    z-index: 3;\n    background-image: ${props =>\n      props.GradientColor\n        ? 'linear-gradient(-90deg, ' +\n          hexToRGB(props.GradientColor, 1) +\n          ',' +\n          hexToRGB(props.GradientColor, 0.000001) +\n          ')'\n        : 'pink'};\n\n    /* hexToRGB(props.GradientColor, 1) */\n\n    /* background-image: linear-gradient(\n      -90deg,\n      rgba(25d5,255,0, 1) 20%,\n      rgba(25d5,255,0, 0) 100%\n    ); */\n  }\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n\n  ul {\n    display: block;\n    width: 100%;\n    max-width: 100%;\n    word-wrap: none;\n    white-space: nowrap;\n    overflow-x: auto;\n    padding: calc(${Root.Size} / 4) 0;\n\n    li {\n      display: inline-block;\n      margin-right: calc(${Root.Size} / 4);\n      font-size: 0.8rem;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n\n      &:first-child {\n        opacity: 0.3;\n      }\n\n      .btn {\n        position: relative;\n        left: 0;\n        .btn-inner {\n          height: calc(${Root.Button.Size} * 0.7);\n          font-size: 0.8rem;\n          text-transform: uppercase;\n          letter-spacing: 1px;\n          font-weight: normal;\n          padding: 0 calc(${Root.Size} / 4);\n        }\n      }\n    }\n  }\n`;\n\nexport default SuggestionListStyle;\n//////////////////////////////////////////////////////////////////////\n","// SuggestionList Component:\n// This is for listing out suggestions with an optional label in the front.\n// Reference: https://www.dropbox.com/s/qvn6rohf52unkpv/Screenshot%202019-05-02%2017.19.11.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Styles\nimport SuggestionListStyle from './styles.scss';\n\n// Components\nimport Btn from 'components/library/Btn/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Our nearby locations component\nconst SuggestionList = ({\n  List,\n  Label,\n  BaseUrl,\n  TextColor,\n  GradientColor,\n  Padding,\n  Affix,\n}) => (\n  <SuggestionListStyle\n    className=\"suggestion-list\"\n    GradientColor={GradientColor}\n    Padding={Padding}\n  >\n    <ul>\n      {Label ? <li>{Label}</li> : null}\n      {List.map((item, index) => (\n        <li key={index}>\n          <Btn\n            BgColor=\"none\"\n            Label={item.nearby_name}\n            Destination={\n              Affix ? BaseUrl + item.nearby_slug + Affix : BaseUrl + item.nearby_slug\n            }\n            TextColor={TextColor}\n          />\n        </li>\n      ))}\n    </ul>\n  </SuggestionListStyle>\n);\n\nexport default SuggestionList;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Transformer:\n// This is for taking Prismic location.data and transforming it into something that\n// this component would like to handle. The Transformer is typically used\n// in /template/ pages where a GraphQL query from Prismic (or any location.data) source\n// is involved.\n//////////////////////////////////////////////////////////////////////\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Function to create our Columns Map\nexport const locationLandingTransformer = location => {\n  if (location) {\n    let locationMap = {\n      edges: {\n        node: {\n          id: location.id,\n          slug: location.uid,\n          name: location.data.name.text,\n          geography: {\n            city: location.data.geo_city,\n            state: location.data.geo_state,\n            country: location.data.geo_country,\n          },\n          status: {\n            delivery: location.data.status_delivery,\n            store: location.data.status_store,\n          },\n          meta: {\n            reserveSpot: location.data.meta_reserve_spot_link,\n            menu: location.data.meta_menu,\n            maps: location.data.meta_google_maps_url,\n          },\n          contactDetails: {\n            phone: location.data,\n            location: {\n              address: location.data.geo_location_address,\n              state: location.data.geo_location_state,\n            },\n            hours: location.data.hours,\n          },\n          nearby: location.data.nearby_locations,\n          about: {\n            headline: location.data.about_headline.text,\n            PageTheme: {\n              Color: {\n                Background: location.data.color_background,\n                Primary: location.data.color_primary,\n                Secondary: location.data.color_secondary,\n                Tertiary: location.data.color_tertiary,\n              },\n            },\n            summary: {\n              headline: location.data.about_headline.text,\n              body: 'Lorem ipsum solor sit dit imet',\n              gallery: [\n                {\n                  Src: 'placeholder_bg_5.png',\n                  Alt: 'Where humans come first.',\n                },\n                {\n                  Src: 'placeholder_bg_5.png',\n                  Alt: 'Where humans come first.',\n                },\n              ],\n            },\n          },\n        },\n      },\n    };\n\n    return locationMap;\n  } else {\n    return 'null';\n  }\n};\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n"],"sourceRoot":""}