{"version":3,"sources":["webpack:///./src/components/library/SpecialsListings/styles.scss.js","webpack:///./src/components/library/SpecialsListings/index.js","webpack:///./src/components/library/PageTabs/styles.scss.js","webpack:///./src/components/library/PageTabs/index.js","webpack:///./src/templates/Location/Components/LocationPageWrapper/index.js","webpack:///./src/templates/Location/Landing/layout.js","webpack:///./src/templates/Location/Landing/index.js","webpack:///./src/components/library/Block/styles.scss.js","webpack:///./src/components/library/Block/index.js","webpack:///./src/components/library/Section/SlideSection/styles.scss.js","webpack:///./src/components/library/Section/SlideSection/index.js","webpack:///./src/components/core/WrapperControl/index.js","webpack:///./src/components/library/Section/SimpleSection/styles.scss.js","webpack:///./src/components/library/Section/SimpleSection/index.js","webpack:///./src/components/library/Hero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/index.js","webpack:///./src/components/library/Breadcrumb/styles.scss.js","webpack:///./src/components/library/Breadcrumb/index.js","webpack:///./src/components/library/Hero/index.js","webpack:///./src/components/library/Widgets/Sidebar/Default/styles.scss.js","webpack:///./src/components/library/Widgets/Sidebar/Default/index.js","webpack:///./src/components/Library/Sidebar/styles.scss.js","webpack:///./src/components/Library/Sidebar/index.js","webpack:///./src/templates/SubLevelPage/styles.scss.js","webpack:///./src/templates/SubLevelPage/index.js","webpack:///./src/components/library/Section/WidgetSection/styles.scss.js","webpack:///./src/components/library/Section/WidgetSection/index.js","webpack:///./src/components/library/Section/MasonrySection/styles.scss.js","webpack:///./src/components/library/Section/MasonrySection/index.js","webpack:///./src/components/library/Section/index.js","webpack:///./src/components/library/SocialStrip/styles.scss.js","webpack:///./src/components/library/SocialStrip/index.js","webpack:///./src/components/library/QuestionListings/styles.scss.js","webpack:///./src/components/library/QuestionListings/index.js","webpack:///./src/components/library/Section/SplitSection/styles.scss.js","webpack:///./src/components/library/Section/SplitSection/index.js","webpack:///./src/components/library/QuestionFooter/styles.scss.js","webpack:///./src/components/library/QuestionFooter/index.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/components/library/Castle/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/index.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/index.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/styles.scss.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/index.js","webpack:///./src/components/library/Section/StickyScrollSection/styles.scss.js","webpack:///./src/components/library/Section/StickyScrollSection/index.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/index.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/index.js","webpack:///./src/components/library/Castle/index.js","webpack:///./src/components/library/HeroStrip/styles.scss.js","webpack:///./src/components/library/HeroStrip/index.js","webpack:///./src/helpers/hexToRGB.js","webpack:///./src/components/library/SimpleList/styles.scss.js","webpack:///./src/components/library/SimpleList/index.js","webpack:///./src/components/library/AwardBadge/styles.scss.js","webpack:///./src/components/library/AwardBadge/index.js","webpack:///./src/components/library/AwardHours/styles.scss.js","webpack:///./src/components/library/AwardHours/index.js","webpack:///./src/components/library/SuggestionList/styles.scss.js","webpack:///./src/components/library/SuggestionList/index.js","webpack:///./src/templates/Location/Transformer/index.js"],"names":["HeroStripStyle","styled","div","_templateObject","Root","Size","Grid","Gutter","Left","props","BgColor","Theme","Color","White","TextColor","Black","Inner","SectionContentStyle","_templateObject2","ViewWidthFontSize","Primary","SpecialCards","_ref","CategoryFilter","TagFilter","CategorySlug","AllCategories","TagSlug","react_default","a","createElement","gatsby_browser_entry","query","render","data","allPrismicSpecial","edges","map","Special","index","node","title","text","_653253835","SpecialListings","_ref2","MasonrySection","Columns","ColumnGap","Nightsky","SpecialsListings_SpecialCards","PageTabsStyle","styles_scss_templateObject","GradientColor","hexToRGB","Padding","Button","PageTabs","List","Location","Label","BaseUrl","Affix","PageTabs_styles_scss","className","item","destination","currentLocation","DestinationPath","slug","LocationPathWithSlash","pathname","key","Btn","AddClass","slice","name","Destination","LocationPageWrapper","children","SpecialsPage","Headline","LocationData","LocationTheme","about","PageTheme","Layout","Background","PrimaryColor","SecondaryColor","Secondary","TertiaryColor","Tertiary","SubLevelPage","SimpleHero","Flex","Block","maxWidth","geography","city","headline","IconClass","state","toLowerCase","IconPosition","IconFas","contactDetails","location","address","meta","maps","External","AwardHours","Hours","hours","time","days","Data","start_time","library_PageTabs","Tint","TintBorder","SuggestionList","nearby","TemplateLayout","elements","SummaryHeadlineString","summary","Components_LocationPageWrapper","SpecialsListings","Castle","Bricks","href","LocationLandingTemplate","layout_TemplateLayout","__webpack_require__","d","__webpack_exports__","LocationLandingPage","layout","locationLandingTransformer","allPrismicLocation","pageContext","Specials","BlockStyle","flex","AlignItems","Style","css","JustifyContent","BgTint","Width","Base","SiteWidth","BgMatch","BgQuery","BgAlt","styles_scss","ImgMatch","src","AltText","ImgQuery","SlideSectionStyle","Sm","SectionInnerStyle","Content","_templateObject3","SectionSize","Media","Md","SectionHeader","_templateObject4","_templateObject5","Transition","Duration","CssEase","CallToAction","_templateObject6","NextArrow","style","onClick","Object","assign","onKeyPress","role","tabIndex","Icons","Name","PrevArrow","SectionSlider","_React$Component","call","this","_settings","_this","slidesToShow","ArrowColor","SliderSettings","slidesToScroll","autoplay","arrows","settings","dots","speed","autoplaySpeed","infinite","draggable","nextArrow","prevArrow","responsive","breakpoint","Fragment","Helmet","rel","type","lib_default","ref","h","slider","React","Component","SlideSection","Widgets","Header","Icon","ViewAll","SlideSection_styles_scss","IconclassName","SlideSection_SectionSlider","TextColr","Widget","Container","WidgetContent","WrapperLock","createGlobalStyle","WrapperRelease","SimpleSectionStyle","Right","FluidHeight","SimpleSection","SimpleSection_styles_scss","HeroInnerStyle","imgRight","imgLeft","imgTop","imgBottom","imgWidth","HeroContentStyle","FullWidth","SimpleHeroStyle","Nav","Hero","BreadCrumb","Link","Bread","Crumbs","crumb","to","HeroInner","HeroContent","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styles_scss__WEBPACK_IMPORTED_MODULE_2__","SidebarWidgetStyle","FadeIn","Radius","BgImage","TintColor","TintOpacity","Subhead","i","SidebarWidget","IconName","IconColor","SidebarStyle","styles_scss_templateObject2","Sidebar","Sidebar_styles_scss","Default","SubLevelPageStyle","SubLevelPage_styles_scss_templateObject","SubLevelPage_styles_scss_templateObject2","styles_scss_templateObject3","SubLevelPage_SubLevelPage","SubLevelPage_SubLevelPageContent","SubLevelPage_styles_scss","WrapperControl","Library_Sidebar","SubLevelPageContent","ItemProp","itemProp","WidgetSection","Slider","WidgetSection_styles_scss","MasonrySectionStyle","PaddingY","MasonrySection_styles_scss","SocialStripStyle","Margin","span","SocialStrip","target","QuestionCards","QuestionSlugString","categoryMatch","categoryData","categoryFilter","matchedCategory","filter","category","allQuestionsJson","Question","filteredCategory","allQuestionCategoriesJson","BgImageFile","coverImage","BgImageAltText","tags","includes","Slug","_234893462","QuestionListings","QuestionListings_QuestionCards","SplitSectionStyle","Site","SplitSection","SplitSection_styles_scss","BrowseCategories","categoryWidgets","widgetArray","Meta","Generic","IconSize","viewAll","unshift","Slate","_4273665236","QuestionFooter","HideCategories","QuestionFooter_BrowseCategories","dP","f","FProto","Function","prototype","nameRE","configurable","get","match","e","CastleStyle","CastleHeroStyle","CastleHero","primaryData","primary","repeatableData","items","CastleHero_styles_scss","padding","replace","split","background_color","background_image","localFile","childImageSharp","fluid","text_color","tint_opacity","breadcrumb_url","Breadcrumb","breadcrumb_label","body_text","cta_destination","cta_label","cta_bg_color","cta_text_color","cta_icon","social_sharing","CastleFullSplitSection_styles_scss_templateObject","CastleSplitSection","CastleFullSplitSection_styles_scss","direction","image","alt","CastleSimpleSectionStyle","CastleSimpleSection_styles_scss_templateObject","CastleSimpleSection","CastleSimpleSection_styles_scss","text_alignment","CastleSplitSection_styles_scss_templateObject","CastleSplitSection_styles_scss","CastleSplitImageHero_styles_scss_templateObject","CastleSplitImageHero_styles_scss","CastlePromotionalStrip_styles_scss_templateObject","length","CastlePromotionalStrip_styles_scss","HeroStrip","bg_color","Items","Caption","caption","label","promotionalItemsTransformer","StickyScrollSectionStyle","StickyScrollSection_styles_scss_templateObject","ReleaseOverflow","StickyScrollSection_templateObject","StickyScrollSection","Gallery","GalleryQueries","StickyScrollSection_styles_scss","Subheadline","Body","Img","Src","Alt","Fluid","CastleStickyGallery_styles_scss_templateObject","CastleStickyGallery_styles_scss","Section_StickyScrollSection","subheadline","Query","galleryImgQueriesTransformer","CastleWidgetRow_styles_scss_templateObject","CastleWidgetRow","CastleWidgetRow_styles_scss","widget_destination","widget_bg_color","widget_background_image","widget_subheadline","widget_headline","widget_text_color","widget_icon_class","widget_tint_color","widget_tint_opacity","widgetContentTransformer","section_size","CastleBuilder","bricks","brick","slice_type","components_CastleHero","CastleFullSplitSection","components_CastleSplitSection","CastleSplitImageHero","CastlePromotionalStrip","CastleStickyGallery","components_CastleSimpleSection","components_CastleWidgetRow","Castle_CastleBuilder","HeroStrip_styles_scss","Item","hex","alpha","r","parseInt","g","b","SimpleListStyle","ul","li","SimpleList","AwardBadgeStyle","Text","AwardHoursStyle","AwardHours_styles_scss","AwardBadge","Logo","SuggestionListStyle","nearby_name","nearby_slug","id","uid","geo_city","geo_state","country","geo_country","status","delivery","status_delivery","store","status_store","reserveSpot","meta_reserve_spot_link","menu","meta_menu","meta_google_maps_url","phone","geo_location_address","geo_location_state","nearby_locations","about_headline","color_background","color_primary","color_secondary","color_tertiary","body","gallery"],"mappings":"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","file":"component---src-templates-location-landing-index-js-36837635eebf7eaae216.js","sourcesContent":["// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.4;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.09;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionListings Component:\n// The QuestionListings component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport QuestionListingsStyle from './styles.scss';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SpecialCards = ({\n  CategoryFilter,\n  TagFilter,\n  CategorySlug,\n  AllCategories,\n  TagSlug,\n}) => {\n  return (\n    // Run the StaticQuery to get the data we need.\n    <StaticQuery\n      query={graphql`\n        query {\n          allPrismicSpecial {\n            edges {\n              node {\n                id\n                uid\n                data {\n                  title {\n                    text\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data =>\n        // Create our PageTheme variables for each Widget.\n\n        // Map the Question data we got.\n        data.allPrismicSpecial.edges.map((Special, index) => {\n          return <h1>{Special.node.data.title.text}</h1>;\n        })\n      }\n    />\n  );\n};\n\n// <DefaultWidget\n//                   BgColor={filteredCategory.PageTheme.Color.Background}\n//                   TextColor={filteredCategory.PageTheme.Color.Primary}\n//                   Destination={\n//                     '/learn' + QuestionSlugString + '/' + Question.node.slug\n//                   }\n//                   Subhead={Question.node.category}\n//                   Headline={Question.node.title}\n//                   IconName={filteredCategory.Icon}\n//                   IconColor={filteredCategory.PageTheme.Color.Primary}\n//                   BgImageFile={Question.node.coverImage}\n//                   BgImageAltText={\n//                     Question.node.category +\n//                     ' & Cannabis | ' +\n//                     Question.node.title\n//                   }\n//                   TintColor={Theme.Color.Black}\n//                   TintOpacity={0.6}\n//                   key={index}\n//                 />\n\nconst SpecialListings = ({ Gutter, BgColor }) => (\n  <MasonrySection\n    Columns={3}\n    ColumnGap={0.25}\n    BgColor={BgColor ? BgColor : Theme.Color.White}\n    TextColor={Theme.Color.Nightsky}\n    Gutter={Gutter ? Gutter : [0, 1, 2, 1]}\n  >\n    <SpecialCards />\n  </MasonrySection>\n);\n\nexport default SpecialListings;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <PageTabsStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Helpers\nimport hexToRGB from 'helpers/hexToRGB';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const PageTabsStyle = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: 100%;\n  overflow: hidden;\n  position: relative;\n\n  &:before {\n    content: '';\n    position: absolute;\n    pointer-events: none;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    width: calc(${Root.Size} / 2);\n    z-index: 3;\n    background-image: ${props =>\n      props.GradientColor\n        ? 'linear-gradient(-90deg, ' +\n          hexToRGB(props.GradientColor, 1) +\n          ',' +\n          hexToRGB(props.GradientColor, 0.000001) +\n          ')'\n        : 'pink'};\n\n    /* hexToRGB(props.GradientColor, 1) */\n\n    /* background-image: linear-gradient(\n      -90deg,\n      rgba(25d5,255,0, 1) 20%,\n      rgba(25d5,255,0, 0) 100%\n    ); */\n  }\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n\n  ul {\n    display: block;\n    width: 100%;\n    max-width: 100%;\n    word-wrap: none;\n    white-space: nowrap;\n    overflow-x: auto;\n    padding: calc(${Root.Size} / 4) 0;\n\n    li {\n      display: inline-block;\n      margin-right: calc(${Root.Size});\n      font-size: 1.5rem;\n\n      .btn {\n        position: relative;\n        left: 0;\n        .btn-inner {\n          height: calc(${Root.Button.Size} * 0.7);\n          font-size: 1.8rem;\n          font-weight: normal;\n          padding: 0;\n          box-shadow: none;\n          opacity: 0.6;\n\n          &:hover {\n            box-shadow: none;\n            opacity: 1;\n          }\n        }\n\n        &.active {\n          .btn-inner {\n            font-weight: bold;\n            opacity: 1;\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default PageTabsStyle;\n//////////////////////////////////////////////////////////////////////\n","// PageTabs Component:\n// This is for listing out suggestions with an optional label in the front.\n// Reference: https://www.dropbox.com/s/qvn6rohf52unkpv/Screenshot%202019-05-02%2017.19.11.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Styles\nimport PageTabsStyle from './styles.scss';\n\n// Components\nimport Btn from 'components/library/Btn/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Our nearby locations component\nconst PageTabs = ({\n  List,\n  Label,\n  Location,\n  BaseUrl,\n  TextColor,\n  Padding,\n  Affix,\n}) => {\n  return (\n    <PageTabsStyle className=\"page-tabs\" Padding={Padding}>\n      <ul>\n        {List.map((item, index) => {\n          // Creating slugs.\n          const DestinationPath = Affix\n            ? BaseUrl + item.slug + Affix\n            : BaseUrl + item.slug;\n          const LocationPath = Location.pathname;\n          const LocationPathWithSlash = Location.pathname + '/';\n\n          // Helper function to match our locations.\n          function matchPath(destination, currentLocation) {\n            // If location & destination match:\n            if (destination == currentLocation) {\n              let className = 'active';\n              return className;\n            } else {\n              // Check and see if our destination matches without the\n              // last `/` of the url. I.e. `locations/reno vs locations/reno/`\n              if (destination == currentLocation.slice(0, -1)) {\n                let className = 'active';\n                return className;\n              } else {\n                // Then inactive:\n                let className = 'inactive';\n                return 'inactive';\n              }\n            }\n          }\n\n          // Return PageTabs.\n          return (\n            <li key={index}>\n              <Btn\n                AddClass={matchPath(DestinationPath, LocationPathWithSlash)}\n                BgColor=\"none\"\n                Label={item.name}\n                Destination={DestinationPath}\n                TextColor={TextColor}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </PageTabsStyle>\n  );\n};\n\nexport default PageTabs;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// templates/Learn.js:\n// This is the template for Learn pages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Layout from 'components/core/Layout';\nimport { SubLevelPageContent, SubLevelPage } from 'templates/SubLevelPage';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport AwardHours from 'components/library/AwardHours';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport SimpleSection from 'components/library/Section/SimpleSection';\nimport SlideSection from 'components/library/Section/SlideSection';\nimport QuestionListings from 'components/library/QuestionListings';\n\n//// Misc. Components\nimport Bread from 'components/library/Breadcrumb';\nimport SocialStrip from 'components/library/SocialStrip';\nimport QuestionFooter from 'components/library/QuestionFooter';\nimport Btn from 'components/library/Btn/';\nimport SuggestionList from 'components/library/SuggestionList';\nimport PageTabs from 'components/library/PageTabs';\nimport SimpleList from 'components/library/SimpleList';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// LocationPageWrapper component for page theming.\nconst LocationPageWrapper = ({\n  children,\n  Headline,\n  SpecialsPage,\n  LocationData,\n  Location,\n}) => {\n  const LocationTheme = LocationData.about.PageTheme;\n\n  return (\n    <Layout\n      BgColor={LocationTheme.Color.Background}\n      PrimaryColor={LocationTheme.Color.Primary}\n      SecondaryColor={LocationTheme.Color.Secondary}\n      TertiaryColor={LocationTheme.Color.Tertiary}\n    >\n      <SubLevelPage\n        BgColor={LocationTheme.Color.Background}\n        PrimaryColor={LocationTheme.Color.Primary}\n        SecondaryColor={LocationTheme.Color.Secondary}\n        TertiaryColor={LocationTheme.Color.Tertiary}\n      >\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[3, 1, 1.45, 1]}\n          Flex=\"row\"\n          TextColor={LocationTheme.Color.Primary}\n        >\n          <Block maxWidth={0.5}>\n            {/* <Bread\n              Crumbs={[\n                {\n                  Destination: 'locations/',\n                  Label: 'Locations',\n                },\n                {\n                  Destination: 'locations/',\n                  Label: LocationData.geography.state,\n                },\n                {\n                  Destination:\n                    'locations/' +\n                    LocationData.geography.state.toLowerCase() +\n                    '/' +\n                    LocationData.slug,\n                  Label: LocationData.name,\n                },\n              ]}\n              TextColor={LocationTheme.Color.Primary}\n            /> */}\n            {SpecialsPage ? (\n              <h1 className=\"h2\">\n                Cannabis specials & deals in {LocationData.geography.city}\n              </h1>\n            ) : (\n              <h1 className=\"h2\">{LocationData.about.headline}</h1>\n            )}\n            <Btn\n              IconClass=\"plus\"\n              Label=\"View Menu\"\n              BgColor={LocationTheme.Color.Primary}\n              TextColor={LocationTheme.Color.Tertiary}\n              Destination={\n                '/menu/' +\n                LocationData.geography.state.toLowerCase() +\n                '/' +\n                LocationData.slug\n              }\n              IconPosition=\"left\"\n              IconFas\n            />\n            <Btn\n              AddClass=\"btn-secondary\"\n              IconClass=\"map-marker-alt\"\n              Label={LocationData.contactDetails.location.address}\n              BgColor=\"none\"\n              TextColor={LocationTheme.Color.Tertiary}\n              Destination={LocationData.meta.maps}\n              IconPosition=\"left\"\n              External\n              IconFas\n            />\n            {/* <SocialStrip\n              Margin={[0.5, 0, 0, 0]}\n              Location={Location}\n              TextColor={LocationTheme.Color.Primary}\n            /> */}\n          </Block>\n          <Block Flex=\"row\" maxWidth={0.5}>\n            <AwardHours\n              TextColor={LocationTheme.Color.Primary}\n              Hours={LocationData.contactDetails.hours.map((time, index) => {\n                return {\n                  Label: time.days,\n                  Data: time.start_time,\n                };\n              })}\n            />\n          </Block>\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[0, 1, 0, 1]}\n          Flex=\"column\"\n          TextColor={LocationTheme.Color.Primary}\n        >\n          <PageTabs\n            Location={Location}\n            BaseUrl={\n              '/locations' +\n              '/' +\n              LocationData.geography.state.toLowerCase() +\n              '/' +\n              LocationData.slug +\n              '/'\n            }\n            List={[\n              { name: 'About', slug: '' },\n              { name: 'Specials', slug: 'specials' },\n              { name: 'Menu', slug: 'menu' },\n            ]}\n            TextColor={LocationTheme.Color.Primary}\n            Padding={[0, 0, 0, 0]}\n          />\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[0, 1, 0, 1]}\n          Flex=\"column\"\n          TextColor={LocationTheme.Color.Primary}\n          Tint={0}\n          TintBorder\n        >\n          <SuggestionList\n            BaseUrl={\n              '/locations' +\n              '/' +\n              LocationData.geography.state.toLowerCase() +\n              '/' +\n              LocationData.slug +\n              '/'\n            }\n            List={LocationData.nearby}\n            Affix=\"/menu\"\n            Label=\"Nearby\"\n            TextColor={LocationTheme.Color.Primary}\n            GradientColor={LocationTheme.Color.Background}\n            Padding={[0, 0, 0, 0]}\n          />\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        {/* Begin page content. */}\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n        <SubLevelPageContent\n          BgColor={Theme.Color.Background}\n          TextColor={Theme.Color.Nightsky}\n        >\n          {/* ///////////// */}\n\n          {/* ///////////// */}\n\n          {children}\n\n          {/* ///////////// */}\n\n          {/* ///////////// */}\n        </SubLevelPageContent>\n        {/* End page content. */}\n      </SubLevelPage>\n    </Layout>\n  );\n};\n\nexport default LocationPageWrapper;\n","// templates/Learn.js:\n// This is the template for Learn pages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport SpecialsListings from 'components/library/SpecialsListings';\n\n// Template Specific Components\nimport LocationPageWrapper from '../Components/LocationPageWrapper';\n\n// Castle.js by L&M\nimport Castle from 'components/library/Castle';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// TemplateLayout Component to pass data where it needs to go for\n// the theming of the hero as well as the LearnSection and what\n// to display in those cards.\nconst TemplateLayout = ({\n  LocationData,\n  Location,\n  Headline,\n  SpecialsPage,\n  elements,\n}) => {\n  // Build our automatic summary headline.\n  let SummaryHeadlineString =\n    LocationData.name +\n    // eslint-disable-next-line\n    \"'s leading cannabis dispensary — where humans come first.\";\n\n  // Check if a headline exists. If it does, display it. If it doesn't, use SummaryHeadlineString.\n  let SummaryHeadline =\n    LocationData.about.summary.headline != ''\n      ? LocationData.about.summary.headline\n      : SummaryHeadlineString;\n\n  if (SpecialsPage == true) {\n    return (\n      <LocationPageWrapper\n        Headline={Headline}\n        LocationData={LocationData}\n        Location={Location}\n        SpecialsPage={SpecialsPage}\n      >\n        <SpecialsListings />\n\n        {/* ///////////// */}\n      </LocationPageWrapper>\n    );\n  } else {\n    return (\n      <LocationPageWrapper\n        Headline={Headline}\n        LocationData={LocationData}\n        Location={Location}\n        SpecialsPage={SpecialsPage}\n      >\n        {/* Check if elements exist. If so, run Castle. If not, display nothing. */}\n        {elements ? (\n          <Castle Bricks={elements} Location={Location.href} />\n        ) : null}\n\n        {/* ///////////// */}\n      </LocationPageWrapper>\n    );\n  }\n};\n\n// The Template itself. Where it all begins.\nconst LocationLandingTemplate = ({\n  LocationData,\n  Location,\n  elements,\n  SpecialsPage,\n}) => {\n  return (\n    <TemplateLayout\n      LocationData={LocationData}\n      Location={Location}\n      elements={elements}\n      SpecialsPage={SpecialsPage}\n    />\n  );\n};\n\nexport default LocationLandingTemplate;\n","// templates/Location/Landing/index.js:\n// This is the Location Landing page.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Templates\nimport LocationLandingTemplate from './layout';\n\n// Transformers\nimport { locationLandingTransformer } from 'templates/Location/Transformer';\n\n// Load Castle Fragments\nimport 'components/library/Castle';\n\n// Data\nimport { graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst LocationLandingPage = props => {\n  return (\n    <LocationLandingTemplate\n      LocationData={\n        locationLandingTransformer(props.data.allPrismicLocation.edges[0].node)\n          .edges.node\n      }\n      elements={props.data.allPrismicLocation.edges[0].node.data.elements}\n      Location={props.location}\n      SpecialsPage={props.pageContext.Specials}\n      Headline={\n        locationLandingTransformer(props.data.allPrismicLocation.edges[0].node)\n          .edges.node.about.headline\n      }\n    />\n  );\n};\n\nexport default LocationLandingPage;\n\n// GraphQL Queries\n/////////////////////////////////////////////////////////////////////\n\n// The post template's GraphQL query. Notice the slug\n// variable which is passed in. We set this on the page\n// context in gatsby-node.js.\n//\n// All GraphQL queries in Gatsby are run at build-time and\n// loaded as plain JSON files so have minimal client cost.\nexport const query = graphql`\n  query($Id: String!) {\n    allPrismicLocation(filter: { id: { eq: $Id } }) {\n      edges {\n        node {\n          id\n          tags\n          uid\n\n          # Load our Castle Component data.\n          ...PrismicLocationElementsHeroData\n          ...PrismicLocationElementsFullSplitSectionData\n          ...PrismicLocationElementsSimpleSectionData\n          ...PrismicLocationElementsSplitSectionData\n          ...PrismicLocationElementsStickyGalleryData\n          ...PrismicLocationElementsSplitImageHeroData\n          ...PrismicLocationElementsPromotionalStripData\n          ...PrismicLocationElementsWidgetRowData\n\n          data {\n            name {\n              text\n            }\n            status_delivery\n            status_store\n            geo_city\n            geo_state\n            geo_country\n            geo_location_address\n            geo_location_state\n            phone\n            hours {\n              days\n              start_time\n              end_time\n            }\n            meta_reserve_spot_link {\n              url\n            }\n            meta_menu {\n              url\n            }\n            meta_google_maps_url {\n              url\n            }\n            nearby_locations {\n              nearby_name\n              nearby_slug\n              color_background\n              color_primary\n              color_secondary\n              color_tertiary\n            }\n            about_headline {\n              text\n            }\n            color_background\n            color_primary\n            color_secondary\n            color_tertiary\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Block> Styles:\n// This is the primary column component.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\nexport const BlockStyle = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.flex : 'column')};\n  position: relative;\n  flex-shrink: 1;\n  ${props => (props.BgColor ? 'background: ' + props.BgColor + ';' : null)}\n  ${props => (props.TextColor ? 'color: ' + props.TextColor + ';' : null)}\n  \n  /* Item Alignment. We are aligning items */\n  /* 'stretch' by default. */\n  ${props =>\n    props.AlignItems ? 'align-items: ' + props.AlignItems + ';' : null}\n\n  /* Centered Style */\n  ${props =>\n    props.Style == 'centered' &&\n    css`\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto;\n\n      p,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        text-align: center;\n        width: 100%;\n      }\n\n      .btn {\n        margin: 0 auto;\n      }\n\n      .block-content {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n      }\n    `}\n\n  /* The block content. */\n  .block-content {\n    z-index: 2;\n    margin: 0 auto;\n    width: 100%;\n    ${props => (props.JustifyContent ? 'display:flex' : null)};\n    ${props =>\n      props.JustifyContent\n        ? 'justify-content: ' + props.JustifyContent + ';'\n        : null}\n\n    p {\n      max-width: 80%;\n    }\n  }\n\n  /* Background images with Gatsby-Img */\n  .block-img {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n\n    .img {\n      flex: 1;\n    }\n  }\n\n  /* Width Multiple */\n    ${props =>\n      props.Width ? 'width: ' + props.Width * 100 + '%;' : 'flex: 1;'}\n  max-width: ${props =>\n    props.maxWidth\n      ? 'calc(' + Theme.Base.Grid.SiteWidth + ' * ' + props.maxWidth + ')'\n      : Theme.Base.Grid.SiteWidth};\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n`;\n\nexport default BlockStyle;\n//////////////////////////////////////////////////////////////////////\n","// <Block> Component:\n// This is the sitewide block style of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Styles\nimport BlockStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Block = ({\n  children,\n  className,\n  Style,\n  maxWidth,\n  Width,\n  Padding,\n  AlignItems,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  BgTint,\n  BgColor,\n  TextColor,\n  JustifyContent,\n  Flex,\n}) => (\n  <BlockStyle\n    className={className ? className + ' block' : 'block'}\n    Width={Width}\n    maxWidth={maxWidth}\n    Style={Style}\n    Padding={Padding}\n    AlignItems={AlignItems ? AlignItems : false}\n    JustifyContent={JustifyContent ? JustifyContent : false}\n    BgTint={BgTint}\n    BgColor={BgColor}\n    TextColor={TextColor}\n    Flex={Flex}\n  >\n    {/* Block Content */}\n    {children ? <div className=\"block-content\">{children}</div> : null}\n\n    {/* For Background Images */}\n    {BgMatch ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n\n    {/* For Background Images with ImgQuery */}\n    {BgQuery ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgQuery src={BgQuery} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n  </BlockStyle>\n);\n\nexport default Block;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SlideSectionStyle = styled.div`\n  width: 100%;\n  overflow: hidden;\n\n  /* Slick styles */\n  .slick-slider {\n    padding-bottom: ${Theme.Base.Size.Sm};\n    margin-bottom: ${Theme.Base.Size.Sm};\n\n    .slick-slide {\n      &:first-child {\n        .widget {\n          padding-left: 0;\n        }\n      }\n    }\n    .slick-list {\n      overflow: visible;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      z-index: 400;\n      background: rgba(0, 0, 0, 0);\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc((${Root.Size} * 0.75) + (${Root.Size} * 0.25));\n      }\n\n      &.slick-next {\n        right: 0;\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n\n    .slick-dots {\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: auto;\n      padding: 0;\n      margin: 0;\n\n      li {\n        margin: 0;\n        padding: 0;\n        width: 10px;\n        height: 10px;\n        margin-right: 5px;\n\n        button {\n          margin: 0;\n          padding: 0;\n          position: relative;\n          width: 10px;\n          height: 10px;\n          margin-right: 5px;\n\n          &:before {\n            content: '';\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            width: 7px;\n            height: 7px;\n            border: 1px solid ${Theme.Color.Black};\n            border-radius: 50%;\n          }\n        }\n      }\n    }\n  }\n`;\n\nSlideSectionStyle.Inner = styled(SectionInnerStyle)`\n  width: 100%;\n  padding-bottom: 0;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: 0'};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n`;\n\nSlideSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: column;\n\n  .widget {\n    padding: calc(${Root.Size} / 6);\n    height: ${props =>\n      props.SectionSize\n        ? 'calc(' + Root.Size + '*' + props.SectionSize + ')'\n        : 'calc(' + Root.Size + '* 3)'};\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      padding: calc(${Root.Size}) calc(${Root.Size} / 4);\n      height: ${props =>\n        props.SectionSize\n          ? 'calc((' + Root.Size + '* 3) * ' + props.SectionSize + ')'\n          : 'calc((' + Root.Size + '* 3) * 3)'};\n    }\n  }\n`;\n\nSlideSectionStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n`;\n\nSlideSectionStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : null)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  i {\n    margin-right: ${Theme.Base.Size.Sm};\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n`;\n\nSlideSectionStyle.CallToAction = styled.div`\n  display: flex;\n\n  .btn {\n    background-color: rgba(0, 0, 0, 0);\n    color: ${Theme.Color.Black};\n\n    svg {\n      fill: ${Theme.Color.Black};\n      border: ${Theme.Color.Black};\n    }\n\n    i {\n      color: ${Theme.Color.Black};\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nexport default SlideSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SlideSection.js:\n//\n// Usage:\n// <SlideSection\n// Widgets={Widgets}\n// SectionSize=\"Large\"\n// SlidesToShow={4}\n// Header=\"Headline\"\n// ViewAll={['/', 'View All']}\n// />\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\nimport { Link } from 'gatsby';\n\n// Components\nimport WidgetContainer from 'components/library/Widgets/Container/';\nimport Btn from 'components/library/Btn';\nimport Icon from 'elements/Icons';\n\n// Constants\nimport { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport SlideSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Section Slider:\n// For displaying widgets within a SlideSection.\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The Slider itself.\nclass SectionSlider extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n\n    // Get any theming.\n    const ArrowColor = this.props.ArrowColor;\n\n    // Get any custom Slider Settings we want to pass.\n    const slidesToShow = this.props.SliderSettings.slidesToShow\n      ? this.props.SliderSettings.slidesToShow\n      : 1;\n    const slidesToScroll = this.props.SliderSettings.slidesToScroll\n      ? this.props.SliderSettings.slidesToScroll\n      : 1;\n    const autoplay = this.props.SliderSettings.autoplay\n      ? this.props.SliderSettings.autoplay\n      : false;\n    const arrows = this.props.SliderSettings.arrows\n      ? this.props.SliderSettings.arrows\n      : false;\n\n    // Pass into Slick Settings.\n    const settings = {\n      dots: true,\n      speed: 550,\n      arrows: false,\n      autoplaySpeed: 4000,\n      slidesToShow: slidesToShow,\n      slidesToScroll: slidesToScroll,\n      autoplay: autoplay,\n      infinite: false,\n      draggable: true,\n      arrows: arrows,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n      responsive: [\n        {\n          breakpoint: Base.Media.Width.Md + 'px',\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n          },\n        },\n      ],\n    };\n\n    return (\n      <>\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n        <Slider ref={h => (this.slider = h)} {...settings}>\n          {this.props.children}\n        </Slider>\n      </>\n    );\n  }\n}\n\n// The SubLevel Page Itself\nconst SlideSection = ({\n  Widgets,\n  SectionSize,\n  SliderSettings,\n  Header,\n  Icon,\n  ViewAll,\n  Theme,\n  Gutter,\n}) => (\n  <SlideSectionStyle>\n    <SlideSectionStyle.Inner Gutter={Gutter}>\n      <SlideSectionStyle.Content SectionSize={SectionSize}>\n        <SlideSectionStyle.SectionHeader>\n          <SlideSectionStyle.Headline TextColor={Theme.TextColor}>\n            {Icon ? <i className={'fas fa-' + Icon} /> : null}\n            <h2>{Header}</h2>\n          </SlideSectionStyle.Headline>\n          {ViewAll ? (\n            <SlideSectionStyle.CallToAction>\n              <Btn\n                Destination={ViewAll[0]}\n                BgColor=\"inherit\"\n                Label={ViewAll[1]}\n                IconclassName=\"carat\"\n              />\n            </SlideSectionStyle.CallToAction>\n          ) : null}\n        </SlideSectionStyle.SectionHeader>\n\n        <SectionSlider\n          SliderSettings={SliderSettings}\n          ArrowColor={Theme.TextColr}\n        >\n          {/* Map our Widgets data. */}\n          {Widgets.map((Widget, index) => {\n            // Pass our Widgets data to our WidgetContainers\n            return (\n              <WidgetContainer\n                key={index}\n                WidgetContent={Widget.WidgetContent}\n                Flex={Widget.Flex ? Widget.Flex : null}\n              />\n            );\n          })}\n        </SectionSlider>\n      </SlideSectionStyle.Content>\n    </SlideSectionStyle.Inner>\n  </SlideSectionStyle>\n);\n\nexport default SlideSection;\n","// WrapperControl.js:\n// For controlling our `.wrapper` class app-wide.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Lock Wrapper Scroll\nexport const WrapperLock = createGlobalStyle`\n  html, body {\n    overflow: hidden;\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: visible !important; \n      overflow: visible;\n      \n      .wrapper {\n        overflow-y: hidden;\n      }\n    }\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow: hidden;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow: hidden; \n      overflow-y: hidden;\n    }\n  }\n\n  .slick-slider {\n    touch-action: none !important;\n  }\n`;\n\n// Release Wrapper Scroll\nexport const WrapperRelease = createGlobalStyle`\n  html, body {\n      overflow: auto;\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow-y: visible;\n      height: auto;\n      position: absolute;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: hidden;\n      position: absolute;\n    }\n  }\n`;\n\n// Wrapper Flex Reseet\nexport const WrapperFlexStart = createGlobalStyle`\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      justify-content: flex-start;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      justify-content: space-between;\n    }\n  }\n`;\n","// SimpleSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nSimpleSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n    .img {\n      height: 100%;\n    }\n  }\n`;\n\nSimpleSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n`;\n\nexport default SimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SimpleSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  FluidHeight,\n  Gutter,\n  Flex,\n  children,\n}) => (\n  <SimpleSectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <SimpleSectionStyle.Inner\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <SimpleSectionStyle.Content\n        FluidHeight={FluidHeight}\n        Flex={Flex}\n        className=\"simple-section\"\n      >\n        {children}\n      </SimpleSectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </SimpleSectionStyle.Inner>\n  </SimpleSectionStyle>\n);\n\nexport default SimpleSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MenuHero Styles:\n// These are nearly identical to the Section base styles.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInnerStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  position: relative;\n  overflow: hidden;\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : 'padding-top: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : 'padding-bottom: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ' * ' +\n        props.Padding[3] +\n        ')'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  .hero-img {\n    pointer-events: none;\n    ${props =>\n      props.imgRight || props.imgLeft || props.imgTop || props.imgBottom\n        ? 'position: absolute'\n        : null};\n    ${props => (props.imgRight ? 'right: ' + props.imgRight : null)};\n    ${props => (props.imgLeft ? 'left: ' + props.imgLeft : null)};\n    ${props => (props.imgBottom ? 'bottom: ' + props.imgBottom : null)};\n    ${props => (props.imgTop ? 'top: ' + props.imgTop : null)};\n    ${props => (props.imgWidth ? 'width: ' + props.imgWidth : null)};\n  }\n\n  .btn-secondary {\n    margin-left: calc(${Root.Size} / 4);\n  }\n`;\n\nexport const HeroContentStyle = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: ${props =>\n    props.JustifyContent ? props.JustifyContent : 'flex-start'};\n  max-width: ${props => (props.FullWidth ? '100%' : Theme.Base.Grid.SiteWidth)};\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHeroStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  z-index: 1;\n  position: relative;\n  /* margin-top: calc(${Root.Nav.Size} * -1); */\n  background: ${props => (props.Background ? props.Background : 'none')};\n  background-size: cover;\n  background-position: center center;\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n  align-self: flex-start;\n  justify-self: flex-start;\n\n  /* Background Tint */\n  ${props =>\n    props.Tint\n      ? `\n  &.tint {\n    &:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      top: 0;\n      background-color: rgba(0,0,0,` +\n        props.Tint +\n        `);\n    }\n    .inner {\n      z-index: 500;\n    }\n  }\n  `\n      : null}\n  \n  /* Background Tint */\n  ${props =>\n    props.TintBorder\n      ? `\n      &:after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;      \n      top: 0;\n      height: 1px;\n      z-index: 5;\n      background-color: rgba(0,0,0, 0.05);\n    }\n  `\n      : null}\n\n  /* Block Spacing */\n  .block {\n    &:first-child {\n      padding-right: calc(${Root.Size} / 2);\n    }\n    &:second-child {\n      padding-left: calc(${Root.Size} / 2);\n    }\n  }\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n    height: 100%;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img, .img {\n      height: 100%;\n    }\n    .hero-img, .gatsby-image-wrapper {\n      position: unset !important;\n    }\n  }\n`;\n\nexport default SimpleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Helpers\nimport { HeroInner } from './../../Hero';\n\n// Styles\nimport SimpleHeroStyle from './styles.scss';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHero = ({\n  Background,\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  TextColor,\n  Tint,\n  Padding,\n  Size,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  Flex,\n  JustifyContent,\n  TintBorder,\n  children,\n}) => (\n  <SimpleHeroStyle\n    Background={Background}\n    TextColor={TextColor}\n    Tint={Tint}\n    TintBorder={TintBorder}\n    className={Tint ? 'tint' : null}\n  >\n    <HeroInner\n      Size={Size ? Size : false}\n      Padding={Padding}\n      imgRight={imgRight ? imgRight : false}\n      imgLeft={imgLeft ? imgLeft : false}\n      imgBottom={imgBottom ? imgBottom : false}\n      imgTop={imgTop ? imgTop : false}\n      imgWidth={imgWidth ? imgWidth : false}\n      JustifyContent={JustifyContent}\n      className=\"inner\"\n      Flex={Flex}\n    >\n      {children}\n    </HeroInner>\n    {BgMatch ? (\n      <div className=\"section-img\">\n        <ImgMatch src={BgMatch} AltText={BgAlt} className=\"hero-img\" />\n      </div>\n    ) : null}\n    {BgQuery ? (\n      <div className=\"section-img\">\n        <ImgQuery src={BgQuery} AltText=\"Hero Alt\" className=\"hero-img\" />\n      </div>\n    ) : null}\n  </SimpleHeroStyle>\n);\n\nexport default SimpleHero;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Breadcrumb> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const BreadCrumb = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  width: 100%;\n  align-items: center;\n  transform: translateX(calc(1rem * -1.5));\n  text-decoration: none;\n`;\n\nBreadCrumb.Label = styled(Link)`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  margin-left: calc(${Theme.Base.Size.Sm});\n  position: relative;\n  text-transform: capitalize;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: calc((${Theme.Base.Size.Sm} / 2) * -1);\n    transform: translateY(-50%);\n    width: 2px;\n    height: 2px;\n    border-radius: 50%;\n    background-color: ${props =>\n      props.TextColor ? props.TextColor : Theme.Color.Black};\n  }\n\n  &:first-child {\n    margin-left: 0;\n    position: relative;\n\n    &:before {\n      display: none;\n    }\n  }\n\n  svg {\n    transform: rotate(180deg) translateX(0%);\n    transform-origin: center center;\n    width: 1rem;\n    height: 1rem;\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transition: all 0.25s ease;\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n\n  &:hover {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    svg {\n      transform: rotate(180deg) translateX(50%);\n    }\n  }\n`;\n\nexport default BreadCrumb;\n//////////////////////////////////////////////////////////////////////\n","// <Bread Crumbs=\"\"> Component:\n// The breadcrumb component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport BreadCrumbStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Bread = ({ Crumbs, TextColor }) => (\n  <BreadCrumbStyle>\n    {Crumbs.map((crumb, index) => {\n      return (\n        <BreadCrumbStyle.Label\n          to={crumb.Destination}\n          key={index}\n          TextColor={TextColor}\n        >\n          {/* // Hide back button if nested item. */}\n          {index == 0 ? (\n            <Icon className=\"svg-carat\" Name=\"carat\" TextColor={TextColor} />\n          ) : null}\n\n          {crumb.Label}\n        </BreadCrumbStyle.Label>\n      );\n    })}\n  </BreadCrumbStyle>\n);\n\nexport default Bread;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Hero Component:\n// This is a helper component containing base\n// Hero styles shared across all Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { HeroInnerStyle, HeroContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInner = ({\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  Size,\n  Flex,\n  Padding,\n  children,\n  JustifyContent,\n}) => (\n  <HeroInnerStyle\n    Size={Size ? Size : false}\n    Padding={Padding ? Padding : false}\n    imgRight={imgRight ? imgRight : false}\n    imgLeft={imgLeft ? imgLeft : false}\n    imgBottom={imgBottom ? imgBottom : false}\n    imgTop={imgTop ? imgTop : false}\n    imgWidth={imgWidth ? imgWidth : false}\n  >\n    <HeroContentStyle\n      className=\"hero-content\"\n      JustifyContent={JustifyContent}\n      Flex={Flex}\n    >\n      {children}\n    </HeroContentStyle>\n  </HeroInnerStyle>\n);\n\nexport const HeroContent = ({ children, Flex }) => (\n  <HeroContentStyle Flex={Flex} className=\"hero-content\">\n    {children}\n  </HeroContentStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Widget Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Keyframes\nimport { FadeIn } from 'components/core/Transition/Keyframes';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidgetStyle = styled.div`\n  width: 100%;\n  padding-bottom: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  opacity: 0;\n  margin-top: ${Theme.Base.Size.Sm};\n  animation-fill-mode: forwards;\n  ${FadeIn};\n`;\n\nSidebarWidgetStyle.Inner = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: ${props =>\n    props.BgColor ? props.BgColor : Theme.Color.White};\n  border-radius: ${Root.Radius};\n  box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n  overflow: hidden;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  cursor: pointer;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Background Images */\n\n  ${props => {\n    if (props.BgImage)\n      return (\n        `\n        background-image: url(` +\n        props.BgImage +\n        `);\n        background-size: cover;\n        background-position: center center;\n        background-repeat: no-repeat;\n        `\n      );\n  }};\n\n  /* Tint */\n\n  ${props => {\n    if (props.TintColor || props.TintOpacity)\n      return (\n        `\n        &:before {\n          content: '';\n          position: absolute;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          right: 0;\n          background-color:` +\n        props.TintColor +\n        `;\n          opacity:` +\n        props.TintOpacity +\n        `;\n          transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n        }\n    `\n      );\n  }};\n\n  /* Links */\n  a {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    flex: 1;\n    width: 100%;\n    color: white;\n    transform: scale(1.000000001);\n    position: relative;\n    padding: ${Theme.Base.Size.Sm};\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* The Carat Icon */\n  svg {\n    position: absolute;\n    right: ${Theme.Base.Size.Sm};\n    top: ${Theme.Base.Size.Sm};\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transform: translateX(0%);\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* Hover Styles */\n  &:hover {\n    background-color: ${Theme.Color.Black};\n    color: ${Theme.Color.White};\n    box-shadow: 0 20px 30px 0 rgba(6, 10, 92, 0.21);\n\n    a {\n      text-decoration: none;\n      color: ${Theme.Color.White};\n    }\n\n    /* The Carat Icon */\n    svg {\n      transform: translateX(50%);\n      fill: ${Theme.Color.White};\n      height: 1.2rem;\n      width: 1.2rem;\n    }\n\n    /* The Widget Icon */\n    .fas {\n      color: ${Theme.Color.White};\n    }\n\n    /* Tint */\n    ${props => {\n      if (props.TintColor || props.TintOpacity)\n        return `\n        &:before {\n          opacity: 1\n        }\n    `;\n    }};\n  }\n`;\n\nSidebarWidgetStyle.Subhead = styled.div`\n  font-size: 1rem;\n  line-height: 1.2;\n`;\n\nSidebarWidgetStyle.Headline = styled.div`\n  font-size: 1.1rem;\n  line-height: 1.2;\n  font-weight: bold;\n`;\n\nSidebarWidgetStyle.Icon = styled.i`\n  position: absolute;\n  right: ${Theme.Base.Size.Sm};\n  top: ${Theme.Base.Size.Sm};\n  font-size: 1.2rem;\n  transform: scale(1.4);\n  transform-origin: top right;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  color: ${props => (props.Color ? props.Color : Theme.Color.Black)};\n`;\n\nexport default SidebarWidgetStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Default Widget.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport SidebarWidgetStyle from './styles.scss';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidget = ({\n  BgColor,\n  BgImage,\n  Headline,\n  TextColor,\n  IconName,\n  IconColor,\n  Destination,\n  TintColor,\n  TintOpacity,\n}) => (\n  <SidebarWidgetStyle className=\"widget\">\n    <SidebarWidgetStyle.Inner\n      BgColor={BgColor}\n      BgImage={BgImage}\n      TextColor={TextColor}\n      TintColor={TintColor}\n      TintOpacity={TintOpacity}\n    >\n      <Link to={Destination}>\n        <SidebarWidgetStyle.Headline>{Headline}</SidebarWidgetStyle.Headline>\n\n        {/* Pass Icon value using FontAwesome */}\n        {/* Read more: https://fontawesome.com/how-to-use/on-the-web/setup/getting-started */}\n        <SidebarWidgetStyle.Icon\n          className={'fas fa-' + IconName}\n          Color={IconColor}\n        />\n      </Link>\n    </SidebarWidgetStyle.Inner>\n  </SidebarWidgetStyle>\n);\n\nexport default SidebarWidget;\n","// Sidebar Component Styles\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SidebarStyle = styled.div`\n  position: fixed;\n  top: ${Root.Nav.Size};\n  bottom: 0;\n  height: calc(100vh - ${Root.Nav.Size});\n  display: flex;\n  z-index: 555;\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nSidebarStyle.Inner = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  padding: ${Theme.Base.Size.Sm};\n  width: ${Root.Grid.Gutter.Left};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nexport default SidebarStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Sidebar.js:\n// This is the sitewide sidebar component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport SidebarWidget from 'components/library/Widgets/Sidebar/Default';\n\n// Styles\nimport SidebarStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nconst Sidebar = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SidebarStyle>\n    <SidebarStyle.Inner>\n      <SidebarWidget\n        BgColor={Theme.Color.Primary}\n        BgImage=\"none\"\n        Headline=\"Delivery Available\"\n        TextColor={Theme.Color.White}\n        IconColor={Theme.Color.White}\n        IconName=\"car\"\n        Destination=\"/menu/delivery/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Reserve Spot\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"users\"\n        Destination=\"/menu/pick-up/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Visit\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"map-marker-alt\"\n        Destination=\"/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Chat\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"comment-alt\"\n        Destination=\"/culture\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Phone\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"phone\"\n        Destination=\"/contact\"\n      />\n    </SidebarStyle.Inner>\n  </SidebarStyle>\n);\n\nexport default Sidebar;\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SubLevelPageStyle = styled.div`\n  width: 100%;\n  flex: 1;\n  display: flex;\n  flex-wrap: nowrap;\n  color: ${Theme.Color.Background};\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n`;\n\nSubLevelPageStyle.Inner = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n\nSubLevelPageStyle.Content = styled.div`\n  width: 100%;\n  flex: 1;\n  background: ${props => (props.BgColor ? props.BgColor : 'none')};\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n`;\n\nexport default SubLevelPageStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SubLevelPage.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport Sidebar from 'components/Library/Sidebar/';\nimport { WrapperRelease } from 'components/core/WrapperControl';\n\n// Styles\nimport SubLevelPageStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nexport const SubLevelPage = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SubLevelPageStyle className=\"sub\">\n    <WrapperRelease />\n    <Sidebar\n      BgColor={BgColor}\n      PrimaryColor={PrimaryColor}\n      SecondaryColor={SecondaryColor}\n      TertiaryColor={TertiaryColor}\n    />\n    <SubLevelPageStyle.Inner className=\"sublevel-inner\">\n      {children}\n    </SubLevelPageStyle.Inner>\n  </SubLevelPageStyle>\n);\n\n// The SubLevel Page Content\nexport const SubLevelPageContent = ({\n  BgColor,\n  TextColor,\n  ItemProp,\n  children,\n}) => (\n  <SubLevelPageStyle.Content\n    TextColor={TextColor}\n    BgColor={BgColor}\n    itemProp={ItemProp}\n  >\n    {children}\n  </SubLevelPageStyle.Content>\n);\n","// WidgetSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nWidgetSection.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  height: 400px;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n`;\n\nWidgetSection.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-wrap: wrap;\n\n  .widget {\n    width: 25%;\n    padding: calc(${Root.Size} / 6);\n    &:first-child {\n      padding-left: 0;\n    }\n    &:last-child {\n      padding-right: 0;\n    }\n\n    @media (max-width: calc(${Theme.Base.Media.Width.Md} * 1.5)) {\n      width: 50%;\n      flex: unset;\n      &:nth-child(odd) {\n        padding-left: 0;\n      }\n      &:nth-child(even) {\n        padding-right: 0;\n      }\n    }\n  }\n`;\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// WidgetSection Component:\n// For displaying inline Widgets on Subpages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Widgets Container\nimport WidgetContainer from 'components/library/Widgets/Container/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport WidgetSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = ({ BgColor, Widgets, Slider, Gutter }) => (\n  <WidgetSectionStyle BgColor={BgColor}>\n    <WidgetSectionStyle.Inner Gutter={Gutter}>\n      <WidgetSectionStyle.Content className=\"widget-section\">\n        {/* Map our Widgets data. */}\n        {Widgets.map((Widget, index) => {\n          // Pass our Widgets data to our WidgetContainers\n          return (\n            <WidgetContainer\n              key={index}\n              WidgetContent={Widget.WidgetContent}\n              Flex={Widget.Flex ? Widget.Flex : null}\n            />\n          );\n        })}\n      </WidgetSectionStyle.Content>\n    </WidgetSectionStyle.Inner>\n  </WidgetSectionStyle>\n);\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MasonrySecction Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst MasonrySectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n  overflow: visible;\n`;\n\nMasonrySectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n  overflow: visible;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n`;\n\nMasonrySectionStyle.Content = styled.div`\n  width: 100%;\n  position: relative;\n  margin: 0 auto;\n  overflow: visible;\n  max-width: ${Theme.Base.Grid.SiteWidth};\n\n  /* Performance fixes on Chrome & Safari */\n  -webkit-backface-visibility: hidden;\n  -moz-backface-visibility: hidden;\n  -ms-backface-visibility: hidden;\n  backface-visibility: hidden;\n\n  /* Performance fixes on Chrome & Safari */\n  -webkit-perspective: 1000;\n  -moz-perspective: 1000;\n  -ms-perspective: 1000;\n  perspective: 1000;\n\n  /* CSS Masonry */\n  /* Read more: https://w3bits.com/css-masonry/ */\n  column-width: 33%;\n  column-count: ${props => (props.Columns ? props.Columns : 3)};\n  column-gap: ${props =>\n    props.ColumnGap\n      ? ' calc(' + Root.Size + ' * ' + props.ColumnGap + ')'\n      : 'calc(' + Root.Size + '* .25)'};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    column-width: 100%;\n    column-count: 1;\n  }\n\n  .widget-content {\n    border-radius: ${Root.Radius};\n    box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n    position: relative;\n    overflow: hidden;\n    width: 100%;\n    display: inline-block;\n    margin-bottom: ${props =>\n      props.ColumnGap\n        ? ' calc(' + Root.Size + ' * ' + props.ColumnGap + ')'\n        : 'calc(' + Root.Size + '* .25)'};\n\n    .widget-headline {\n      margin-bottom: calc(${Root.Size} * 2);\n    }\n  }\n`;\n\nexport default MasonrySectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// MasonrySection Component:\n// This is a component for a MasonryGrid of Widgets.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport MasonrySectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst MasonrySection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  PaddingY,\n  FluidHeight,\n  Gutter,\n  Columns,\n  ColumnGap,\n  children,\n}) => (\n  <MasonrySectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <MasonrySectionStyle.Inner\n      Size={PaddingY}\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <MasonrySectionStyle.Content\n        FluidHeight={FluidHeight}\n        className=\"masonry-section\"\n        Columns={Columns}\n        ColumnGap={ColumnGap}\n      >\n        {children}\n      </MasonrySectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </MasonrySectionStyle.Inner>\n  </MasonrySectionStyle>\n);\n\nexport default MasonrySection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Section Component:\n// This is a helper component containing base\n// Section styles shared across all Section components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { SectionInnerStyle, SectionContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const SectionInner = ({ children }) => (\n  <SectionInnerStyle>\n    <SectionContentStyle>{children}</SectionContentStyle>\n  </SectionInnerStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SocialStripStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SocialStripStyle = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Array-based margins utilizing root variable multiple. */\n  ${props =>\n    props.Margin\n      ? 'margin-top: calc(' + Root.Size + ' * ' + props.Margin[0] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-right: calc(' + Root.Size + ' * ' + props.Margin[1] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-bottom: calc(' + Root.Size + ' * ' + props.Margin[2] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-left: calc(' + Root.Size + ' * ' + props.Margin[3] + ')'\n      : null};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    margin-right: calc(${Theme.Base.Size.Md} * 0.8);\n    position: relative;\n    font-size: calc(${Root.Size} / 2);\n    width: calc(${Root.Size} / 2);\n    height: calc(${Root.Size} / 2);\n\n    span {\n      width: 100%;\n      height: auto;\n      font-size: calc(${Root.Size} / 2);\n      i {\n        font-size: calc(${Root.Size} / 2);\n      }\n    }\n\n    i {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%) scale(1.8);\n      transform-origin: center center;\n      opacity: 0;\n      border-radius: 50%;\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover {\n      &:before {\n        opacity: 0.1;\n      }\n    }\n  }\n`;\n\nSocialStripStyle.Label = styled.span`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  svg {\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nexport default SocialStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// SocialStrip Component:\n// The SocialStrip component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SocialStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SocialStrip = ({ TextColor, Location, Margin }) => (\n  <SocialStripStyle Margin={Margin} TextColor={TextColor}>\n    <a\n      href={'https://www.facebook.com/sharer.php?u=' + Location}\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"facebook\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://twitter.com/intent/tweet?url=' +\n        Location +\n        '&text=Test&via=Test&hashtags=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"twitter\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://www.linkedin.com/shareArticle?mini=true&url=' +\n        Location +\n        '&title=Test&summary=Test&source=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"linkedin\" Color={TextColor} />\n    </a>\n  </SocialStripStyle>\n);\n\nexport default SocialStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SpecialsListings> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SpecialsListingsStyle = styled.div`\n  appearance: none;\n`;\n\nexport default SpecialsListingsStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionListings Component:\n// The QuestionListings component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport QuestionListingsStyle from './styles.scss';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst QuestionCards = ({\n  CategoryFilter,\n  TagFilter,\n  CategorySlug,\n  AllCategories,\n  TagSlug,\n}) => {\n  // Assign our strings to build our slugs.\n  const CategorySlugString = CategorySlug ? '/' + CategorySlug : '';\n  const TagSlugString = TagSlug ? '/' + TagSlug : '';\n  const QuestionSlugString = CategorySlugString + TagSlugString;\n\n  // Helper Function to match the CategoryFilter to the right Category\n  function categoryMatch(categoryData, categoryFilter) {\n    // See  if our categoryData matches our supplied categoryFilter:\n    let matchedCategory = categoryData.filter(\n      category => category.node.Name === categoryFilter\n    );\n\n    // If it does, return the matched Category.\n    if (matchedCategory) {\n      return matchedCategory[0].node;\n    }\n  }\n\n  return (\n    // Run the StaticQuery to get the data we need.\n    <StaticQuery\n      query={graphql`\n        query {\n          allQuestionsJson {\n            edges {\n              node {\n                id\n                slug\n                date\n                author\n                title\n                category\n                tags\n                shortAnswer\n                longAnswer\n                coverImage\n              }\n            }\n          }\n\n          allQuestionCategoriesJson {\n            edges {\n              node {\n                Name\n                Icon\n                Slug\n                Tags {\n                  Name\n                  Icon\n                  Slug\n                }\n                PageTheme {\n                  Color {\n                    Background\n                    Primary\n                    Secondary\n                    Tertiary\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data =>\n        // Create our PageTheme variables for each Widget.\n\n        // Map the Question data we got.\n        data.allQuestionsJson.edges.map((Question, index) => {\n          // If the Question's Category is the same as the Filter supplied:\n          if (Question.node.category == CategoryFilter) {\n            // If there isn't a TagFilter applied:\n            if (TagFilter == 'all') {\n              // Use our helper function above to find the right Category's Data.\n              let filteredCategory = categoryMatch(\n                data.allQuestionCategoriesJson.edges,\n                CategoryFilter\n              );\n\n              return (\n                <DefaultWidget\n                  BgColor={filteredCategory.PageTheme.Color.Background}\n                  TextColor={filteredCategory.PageTheme.Color.Primary}\n                  Destination={\n                    '/learn' + QuestionSlugString + '/' + Question.node.slug\n                  }\n                  Subhead={Question.node.category}\n                  Headline={Question.node.title}\n                  IconName={filteredCategory.Icon}\n                  IconColor={filteredCategory.PageTheme.Color.Primary}\n                  BgImageFile={Question.node.coverImage}\n                  BgImageAltText={\n                    Question.node.category +\n                    ' & Cannabis | ' +\n                    Question.node.title\n                  }\n                  TintColor={Theme.Color.Black}\n                  TintOpacity={0.6}\n                  key={index}\n                />\n              );\n            } else {\n              // If there is a TagFilter applied, check the Tags Array\n              // to see if it includes our filter:\n              if (Question.node.tags.includes(TagFilter.toLowerCase())) {\n                // Use our helper function above to find the right Category's Data.\n                let filteredCategory = categoryMatch(\n                  data.allQuestionCategoriesJson.edges,\n                  CategoryFilter\n                );\n\n                return (\n                  <DefaultWidget\n                    BgColor={filteredCategory.PageTheme.Color.Background}\n                    TextColor={filteredCategory.PageTheme.Color.Primary}\n                    Destination={\n                      '/learn' + QuestionSlugString + '/' + Question.node.slug\n                    }\n                    Subhead={Question.node.category}\n                    Headline={Question.node.title}\n                    IconName={filteredCategory.Icon}\n                    IconColor={filteredCategory.PageTheme.Color.Primary}\n                    BgImageFile={Question.node.coverImage}\n                    BgImageAltText={\n                      Question.node.category +\n                      ' & Cannabis | ' +\n                      Question.node.title\n                    }\n                    TintColor={Theme.Color.Black}\n                    TintOpacity={0.6}\n                    key={index}\n                  />\n                );\n              } else {\n                // If it doesn't match anything, return false. And cry.\n                return false;\n              }\n            }\n          } else {\n            // If we want to display all the Questions, let's make their\n            // slug their root category.\n            if (CategoryFilter == 'all') {\n              // Use our helper function to match the Category data.\n              let filteredCategory = categoryMatch(\n                data.allQuestionCategoriesJson.edges,\n                Question.node.category\n              );\n\n              return (\n                <DefaultWidget\n                  BgColor={filteredCategory.PageTheme.Color.Background}\n                  TextColor={filteredCategory.PageTheme.Color.Primary}\n                  Destination={\n                    '/learn/' + filteredCategory.Slug + '/' + Question.node.slug\n                  }\n                  Subhead={Question.node.category}\n                  Headline={Question.node.title}\n                  IconName={filteredCategory.Icon}\n                  IconColor={filteredCategory.PageTheme.Color.Primary}\n                  BgImageFile={Question.node.coverImage}\n                  BgImageAltText={\n                    Question.node.category +\n                    ' & Cannabis | ' +\n                    Question.node.title\n                  }\n                  TintColor={Theme.Color.Black}\n                  TintOpacity={0.6}\n                  key={index}\n                />\n              );\n            } else {\n              // If nothing is supplied, don't return anything. Also, cry.\n              return null;\n            }\n          }\n        })\n      }\n    />\n  );\n};\n\nconst QuestionListings = ({\n  Gutter,\n  CategorySlug,\n  AllCategories,\n  TagSlug,\n  BgColor,\n  CategoryFilter,\n  TagFilter,\n}) => (\n  <MasonrySection\n    Columns={3}\n    ColumnGap={0.25}\n    BgColor={BgColor ? BgColor : Theme.Color.White}\n    TextColor={Theme.Color.Nightsky}\n    Gutter={Gutter ? Gutter : [0, 1, 2, 1]}\n  >\n    {/* If the CategoryFilter is supplied */}\n    {CategoryFilter ? (\n      <QuestionCards\n        CategorySlug={CategorySlug}\n        TagSlug={TagSlug ? TagSlug : null}\n        CategoryFilter={CategoryFilter}\n        TagFilter={TagFilter ? TagFilter : 'all'}\n        AllCategories={AllCategories}\n      />\n    ) : (\n      // If it isn't, revert to 'all'\n      <QuestionCards\n        CategorySlug={CategorySlug}\n        TagSlug={TagSlug ? TagSlug : null}\n        CategoryFilter=\"all\"\n        TagFilter={TagFilter}\n        AllCategories={AllCategories}\n      />\n    )}\n  </MasonrySection>\n);\n\nexport default QuestionListings;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SplitSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n`;\n\nSplitSectionStyle.Inner = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: center;\n  position: relative;\n\n  .block {\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n\n      /* Add left padding to first block if it's a text\n      block depending on it's flex property: */\n      ${props =>\n        props.Flex\n          ? null\n          : 'padding-left: calc(' +\n            Root.Grid.Gutter.Left +\n            ' + ' +\n            Root.Size +\n            ')'};\n    }\n\n    &:last-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n    }\n\n    .block-content {\n      max-width: calc(${Root.Site.Width} / 3);\n      width: 100%;\n    }\n\n    .block-img-wrap {\n      width: 100%;\n      padding-bottom: 80%;\n      overflow: hidden;\n      position: relative;\n\n      .block-img {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`;\n\nexport default SplitSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitSection Component:\n// This is a basic component for sections with.\n// fullwidth 50% areas compensating for the\n// left gutter sidebar.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SplitSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSection = ({ children, Flex }) => (\n  <SplitSectionStyle>\n    <SplitSectionStyle.Inner Flex={Flex}>{children}</SplitSectionStyle.Inner>\n  </SplitSectionStyle>\n);\n\nexport default SplitSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.4;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.09;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionFooter Component:\n// The QuestionFooter component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\nimport SimpleSection from 'components/library/Section/SimpleSection';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport Block from 'components/library/Block';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\nimport QuestionListings from 'components/library/QuestionListings';\nimport SlideSection from 'components/library/Section/SlideSection';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport QuestionFooterStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Create our Categories array.\nconst BrowseCategories = () => {\n  // Helper function to dissect the data into a usable map\n  function categoryWidgets(data) {\n    let widgetArray = data.map((category, index) => {\n      return {\n        Flex: 1,\n        WidgetContent: [\n          {\n            Destination: '/learn/' + category.node.Slug,\n            Style: 'Generic',\n            Meta: {\n              Generic: {\n                BgColor: category.node.PageTheme.Color.Background,\n                BgImage: '',\n                Subhead: '',\n                Headline: category.node.Name,\n                TextColor: category.node.PageTheme.Color.Primary,\n                IconColor: category.node.PageTheme.Color.Primary,\n                IconName: category.node.Icon, // FontAwesome Icon Name\n                TintColor: '',\n                TintOpacity: '',\n                IconSize: '',\n              },\n            },\n          },\n        ],\n      };\n    });\n\n    // Define our 'View All Widget'\n    let viewAll = {\n      Flex: 1,\n      WidgetContent: [\n        {\n          Destination: '/learn/all',\n          Style: 'Generic',\n          Meta: {\n            Generic: {\n              BgColor: Theme.Color.Nightsky,\n              BgImage: '',\n              Subhead: '',\n              Headline: 'All Categories',\n              TextColor: Theme.Color.White,\n              IconColor: Theme.Color.White,\n              IconName: 'question', // FontAwesome Icon Name\n              TintColor: '',\n              TintOpacity: '',\n              IconSize: '',\n            },\n          },\n        },\n      ],\n    };\n\n    // Add our 'View All Widget' to the beginning of the array with unshift().\n    widgetArray.unshift(viewAll);\n\n    // Return our new array.\n    return widgetArray;\n  }\n\n  // Return Slider with Categories\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          allQuestionCategoriesJson {\n            edges {\n              node {\n                id\n                Name\n                Icon\n                Headline\n                Slug\n                Tags {\n                  Name\n                  Icon\n                  Slug\n                }\n                Breadcrumb {\n                  Destination\n                  Label\n                }\n                PageTheme {\n                  Color {\n                    Background\n                    Primary\n                    Secondary\n                    Tertiary\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <SlideSection\n          Widgets={categoryWidgets(data.allQuestionCategoriesJson.edges)}\n          SectionSize={6}\n          Header=\"Browse Categories\"\n          Gutter={[0, 1, 1, 1]}\n          Theme={{\n            TextColor: Theme.Color.Slate,\n            BgColor: 'none',\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: false,\n            arrows: true,\n          }}\n        />\n      )}\n    />\n  );\n};\n\n// Return our footer.\nconst QuestionFooter = ({ CategoryFilter, TagFilter, HideCategories }) => (\n  <>\n    {/* ///////////// */}\n\n    <SimpleSection\n      BgColor={Theme.Color.White}\n      TextColor={Theme.Color.Nightsky}\n      Style=\"centered\"\n    >\n      <Block Style=\"centered\" Padding={[1, 0, 0, 0]} maxWidth={0.5}>\n        <h2>Not seeing your question?</h2>\n        <p className=\"p-md\">\n          Chat with an expert now or sumbit your own question\n        </p>\n        <Btn\n          IconClass=\"intercom\"\n          Label=\"Ask a question\"\n          BgColor={Theme.Color.Primary}\n          TextColor={Theme.Color.White}\n          Destination=\"/learn/all\"\n          IconPosition=\"left\"\n        />\n      </Block>\n    </SimpleSection>\n\n    {/* ///////////// */}\n\n    {HideCategories ? null : <BrowseCategories />}\n\n    {/* ///////////// */}\n\n    {/* ///////////// */}\n\n    <QuestionListings TagFilter={TagFilter} CategoryFilter={CategoryFilter} />\n\n    {/* ///////////// */}\n  </>\n);\n\nexport default QuestionFooter;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Simple Hero component:\n// slice_type: hero\n// example: https://www.dropbox.com/s/vp50dnga8ix2n8t/Screenshot%202019-05-07%2018.37.41.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleHeroStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleHero Component\nconst CastleHero = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleHeroStyle>\n      <SimpleHero\n        Padding={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        Background={primaryData.background_color}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1 itemProp=\"name\">\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n\n          {/* Check if Social Sharing is enabled */}\n          {primaryData.social_sharing.toLowerCase() == 'yes' ? (\n            <SocialStrip\n              Margin={[0.35, 0, 0, 0]}\n              Location={location}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n        </Block>\n      </SimpleHero>\n    </CastleHeroStyle>\n  );\n};\n\nexport default CastleHero;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .block {\n    .block-content {\n      width: 100% !important;\n      align-items: stretch;\n    }\n  }\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Full Split Section component:\n// slice_type: full_split_section\n// example: https://www.dropbox.com/s/3s19gold67oyspe/Screenshot%202019-05-08%2017.00.10.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SplitSection from 'components/library/Section/SplitSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleFullSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleFullSplitSectionStyle>\n      <SplitSection\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Padding={[1, 1, 1, 2]}\n          Width={0.5}\n          BgColor={primaryData.background_color}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n      </SplitSection>\n    </CastleFullSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsFullSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsFullSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .cta-wrap {\n    display: flex;\n    .btn {\n      margin-right: calc(${Root.Size} / 4);\n    }\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSimpleSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSimpleSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        BgMatch=\"placeholder_bg_4.jpg\"\n        BgTint={primaryData.tint_opacity}\n        BgAlt=\"Our Awesome Alt Tag\"\n        TextColor={primaryData.text_color}\n        Style={primaryData.text_alignment}\n      >\n        <Block\n          Style=\"centered\"\n          Padding={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          maxWidth={0.5}\n        >\n          {/* Check for Headline */}\n          <h2>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h2>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-md\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          <div className=\"cta-wrap\">\n            {repeatableData[0].cta_destination != null\n              ? repeatableData.map((item, index) => {\n                  return (\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  );\n                })\n              : null}\n          </div>\n        </Block>\n      </SimpleSection>\n    </CastleSimpleSectionStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSimpleSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSimpleSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Gutter={[1, 0, 1, 1]}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n\n        <Block\n          Padding={[3, 1, 3, 1]}\n          Width={0.5}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n      </SimpleSection>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitImageHero component:\n// slice_type: split_image_hero\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport Bread from 'components/library/Breadcrumb/';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleHero\n        imgLeft={primaryData.direction == 'normal' ? null : '0'}\n        imgRight={primaryData.direction == 'normal' ? '0' : null}\n        imgBottom=\"0\"\n        imgWidth=\"50%\"\n        Size={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        className=\"simple-hero\"\n        Background={primaryData.background_color}\n        JustifyContent={primaryData.direction == 'normal' ? null : 'flex-end'}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={0.5}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <Btn\n                    Label={item.cta_label}\n                    BgColor={item.cta_bg_color}\n                    TextColor={item.cta_text_color}\n                    Destination={item.cta_destination}\n                    IconPosition={item.cta_icon ? 'left' : null}\n                    IconClass={item.cta_icon ? item.cta_icon : null}\n                    IconFas\n                  />\n                );\n              })\n            : null}\n        </Block>\n        <Block className=\"hero-img\">\n          <ImgMatch src=\"hero-phone.png\" alt=\"100% Free Delivery\" />\n        </Block>\n      </SimpleHero>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitImageHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitImageHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// PromotionalStrip component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport HeroStrip from 'components/library/HeroStrip';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleSplitSectionStyle>\n      <HeroStrip\n        BgColor={\n          primaryData.bg_color ? primaryData.bg_color : Theme.Color.White\n        }\n        TextColor={\n          primaryData.text_color ? primaryData.text_color : Theme.Color.Nightsky\n        }\n        Items={promotionalItemsTransformer(repeatableData)}\n      />\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsPromotionalStripData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsPromotionalStripData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// StickyScrollSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst StickyScrollSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nStickyScrollSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n  }\n`;\n\nStickyScrollSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n\n  .block {\n    .gallery-img {\n      padding: 0 0 calc(${Root.Size} / 2) 0;\n\n      &:last-child {\n        padding: 0;\n      }\n    }\n\n    &.sticky-block {\n      .block-content {\n        position: sticky;\n        top: calc(${Root.Nav.Size});\n        padding-bottom: ${Root.Size};\n        height: calc(100vh - ${Root.Nav.Size});\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n    }\n  }\n\n  .txt-caption {\n    font-size: 1.4rem;\n    font-weight: bold;\n    color: ${Theme.Color.Slate};\n    display: block;\n    margin-bottom: calc(${Theme.Base.Size.Sm});\n  }\n`;\n\nexport default StickyScrollSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyScrollSection Component:\n// Desired outcome: https://www.dropbox.com/s/brll80qg306ywmk/Screenshot%202019-05-06%2015.01.12.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\nimport Block from 'components/library/Block';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport StickyScrollSectionStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// Render Element\nconst StickyScrollSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  Content,\n  Gallery,\n  GalleryQueries,\n  Gutter,\n  Flex,\n  Button,\n}) => (\n  <StickyScrollSectionStyle\n    Style={Style}\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <ReleaseOverflow />\n    <StickyScrollSectionStyle.Inner Gutter={Gutter}>\n      <StickyScrollSectionStyle.Content Flex={Flex} className=\"sticky-section\">\n        <Block Padding={[0, 1, 0, 1]} className=\"sticky-block\">\n          <span className=\"txt-caption\">{Content.Subheadline}</span>\n          <h2>{Content.Headline}</h2>\n          <p className=\"p-md\">{Content.Body}</p>\n\n          {/* Check if a Btn exists, display if so. */}\n          {Button ? (\n            <Btn\n              Label={Button.Label}\n              BgColor={Button.BgColor}\n              TextColor={Button.TextColor}\n              Destination={Button.Destination}\n              IconPosition=\"left\"\n              IconClass={Button.IconClass ? Button.IconClass : null}\n              IconFas\n            />\n          ) : null}\n        </Block>\n        <Block Padding={[0, 1, 0, 1]}>\n          {Gallery\n            ? Gallery.map((Img, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgMatch src={Img.Src} AltText={Img.Alt} />\n                  </div>\n                );\n              })\n            : null}\n          {GalleryQueries\n            ? GalleryQueries.map((query, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgQuery src={query.Fluid} AltText={query.Alt} />\n                  </div>\n                );\n              })\n            : null}\n        </Block>\n      </StickyScrollSectionStyle.Content>\n    </StickyScrollSectionStyle.Inner>\n  </StickyScrollSectionStyle>\n);\n\nexport default StickyScrollSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyGallery component:\n// slice_type: sticky_gallery\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport StickyScrollSection from 'components/library/Section/StickyScrollSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleStickyGalleryStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our GalleryQueries map.\n  const galleryImgQueriesTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let queries = data.map((Query, index) => {\n        return {\n          Fluid: Query.src.localFile.childImageSharp.fluid\n            ? Query.src.localFile.childImageSharp.fluid\n            : false,\n          Alt: Query.src.alt,\n        };\n      });\n\n      // Return new map.\n      return queries;\n    } else {\n      // Else, return 0.\n      return 0;\n    }\n  };\n\n  return (\n    <CastleStickyGalleryStyle>\n      <StickyScrollSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Content={{\n          Subheadline: primaryData.subheadline,\n          Headline: primaryData.headline.text,\n          Body: primaryData.body_text,\n        }}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n        GalleryQueries={galleryImgQueriesTransformer(repeatableData)}\n        Button={{\n          Label: primaryData.cta_label,\n          BgColor: primaryData.cta_bg_color,\n          TextColor: primaryData.cta_text_color,\n          Destination: primaryData.cta_destination,\n          IconClass: primaryData.cta_icon,\n        }}\n      />\n    </CastleStickyGalleryStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsStickyGalleryData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsStickyGalleryData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// CastleWidgetRow component:\n// slice_type: widget_row\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SlideSection from 'components/library/Section/SlideSection';\n\n// Style Overrides\nimport CastleWidgetRowStyle from './styles.scss';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleWidgetRow Component\nconst CastleWidgetRow = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const widgetContentTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: item.widget_destination,\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: item.widget_bg_color,\n                  BgQuery: item.widget_background_image.localFile\n                    ? item.widget_background_image.localFile.childImageSharp\n                        .fluid\n                    : false,\n                  Subhead: item.widget_subheadline,\n                  Headline: item.widget_headline.text,\n                  TextColor: item.widget_text_color,\n                  IconColor: item.widget_text_color,\n                  IconName: item.widget_icon_class, // FontAwesome Icon Name\n                  TintColor: item.widget_tint_color\n                    ? item.widget_tint_color\n                    : Theme.Color.Black,\n                  TintOpacity: item.widget_tint_opacity,\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleWidgetRowStyle>\n      <Block maxWidth=\"100%\">\n        <SlideSection\n          Widgets={widgetContentTransformer(repeatableData)}\n          SectionSize={primaryData.section_size}\n          Header={\n            primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Keep Browsing'\n          }\n          Gutter={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          Theme={{\n            TextColor: primaryData.text_color,\n            BgColor: primaryData.bg_color,\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: primaryData.autoplay == 'On' ? true : false,\n            arrows: true,\n          }}\n        />\n      </Block>\n    </CastleWidgetRowStyle>\n  );\n};\n\nexport default CastleWidgetRow;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsWidgetRowData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsWidgetRowData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// ::::::::      :::      ::::::::  ::::::::::: :::        ::::::::::\n// :+:    :+:   :+: :+:   :+:    :+:     :+:     :+:        :+:\n// +:+         +:+   +:+  +:+            +:+     +:+        +:+\n// +#+        +#++:++#++: +#++:++#++     +#+     +#+        +#++:++#\n// +#+        +#+     +#+        +#+     +#+     +#+        +#+\n// #+#    #+# #+#     #+# #+#    #+#     #+#     #+#        #+#\n//  ########  ###     ###  ########      ###     ########## ##########\n//\n// Castle.js // By Peter Laxalt // www.laxaltandmciver.co\n// This is the page builder for Elements.\n// Future regex for matching {{ variables }} https://regex101.com/r/xgOodL/1\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Styles\nimport CastleStyle from './styles.scss';\n\n// Components\nimport CastleHero from './components/CastleHero';\nimport CastleFullSplitSection from './components/CastleFullSplitSection';\nimport CastleSimpleSection from './components/CastleSimpleSection';\nimport CastleSplitSection from './components/CastleSplitSection';\nimport CastleSplitImageHero from './components/CastleSplitImageHero';\nimport CastlePromotionalStrip from './components/CastlePromotionalStrip';\nimport CastleStickyGallery from './components/CastleStickyGallery';\nimport CastleWidgetRow from './components/CastleWidgetRow';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Castle\nclass CastleBuilder extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  // Render\n  render() {\n    const bricks = this.props.Bricks;\n    const location = this.props.Location;\n\n    return (\n      <>\n        {bricks.map((brick, index) => {\n          switch (brick.slice_type) {\n            case 'hero':\n              return (\n                <CastleHero data={brick} location={location} key={index} />\n              );\n            case 'full_split_section':\n              return (\n                <CastleFullSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_section':\n              return (\n                <CastleSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_image_hero':\n              return (\n                <CastleSplitImageHero\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'promotional_strip':\n              return (\n                <CastlePromotionalStrip\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'sticky_gallery':\n              return (\n                <CastleStickyGallery\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'simple_section':\n              return (\n                <CastleSimpleSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'widget_row':\n              return (\n                <CastleWidgetRow data={brick} location={location} key={index} />\n              );\n          }\n        })}\n      </>\n    );\n  }\n}\n\nconst Castle = ({ Bricks, Location }) => (\n  <CastleStyle>\n    <CastleBuilder Bricks={Bricks} Location={Location} />\n  </CastleStyle>\n);\n\nexport default Castle;\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.6;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.15;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// HeroStrip Component:\n// The HeroStrip component, typically used in Hero components.\n// Example: https://www.dropbox.com/s/fkq5n663abznqpt/Screenshot%202019-04-19%2018.20.13.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\n\n// Styles\nimport HeroStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst HeroStrip = ({ Items, BgColor, TextColor }) => (\n  <HeroStripStyle BgColor={BgColor} TextColor={TextColor}>\n    <HeroStripStyle.Inner TextColor={TextColor}>\n      {Items.map((Item, index) => {\n        if (Item.Destination) {\n          return (\n            <div key={index} className=\"hero-strip-item focus\">\n              <Link to={Item.Destination}>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </Link>\n            </div>\n          );\n        } else {\n          return (\n            <div key={index} className=\"hero-strip-item\">\n              <div>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </div>\n            </div>\n          );\n        }\n      })}\n    </HeroStripStyle.Inner>\n  </HeroStripStyle>\n);\n\nexport default HeroStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Convert #HEXCODES to RGBA\n// hexToRGB('#FF0000', 0.5);\n\nconst hexToRGB = (hex, alpha) => {\n  var r = parseInt(hex.slice(1, 3), 16),\n    g = parseInt(hex.slice(3, 5), 16),\n    b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha) {\n    return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')';\n  } else {\n    return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n  }\n};\n\nexport default hexToRGB;\n","// <SimpleListStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SimpleListStyle = styled.div`\n  display: flex;\n`;\n\nSimpleListStyle.List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n`;\n\nSimpleListStyle.Item = styled.li`\n  display: block;\n  position: relative;\n  text-transform: capitalize;\n  margin-bottom: calc(${Root.Size} / 2);\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  span {\n    display: block;\n    &:first-child {\n      opacity: 0.6;\n      font-size: 1.2rem;\n      padding-bottom: calc(${Theme.Base.Size.Sm} / 2);\n    }\n    &:last-child {\n      font-weight: bold;\n      font-size: 1.5rem;\n    }\n  }\n`;\n\nexport default SimpleListStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SimpleListStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleList = ({ List, TextColor }) => (\n  <SimpleListStyle className=\"simple-list\" TextColor={TextColor}>\n    <SimpleListStyle.List TextColor={TextColor}>\n      {List.map((item, index) => {\n        return (\n          <SimpleListStyle.Item key={index}>\n            <span>{item.Label}</span>\n            <span>{item.Data}</span>\n          </SimpleListStyle.Item>\n        );\n      })}\n    </SimpleListStyle.List>\n  </SimpleListStyle>\n);\n\nexport default SimpleList;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <AwardBadgeStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const AwardBadgeStyle = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: calc(${Root.Size} * 3);\n  height: calc(${Root.Size} * 3);\n  background: ${Theme.Color.Primary};\n  color: ${Theme.Color.White};\n  border-radius: 50%;\n  box-shadow: 0 0px 8px 0 rgba(6, 10, 92, 0.12);\n  position: relative;\n  text-align: center;\n  padding: ${Theme.Base.Size.Sm};\n\n  .img {\n    width: 50%;\n  }\n\n  span {\n    margin-top: calc(${Theme.Base.Size.Sm} * 0.75);\n    padding-top: calc(${Theme.Base.Size.Sm} * 0.75);\n    text-align: center;\n    width: 100%;\n    position: relative;\n    font-weight: bold;\n    font-size: 0.9rem;\n    line-height: 1.3;\n\n    &:before {\n      content: '';\n      position: absolute;\n      left: 50%;\n      top: 0;\n      transform: translateX(-50%);\n      height: 1px;\n      width: ${Theme.Base.Size.Md};\n      background: ${Theme.Color.White};\n    }\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 3%;\n    right: 3%;\n    top: 3%;\n    bottom: 3%;\n    border: 1px solid ${Theme.Color.White};\n    border-radius: 50%;\n  }\n`;\n\nexport default AwardBadgeStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Styles\nimport AwardBadgeStyle from './styles.scss';\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst AwardHours = ({ Text, TextColor, BgColor }) => (\n  <AwardBadgeStyle TextColor={TextColor} BgColor={BgColor}>\n    <ImgMatch src=\"logos/leafly.png\" AltText=\"Leafly\" />\n    <span>{Text}</span>\n  </AwardBadgeStyle>\n);\n\nexport default AwardHours;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <AwardHoursStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const AwardHoursStyle = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: stretch;\n  flex: 1;\n\n  .simple-list {\n    padding-left: calc(${Root.Size} / 2);\n    margin-left: calc(${Root.Size} / 2);\n    border-left: 1px solid\n      ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    display: flex;\n    align-items: center;\n    ul {\n      justify-content: center;\n    }\n  }\n`;\n\nAwardHoursStyle.List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n`;\n\nAwardHoursStyle.Item = styled.li`\n  display: block;\n  position: relative;\n  text-transform: capitalize;\n  margin-bottom: calc(${Root.Size} / 2);\n\n  span {\n    display: block;\n    &:first-child {\n      opacity: 0.6;\n      font-size: 1.2rem;\n      padding-bottom: calc(${Theme.Base.Size.Sm} / 2);\n    }\n    &:last-child {\n      font-weight: bold;\n      font-size: 1.5rem;\n    }\n  }\n`;\n\nexport default AwardHoursStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport AwardBadge from 'components/library/AwardBadge';\nimport SimpleList from 'components/library/SimpleList';\n\n// Styles\nimport AwardHoursStyle from './styles.scss';\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst AwardHours = ({ Hours, TextColor }) => (\n  <AwardHoursStyle TextColor={TextColor}>\n    <AwardBadge\n      Logo=\"leafly\"\n      Text=\"2018 Voted Best Boutique Dispensary\"\n      BgColor={Theme.Color.Primary}\n      TextColor={Theme.Color.White}\n    />\n    <SimpleList TextColor={TextColor} List={Hours} />\n  </AwardHoursStyle>\n);\n\nexport default AwardHours;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SuggestionListStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Helpers\nimport hexToRGB from 'helpers/hexToRGB';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SuggestionListStyle = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: 100%;\n  overflow: hidden;\n  position: relative;\n\n  &:before {\n    content: '';\n    position: absolute;\n    pointer-events: none;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    width: calc(${Root.Size} / 2);\n    z-index: 3;\n    background-image: ${props =>\n      props.GradientColor\n        ? 'linear-gradient(-90deg, ' +\n          hexToRGB(props.GradientColor, 1) +\n          ',' +\n          hexToRGB(props.GradientColor, 0.000001) +\n          ')'\n        : 'pink'};\n\n    /* hexToRGB(props.GradientColor, 1) */\n\n    /* background-image: linear-gradient(\n      -90deg,\n      rgba(25d5,255,0, 1) 20%,\n      rgba(25d5,255,0, 0) 100%\n    ); */\n  }\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n\n  ul {\n    display: block;\n    width: 100%;\n    max-width: 100%;\n    word-wrap: none;\n    white-space: nowrap;\n    overflow-x: auto;\n    padding: calc(${Root.Size} / 4) 0;\n\n    li {\n      display: inline-block;\n      margin-right: calc(${Root.Size} / 4);\n      font-size: 0.8rem;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n\n      &:first-child {\n        opacity: 0.3;\n      }\n\n      .btn {\n        position: relative;\n        left: 0;\n        .btn-inner {\n          height: calc(${Root.Button.Size} * 0.7);\n          font-size: 0.8rem;\n          text-transform: uppercase;\n          letter-spacing: 1px;\n          font-weight: normal;\n          padding: 0 calc(${Root.Size} / 4);\n        }\n      }\n    }\n  }\n`;\n\nexport default SuggestionListStyle;\n//////////////////////////////////////////////////////////////////////\n","// SuggestionList Component:\n// This is for listing out suggestions with an optional label in the front.\n// Reference: https://www.dropbox.com/s/qvn6rohf52unkpv/Screenshot%202019-05-02%2017.19.11.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Styles\nimport SuggestionListStyle from './styles.scss';\n\n// Components\nimport Btn from 'components/library/Btn/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Our nearby locations component\nconst SuggestionList = ({\n  List,\n  Label,\n  BaseUrl,\n  TextColor,\n  GradientColor,\n  Padding,\n  Affix,\n}) => (\n  <SuggestionListStyle\n    className=\"suggestion-list\"\n    GradientColor={GradientColor}\n    Padding={Padding}\n  >\n    <ul>\n      {Label ? <li>{Label}</li> : null}\n      {List.map((item, index) => (\n        <li key={index}>\n          <Btn\n            BgColor=\"none\"\n            Label={item.nearby_name}\n            Destination={\n              Affix ? BaseUrl + item.nearby_slug + Affix : BaseUrl + item.nearby_slug\n            }\n            TextColor={TextColor}\n          />\n        </li>\n      ))}\n    </ul>\n  </SuggestionListStyle>\n);\n\nexport default SuggestionList;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Transformer:\n// This is for taking Prismic location.data and transforming it into something that\n// this component would like to handle. The Transformer is typically used\n// in /template/ pages where a GraphQL query from Prismic (or any location.data) source\n// is involved.\n//////////////////////////////////////////////////////////////////////\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Function to create our Columns Map\nexport const locationLandingTransformer = location => {\n  if (location) {\n    let locationMap = {\n      edges: {\n        node: {\n          id: location.id,\n          slug: location.uid,\n          name: location.data.name.text,\n          geography: {\n            city: location.data.geo_city,\n            state: location.data.geo_state,\n            country: location.data.geo_country,\n          },\n          status: {\n            delivery: location.data.status_delivery,\n            store: location.data.status_store,\n          },\n          meta: {\n            reserveSpot: location.data.meta_reserve_spot_link,\n            menu: location.data.meta_menu,\n            maps: location.data.meta_google_maps_url,\n          },\n          contactDetails: {\n            phone: location.data,\n            location: {\n              address: location.data.geo_location_address,\n              state: location.data.geo_location_state,\n            },\n            hours: location.data.hours,\n          },\n          nearby: location.data.nearby_locations,\n          about: {\n            headline: location.data.about_headline.text,\n            PageTheme: {\n              Color: {\n                Background: location.data.color_background,\n                Primary: location.data.color_primary,\n                Secondary: location.data.color_secondary,\n                Tertiary: location.data.color_tertiary,\n              },\n            },\n            summary: {\n              headline: location.data.about_headline.text,\n              body: 'Lorem ipsum solor sit dit imet',\n              gallery: [\n                {\n                  Src: 'placeholder_bg_5.png',\n                  Alt: 'Where humans come first.',\n                },\n                {\n                  Src: 'placeholder_bg_5.png',\n                  Alt: 'Where humans come first.',\n                },\n              ],\n            },\n          },\n        },\n      },\n    };\n\n    return locationMap;\n  } else {\n    return 'null';\n  }\n};\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n"],"sourceRoot":""}