{"version":3,"sources":["webpack:///./src/components/library/Castle/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/index.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/index.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/styles.scss.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/index.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/index.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/index.js","webpack:///./src/components/library/Castle/index.js","webpack:///./src/templates/Special/layout.js","webpack:///./src/templates/Special/index.js","webpack:///./src/components/library/Block/styles.scss.js","webpack:///./src/components/library/Block/index.js","webpack:///./src/components/library/Section/SlideSection/styles.scss.js","webpack:///./src/components/library/Section/SlideSection/index.js","webpack:///./src/components/core/WrapperControl/index.js","webpack:///./src/components/library/Section/SimpleSection/styles.scss.js","webpack:///./src/components/library/Section/SimpleSection/index.js","webpack:///./src/components/library/Hero/styles.scss.js","webpack:///./src/components/library/Section/WidgetSection/styles.scss.js","webpack:///./src/components/library/Section/WidgetSection/index.js","webpack:///./src/components/library/Widgets/Sidebar/Default/styles.scss.js","webpack:///./src/components/library/Widgets/Sidebar/Default/index.js","webpack:///./src/components/Library/Sidebar/styles.scss.js","webpack:///./src/components/Library/Sidebar/index.js","webpack:///./src/templates/SubLevelPage/styles.scss.js","webpack:///./src/templates/SubLevelPage/index.js","webpack:///./src/components/library/Hero/index.js","webpack:///./src/components/library/Hero/SimpleHero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/index.js","webpack:///./src/components/library/Breadcrumb/styles.scss.js","webpack:///./src/components/library/Breadcrumb/index.js","webpack:///./src/components/library/Section/index.js","webpack:///./src/components/library/SocialStrip/styles.scss.js","webpack:///./src/components/library/SocialStrip/index.js","webpack:///./src/components/library/Section/SplitSection/styles.scss.js","webpack:///./src/components/library/Section/SplitSection/index.js","webpack:///./src/components/library/HeroStrip/styles.scss.js","webpack:///./src/components/library/HeroStrip/index.js","webpack:///./src/components/library/Section/StickyScrollSection/styles.scss.js","webpack:///./src/components/library/Section/StickyScrollSection/index.js"],"names":["CastleStyle","styled","div","_templateObject","CastleHeroStyle","styles_scss_templateObject","Root","Size","CastleHero","_ref","data","location","primaryData","primary","repeatableData","items","react_default","a","createElement","CastleHero_styles_scss","SimpleHero","Padding","padding","replace","split","Background","background_color","BgQuery","background_image","localFile","childImageSharp","fluid","TextColor","text_color","Tint","tint_opacity","Block","AlignItems","Width","maxWidth","breadcrumb_url","Breadcrumb","Crumbs","Destination","Label","breadcrumb_label","itemProp","headline","text","body_text","className","cta_destination","map","item","index","Fragment","Btn","cta_label","BgColor","cta_bg_color","cta_text_color","IconPosition","cta_icon","IconClass","IconFas","social_sharing","toLowerCase","SocialStrip","Margin","Location","CastleFullSplitSection_styles_scss_templateObject","CastleSplitSection","CastleFullSplitSection_styles_scss","SplitSection","Flex","direction","Style","image","BgAlt","alt","CastleSimpleSectionStyle","CastleSimpleSection_styles_scss_templateObject","CastleSimpleSection","CastleSimpleSection_styles_scss","SimpleSection","BgMatch","BgTint","text_alignment","key","CastleSplitSection_styles_scss_templateObject","CastleSplitSection_styles_scss","Gutter","CastleSplitImageHero_styles_scss_templateObject","CastleSplitImageHero_styles_scss","imgLeft","imgRight","imgBottom","imgWidth","JustifyContent","ImgMatch","src","CastlePromotionalStrip_styles_scss_templateObject","length","CastlePromotionalStrip_styles_scss","HeroStrip","bg_color","Theme","Color","White","Nightsky","Items","Caption","caption","label","destination","promotionalItemsTransformer","CastleStickyGallery_styles_scss_templateObject","CastleStickyGallery_styles_scss","StickyScrollSection","Content","Subheadline","subheadline","Headline","Body","GalleryQueries","Query","Fluid","Alt","galleryImgQueriesTransformer","Button","CastleWidgetRow_styles_scss_templateObject","CastleWidgetRow","CastleWidgetRow_styles_scss","SlideSection","Widgets","WidgetContent","widget_destination","Meta","Generic","widget_bg_color","widget_background_image","Subhead","widget_subheadline","widget_headline","widget_text_color","IconColor","IconName","widget_icon_class","TintColor","widget_tint_color","Black","TintOpacity","widget_tint_opacity","IconSize","widgetContentTransformer","SectionSize","section_size","Header","SliderSettings","slidesToShow","slidesToScroll","autoplay","arrows","CastleBuilder","props","_React$Component","call","this","render","bricks","Bricks","brick","slice_type","components_CastleHero","CastleFullSplitSection","components_CastleSplitSection","CastleSplitImageHero","CastlePromotionalStrip","CastleStickyGallery","components_CastleSimpleSection","components_CastleWidgetRow","React","Component","Castle","styles_scss","Castle_CastleBuilder","DefaultTemplate","node","cover_image","color_background","title","color_primary","description","href","WidgetSection","BgImage","Primary","Tahoe","Mint","SpecialArticleTemplate","_ref2","elements","Layout","PrimaryColor","SecondaryColor","color_secondary","TertiaryColor","color_tertiary","SubLevelPage","ItemProp","library_Castle","layout_DefaultTemplate","console","log","__webpack_require__","d","__webpack_exports__","Special_query","SpecialsArticlePage","allPrismicSpecial","edges","layout","query","BlockStyle","flex","css","_templateObject2","Base","Grid","SiteWidth","children","AltText","ImgQuery","SlideSectionStyle","Sm","Inner","SectionInnerStyle","Left","SectionContentStyle","_templateObject3","Media","Md","SectionHeader","_templateObject4","_templateObject5","Transition","Duration","CssEase","CallToAction","_templateObject6","NextArrow","style","onClick","Object","assign","onKeyPress","role","tabIndex","Icons","Name","PrevArrow","SectionSlider","_settings","_this","ArrowColor","settings","dots","speed","autoplaySpeed","infinite","draggable","nextArrow","prevArrow","responsive","breakpoint","Helmet","rel","type","lib_default","ref","h","slider","Icon","ViewAll","SlideSection_styles_scss","IconclassName","SlideSection_SectionSlider","TextColr","Widget","Container","WrapperLock","createGlobalStyle","WrapperRelease","SimpleSectionStyle","Right","FluidHeight","SimpleSection_styles_scss","HeroInnerStyle","imgTop","HeroContentStyle","FullWidth","Slider","WidgetSection_styles_scss","SidebarWidgetStyle","FadeIn","Radius","i","SidebarWidget","gatsby_browser_entry","to","SidebarStyle","Nav","styles_scss_templateObject2","Sidebar","Sidebar_styles_scss","Default","SubLevelPageStyle","SubLevelPage_styles_scss_templateObject","SubLevelPage_styles_scss_templateObject2","styles_scss_templateObject3","SubLevelPage_SubLevelPage","SubLevelPage_SubLevelPageContent","SubLevelPage_styles_scss","WrapperControl","Library_Sidebar","SubLevelPageContent","HeroInner","HeroContent","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styles_scss__WEBPACK_IMPORTED_MODULE_2__","SimpleHeroStyle","TintBorder","Hero","BreadCrumb","Link","Bread","crumb","SocialStripStyle","span","target","SplitSectionStyle","Site","SplitSection_styles_scss","HeroStripStyle","ViewWidthFontSize","HeroStrip_styles_scss","Item","StickyScrollSectionStyle","Slate","ReleaseOverflow","StickyScrollSection_templateObject","Gallery","StickyScrollSection_styles_scss","Img","Src"],"mappings":"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","file":"component---src-templates-special-index-js-b644df3ed3a4b8cb9599.js","sourcesContent":["// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Simple Hero component:\n// slice_type: hero\n// example: https://www.dropbox.com/s/vp50dnga8ix2n8t/Screenshot%202019-05-07%2018.37.41.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleHeroStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleHero Component\nconst CastleHero = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleHeroStyle>\n      <SimpleHero\n        Padding={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        Background={primaryData.background_color}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1 itemProp=\"name\">\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n\n          {/* Check if Social Sharing is enabled */}\n          {primaryData.social_sharing.toLowerCase() == 'yes' ? (\n            <SocialStrip\n              Margin={[0.35, 0, 0, 0]}\n              Location={location}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n        </Block>\n      </SimpleHero>\n    </CastleHeroStyle>\n  );\n};\n\nexport default CastleHero;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicQuestionElementsHeroData on PrismicQuestion {\n    data {\n      elements {\n        ... on PrismicQuestionElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicGenericPageElementsHeroData on PrismicGenericPage {\n    data {\n      elements {\n        ... on PrismicGenericPageElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .block {\n    .block-content {\n      width: 100% !important;\n      align-items: stretch;\n    }\n  }\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Full Split Section component:\n// slice_type: full_split_section\n// example: https://www.dropbox.com/s/3s19gold67oyspe/Screenshot%202019-05-08%2017.00.10.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SplitSection from 'components/library/Section/SplitSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleFullSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleFullSplitSectionStyle>\n      <SplitSection\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Padding={[1, 1, 1, 2]}\n          Width={0.5}\n          BgColor={primaryData.background_color}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n      </SplitSection>\n    </CastleFullSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsFullSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .cta-wrap {\n    display: flex;\n    .btn {\n      margin-right: calc(${Root.Size} / 4);\n    }\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSimpleSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSimpleSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        BgMatch=\"placeholder_bg_4.jpg\"\n        BgTint={primaryData.tint_opacity}\n        BgAlt=\"Our Awesome Alt Tag\"\n        TextColor={primaryData.text_color}\n        Style={primaryData.text_alignment}\n      >\n        <Block\n          Style=\"centered\"\n          Padding={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          maxWidth={0.5}\n        >\n          {/* Check for Headline */}\n          <h2>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h2>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-md\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          <div className=\"cta-wrap\">\n            {repeatableData[0].cta_destination != null\n              ? repeatableData.map((item, index) => {\n                  return (\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  );\n                })\n              : null}\n          </div>\n        </Block>\n      </SimpleSection>\n    </CastleSimpleSectionStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSimpleSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Gutter={[1, 0, 1, 1]}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n\n        <Block\n          Padding={[3, 1, 3, 1]}\n          Width={0.5}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n      </SimpleSection>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitImageHero component:\n// slice_type: split_image_hero\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport Bread from 'components/library/Breadcrumb/';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleHero\n        imgLeft={primaryData.direction == 'normal' ? null : '0'}\n        imgRight={primaryData.direction == 'normal' ? '0' : null}\n        imgBottom=\"0\"\n        imgWidth=\"50%\"\n        Size={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        className=\"simple-hero\"\n        Background={primaryData.background_color}\n        JustifyContent={primaryData.direction == 'normal' ? null : 'flex-end'}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={0.5}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <Btn\n                    Label={item.cta_label}\n                    BgColor={item.cta_bg_color}\n                    TextColor={item.cta_text_color}\n                    Destination={item.cta_destination}\n                    IconPosition={item.cta_icon ? 'left' : null}\n                    IconClass={item.cta_icon ? item.cta_icon : null}\n                    IconFas\n                  />\n                );\n              })\n            : null}\n        </Block>\n        <Block className=\"hero-img\">\n          <ImgMatch src=\"hero-phone.png\" alt=\"100% Free Delivery\" />\n        </Block>\n      </SimpleHero>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitImageHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// PromotionalStrip component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport HeroStrip from 'components/library/HeroStrip';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleSplitSectionStyle>\n      <HeroStrip\n        BgColor={\n          primaryData.bg_color ? primaryData.bg_color : Theme.Color.White\n        }\n        TextColor={\n          primaryData.text_color ? primaryData.text_color : Theme.Color.Nightsky\n        }\n        Items={promotionalItemsTransformer(repeatableData)}\n      />\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsPromotionalStripData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyGallery component:\n// slice_type: sticky_gallery\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport StickyScrollSection from 'components/library/Section/StickyScrollSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleStickyGalleryStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our GalleryQueries map.\n  const galleryImgQueriesTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let queries = data.map((Query, index) => {\n        return {\n          Fluid: Query.src.localFile.childImageSharp.fluid\n            ? Query.src.localFile.childImageSharp.fluid\n            : false,\n          Alt: Query.src.alt,\n        };\n      });\n\n      // Return new map.\n      return queries;\n    } else {\n      // Else, return 0.\n      return 0;\n    }\n  };\n\n  return (\n    <CastleStickyGalleryStyle>\n      <StickyScrollSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Content={{\n          Subheadline: primaryData.subheadline,\n          Headline: primaryData.headline.text,\n          Body: primaryData.body_text,\n        }}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n        GalleryQueries={galleryImgQueriesTransformer(repeatableData)}\n        Button={{\n          Label: primaryData.cta_label,\n          BgColor: primaryData.cta_bg_color,\n          TextColor: primaryData.cta_text_color,\n          Destination: primaryData.cta_destination,\n          IconClass: primaryData.cta_icon,\n        }}\n      />\n    </CastleStickyGalleryStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsStickyGalleryData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// CastleWidgetRow component:\n// slice_type: widget_row\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SlideSection from 'components/library/Section/SlideSection';\n\n// Style Overrides\nimport CastleWidgetRowStyle from './styles.scss';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleWidgetRow Component\nconst CastleWidgetRow = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const widgetContentTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: item.widget_destination,\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: item.widget_bg_color,\n                  BgQuery: item.widget_background_image.localFile\n                    ? item.widget_background_image.localFile.childImageSharp\n                        .fluid\n                    : false,\n                  Subhead: item.widget_subheadline,\n                  Headline: item.widget_headline.text,\n                  TextColor: item.widget_text_color,\n                  IconColor: item.widget_text_color,\n                  IconName: item.widget_icon_class, // FontAwesome Icon Name\n                  TintColor: item.widget_tint_color\n                    ? item.widget_tint_color\n                    : Theme.Color.Black,\n                  TintOpacity: item.widget_tint_opacity,\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleWidgetRowStyle>\n      <Block maxWidth=\"100%\">\n        <SlideSection\n          Widgets={widgetContentTransformer(repeatableData)}\n          SectionSize={primaryData.section_size}\n          Header={\n            primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Keep Browsing'\n          }\n          Gutter={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          Theme={{\n            TextColor: primaryData.text_color,\n            BgColor: primaryData.bg_color,\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: primaryData.autoplay == 'On' ? true : false,\n            arrows: true,\n          }}\n        />\n      </Block>\n    </CastleWidgetRowStyle>\n  );\n};\n\nexport default CastleWidgetRow;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsWidgetRowData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle.js\n// This is the page builder for Elements.\n// Future regex for matching {{ variables }} https://regex101.com/r/xgOodL/1\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Styles\nimport CastleStyle from './styles.scss';\n\n// Components\nimport CastleHero from './components/CastleHero';\nimport CastleFullSplitSection from './components/CastleFullSplitSection';\nimport CastleSimpleSection from './components/CastleSimpleSection';\nimport CastleSplitSection from './components/CastleSplitSection';\nimport CastleSplitImageHero from './components/CastleSplitImageHero';\nimport CastlePromotionalStrip from './components/CastlePromotionalStrip';\nimport CastleStickyGallery from './components/CastleStickyGallery';\nimport CastleWidgetRow from './components/CastleWidgetRow';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Castle\nclass CastleBuilder extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  // Render\n  render() {\n    const bricks = this.props.Bricks;\n    const location = this.props.Location;\n\n    return (\n      <>\n        {bricks.map((brick, index) => {\n          switch (brick.slice_type) {\n            case 'hero':\n              return (\n                <CastleHero data={brick} location={location} key={index} />\n              );\n            case 'full_split_section':\n              return (\n                <CastleFullSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_section':\n              return (\n                <CastleSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_image_hero':\n              return (\n                <CastleSplitImageHero\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'promotional_strip':\n              return (\n                <CastlePromotionalStrip\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'sticky_gallery':\n              return (\n                <CastleStickyGallery\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'simple_section':\n              return (\n                <CastleSimpleSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'widget_row':\n              return (\n                <CastleWidgetRow data={brick} location={location} key={index} />\n              );\n          }\n        })}\n      </>\n    );\n  }\n}\n\nconst Castle = ({ Bricks, Location }) => (\n  <CastleStyle>\n    <CastleBuilder Bricks={Bricks} Location={Location} />\n  </CastleStyle>\n);\n\nexport default Castle;\n","// templates/Question.js:\n// This is the Question template of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from 'components/core/Layout';\n\n// Components\nimport { SubLevelPageContent, SubLevelPage } from 'templates/SubLevelPage';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Castle.js by L&M\nimport Castle from 'components/library/Castle';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst DefaultTemplate = ({ node, data }) => (\n  <>\n    <SimpleHero\n      Padding={[4, 0, 4, 0]}\n      BgQuery={\n        node.cover_image.localFile\n          ? node.cover_image.localFile.childImageSharp.fluid\n          : false\n      }\n      Background={\n        node.color_background ? node.color_background : Theme.Color.Background\n      }\n      BgAlt={node.title.text ? node.title.text : 'Hero Image'}\n      TextColor={node.color_primary ? node.color_primary : Theme.Color.White}\n      Tint=\"0.5\"\n    >\n      <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n        <Bread\n          Crumbs={[{ Destination: '/specials', Label: 'Specials' }]}\n          TextColor={node.color_primary}\n        />\n        <h1>{node.title.text}</h1>\n        {node.description ? <p className=\"p-lg\">{node.description} </p> : null}\n        <SocialStrip\n          Margin={[0.45, 0, 0, 0]}\n          Location={data.location.href}\n          TextColor={\n            node.color_primary ? node.color_primary : Theme.Color.White\n          }\n        />\n      </Block>\n    </SimpleHero>\n\n    {/* ///////////// */}\n\n    <WidgetSection\n      BgColor={Theme.Color.White}\n      Widgets={[\n        {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: '/menu',\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: Theme.Color.Nightsky,\n                  BgImage: '',\n                  Subhead: '',\n                  Headline: 'Menu',\n                  TextColor: Theme.Color.White,\n                  IconColor: Theme.Color.Primary,\n                  IconName: 'plus', // FontAwesome Icon Name\n                  TintColor: '',\n                  TintOpacity: '',\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        },\n        {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: '/locations',\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: Theme.Color.Tahoe,\n                  BgImage: '',\n                  Subhead: '',\n                  Headline: 'Locations',\n                  TextColor: Theme.Color.White,\n                  IconColor: Theme.Color.White,\n                  IconName: 'map-marker-alt', // FontAwesome Icon Name\n                  TintColor: '',\n                  TintOpacity: '',\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        },\n        {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: '/learn',\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: Theme.Color.Mint,\n                  BgImage: '',\n                  Subhead: '',\n                  Headline: 'Q&A',\n                  TextColor: Theme.Color.Nightsky,\n                  IconColor: Theme.Color.Nightsky,\n                  IconName: 'book-open', // FontAwesome Icon Name\n                  TintColor: '',\n                  TintOpacity: '',\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        },\n        {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: '/specials',\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: Theme.Color.Primary,\n                  BgImage: '',\n                  Subhead: '',\n                  Headline: 'Specials',\n                  TextColor: Theme.Color.White,\n                  IconColor: Theme.Color.White,\n                  IconName: 'star', // FontAwesome Icon Name\n                  TintColor: '',\n                  TintOpacity: '',\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        },\n      ]}\n    />\n\n    {/* ///////////// */}\n  </>\n);\n\n// The Question Template\nconst SpecialArticleTemplate = ({ data, node, elements }) => (\n  <Layout\n    BgColor={\n      node.color_background ? node.color_background : Theme.Color.Background\n    }\n    PrimaryColor={\n      node.color_primary ? node.color_primary : Theme.Color.Nightsky\n    }\n    SecondaryColor={\n      node.color_secondary ? node.color_secondary : Theme.Color.Nightsky\n    }\n    TertiaryColor={\n      node.color_tertiary ? node.color_tertiary : Theme.Color.White\n    }\n  >\n    <SubLevelPage\n      BgColor={\n        node.color_background ? node.color_background : Theme.Color.Background\n      }\n      PrimaryColor={\n        node.color_primary ? node.color_primary : Theme.Color.Nightsky\n      }\n      SecondaryColor={\n        node.color_secondary ? node.color_secondary : Theme.Color.Nightsky\n      }\n      TertiaryColor={\n        node.color_tertiary ? node.color_tertiary : Theme.Color.White\n      }\n    >\n      {/* Schema.org BlogPosting */}\n      {/* Read more: https://schema.org/BlogPosting */}\n\n      {/* ///////////// */}\n      {/* Begin page content. */}\n      {/* ///////////// */}\n      <SubLevelPageContent\n        BgColor={node.color_background}\n        TextColor={node.color_primary}\n        ItemProp=\"articleBody\"\n      >\n        {/* ///////////// */}\n\n        {/* Check if elements exist. If so, run Castle. If not, display the default layout. */}\n        {elements ? (\n          <Castle Bricks={elements} Location={data.location.href} />\n        ) : (\n          <DefaultTemplate data={data} node={node} />\n        )}\n\n        {console.log(elements)}\n\n        {/* ///////////// */}\n      </SubLevelPageContent>\n      {/* End page content. */}\n      {/* ///////////// */}\n    </SubLevelPage>\n  </Layout>\n);\n\nexport default SpecialArticleTemplate;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Index.js:\n// This is the home page of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Templates\nimport SpecialArticleTemplate from './layout';\n\n// Load Castle Fragments\nimport 'components/library/Castle';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Question Template\nconst SpecialsArticlePage = props => {\n  const node = props.data.allPrismicSpecial.edges[0].node;\n\n  return (\n    <>\n      <SpecialArticleTemplate\n        node={node.data}\n        data={props}\n        elements={node.data.elements}\n      />\n    </>\n  );\n};\n\nexport default SpecialsArticlePage;\n\n// GraphQL Queries\n// ///////////////////////////////////////////////////////////////////\nexport const query = graphql`\n  query($Id: String!) {\n    allPrismicSpecial(filter: { id: { eq: $Id } }) {\n      edges {\n        node {\n          id\n\n          # Load our Castle Component data.\n          ...PrismicSpecialElementsHeroData\n          ...PrismicSpecialElementsFullSplitSectionData\n          ...PrismicSpecialElementsSimpleSectionData\n          ...PrismicSpecialElementsSplitSectionData\n          ...PrismicSpecialElementsStickyGalleryData\n          ...PrismicSpecialElementsSplitImageHeroData\n          ...PrismicSpecialElementsPromotionalStripData\n          ...PrismicSpecialElementsWidgetRowData\n\n          # Load additional page data.\n          data {\n            title {\n              text\n            }\n            description\n            tags\n            color_background\n            color_primary\n            color_secondary\n            color_tertiary\n            cover_image {\n              dimensions {\n                width\n                height\n              }\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// ////////////////////////////////////////////////////////////////////\n// End Component\n","// <Block> Styles:\n// This is the primary column component.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\nexport const BlockStyle = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.flex : 'column')};\n  position: relative;\n  flex-shrink: 1;\n  ${props => (props.BgColor ? 'background: ' + props.BgColor + ';' : null)}\n  ${props => (props.TextColor ? 'color: ' + props.TextColor + ';' : null)}\n  \n  /* Item Alignment. We are aligning items */\n  /* 'stretch' by default. */\n  ${props =>\n    props.AlignItems ? 'align-items: ' + props.AlignItems + ';' : null}\n\n  /* Centered Style */\n  ${props =>\n    props.Style == 'centered' &&\n    css`\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto;\n\n      p,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        text-align: center;\n        width: 100%;\n      }\n\n      .btn {\n        margin: 0 auto;\n      }\n\n      .block-content {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n      }\n    `}\n\n  /* The block content. */\n  .block-content {\n    z-index: 2;\n    margin: 0 auto;\n    width: 100%;\n    ${props => (props.JustifyContent ? 'display:flex' : null)};\n    ${props =>\n      props.JustifyContent\n        ? 'justify-content: ' + props.JustifyContent + ';'\n        : null}\n\n    p {\n      max-width: 80%;\n    }\n  }\n\n  /* Background images with Gatsby-Img */\n  .block-img {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n\n    .img {\n      flex: 1;\n    }\n  }\n\n  /* Width Multiple */\n    ${props =>\n      props.Width ? 'width: ' + props.Width * 100 + '%;' : 'flex: 1;'}\n  max-width: ${props =>\n    props.maxWidth\n      ? 'calc(' + Theme.Base.Grid.SiteWidth + ' * ' + props.maxWidth + ')'\n      : Theme.Base.Grid.SiteWidth};\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n`;\n\nexport default BlockStyle;\n//////////////////////////////////////////////////////////////////////\n","// <Block> Component:\n// This is the sitewide block style of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Styles\nimport BlockStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Block = ({\n  children,\n  className,\n  Style,\n  maxWidth,\n  Width,\n  Padding,\n  AlignItems,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  BgTint,\n  BgColor,\n  TextColor,\n  JustifyContent,\n  Flex,\n}) => (\n  <BlockStyle\n    className={className ? className + ' block' : 'block'}\n    Width={Width}\n    maxWidth={maxWidth}\n    Style={Style}\n    Padding={Padding}\n    AlignItems={AlignItems ? AlignItems : false}\n    JustifyContent={JustifyContent ? JustifyContent : false}\n    BgTint={BgTint}\n    BgColor={BgColor}\n    TextColor={TextColor}\n    Flex={Flex}\n  >\n    {/* Block Content */}\n    {children ? <div className=\"block-content\">{children}</div> : null}\n\n    {/* For Background Images */}\n    {BgMatch ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n\n    {/* For Background Images with ImgQuery */}\n    {BgQuery ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgQuery src={BgQuery} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n  </BlockStyle>\n);\n\nexport default Block;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SlideSectionStyle = styled.div`\n  width: 100%;\n  overflow: hidden;\n\n  /* Slick styles */\n  .slick-slider {\n    padding-bottom: ${Theme.Base.Size.Sm};\n    margin-bottom: ${Theme.Base.Size.Sm};\n\n    .slick-slide {\n      &:first-child {\n        .widget {\n          padding-left: 0;\n        }\n      }\n    }\n    .slick-list {\n      overflow: visible;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      z-index: 400;\n      background: rgba(0, 0, 0, 0);\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc((${Root.Size} * 0.75) + (${Root.Size} * 0.25));\n      }\n\n      &.slick-next {\n        right: 0;\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n\n    .slick-dots {\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: auto;\n      padding: 0;\n      margin: 0;\n\n      li {\n        margin: 0;\n        padding: 0;\n        width: 10px;\n        height: 10px;\n        margin-right: 5px;\n\n        button {\n          margin: 0;\n          padding: 0;\n          position: relative;\n          width: 10px;\n          height: 10px;\n          margin-right: 5px;\n\n          &:before {\n            content: '';\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            width: 7px;\n            height: 7px;\n            border: 1px solid ${Theme.Color.Black};\n            border-radius: 50%;\n          }\n        }\n      }\n    }\n  }\n`;\n\nSlideSectionStyle.Inner = styled(SectionInnerStyle)`\n  width: 100%;\n  padding-bottom: 0;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: 0'};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n`;\n\nSlideSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: column;\n\n  .widget {\n    padding: calc(${Root.Size} / 6);\n    height: ${props =>\n      props.SectionSize\n        ? 'calc(' + Root.Size + '*' + props.SectionSize + ')'\n        : 'calc(' + Root.Size + '* 3)'};\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      padding: calc(${Root.Size}) calc(${Root.Size} / 4);\n      height: ${props =>\n        props.SectionSize\n          ? 'calc((' + Root.Size + '* 3) * ' + props.SectionSize + ')'\n          : 'calc((' + Root.Size + '* 3) * 3)'};\n    }\n  }\n`;\n\nSlideSectionStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n`;\n\nSlideSectionStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : null)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  i {\n    margin-right: ${Theme.Base.Size.Sm};\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n`;\n\nSlideSectionStyle.CallToAction = styled.div`\n  display: flex;\n\n  .btn {\n    background-color: rgba(0, 0, 0, 0);\n    color: ${Theme.Color.Black};\n\n    svg {\n      fill: ${Theme.Color.Black};\n      border: ${Theme.Color.Black};\n    }\n\n    i {\n      color: ${Theme.Color.Black};\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nexport default SlideSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SlideSection.js:\n//\n// Usage:\n// <SlideSection\n// Widgets={Widgets}\n// SectionSize=\"Large\"\n// SlidesToShow={4}\n// Header=\"Headline\"\n// ViewAll={['/', 'View All']}\n// />\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\nimport { Link } from 'gatsby';\n\n// Components\nimport WidgetContainer from 'components/library/Widgets/Container/';\nimport Btn from 'components/library/Btn';\nimport Icon from 'elements/Icons';\n\n// Constants\nimport { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport SlideSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Section Slider:\n// For displaying widgets within a SlideSection.\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The Slider itself.\nclass SectionSlider extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n\n    // Get any theming.\n    const ArrowColor = this.props.ArrowColor;\n\n    // Get any custom Slider Settings we want to pass.\n    const slidesToShow = this.props.SliderSettings.slidesToShow\n      ? this.props.SliderSettings.slidesToShow\n      : 1;\n    const slidesToScroll = this.props.SliderSettings.slidesToScroll\n      ? this.props.SliderSettings.slidesToScroll\n      : 1;\n    const autoplay = this.props.SliderSettings.autoplay\n      ? this.props.SliderSettings.autoplay\n      : false;\n    const arrows = this.props.SliderSettings.arrows\n      ? this.props.SliderSettings.arrows\n      : false;\n\n    // Pass into Slick Settings.\n    const settings = {\n      dots: true,\n      speed: 550,\n      arrows: false,\n      autoplaySpeed: 4000,\n      slidesToShow: slidesToShow,\n      slidesToScroll: slidesToScroll,\n      autoplay: autoplay,\n      infinite: false,\n      draggable: true,\n      arrows: arrows,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n      responsive: [\n        {\n          breakpoint: Base.Media.Width.Md + 'px',\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n          },\n        },\n      ],\n    };\n\n    return (\n      <>\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n        <Slider ref={h => (this.slider = h)} {...settings}>\n          {this.props.children}\n        </Slider>\n      </>\n    );\n  }\n}\n\n// The SubLevel Page Itself\nconst SlideSection = ({\n  Widgets,\n  SectionSize,\n  SliderSettings,\n  Header,\n  Icon,\n  ViewAll,\n  Theme,\n  Gutter,\n}) => (\n  <SlideSectionStyle>\n    <SlideSectionStyle.Inner Gutter={Gutter}>\n      <SlideSectionStyle.Content SectionSize={SectionSize}>\n        <SlideSectionStyle.SectionHeader>\n          <SlideSectionStyle.Headline TextColor={Theme.TextColor}>\n            {Icon ? <i className={'fas fa-' + Icon} /> : null}\n            <h2>{Header}</h2>\n          </SlideSectionStyle.Headline>\n          {ViewAll ? (\n            <SlideSectionStyle.CallToAction>\n              <Btn\n                Destination={ViewAll[0]}\n                BgColor=\"inherit\"\n                Label={ViewAll[1]}\n                IconclassName=\"carat\"\n              />\n            </SlideSectionStyle.CallToAction>\n          ) : null}\n        </SlideSectionStyle.SectionHeader>\n\n        <SectionSlider\n          SliderSettings={SliderSettings}\n          ArrowColor={Theme.TextColr}\n        >\n          {/* Map our Widgets data. */}\n          {Widgets.map((Widget, index) => {\n            // Pass our Widgets data to our WidgetContainers\n            return (\n              <WidgetContainer\n                key={index}\n                WidgetContent={Widget.WidgetContent}\n                Flex={Widget.Flex ? Widget.Flex : null}\n              />\n            );\n          })}\n        </SectionSlider>\n      </SlideSectionStyle.Content>\n    </SlideSectionStyle.Inner>\n  </SlideSectionStyle>\n);\n\nexport default SlideSection;\n","// WrapperControl.js:\n// For controlling our `.wrapper` class app-wide.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Lock Wrapper Scroll\nexport const WrapperLock = createGlobalStyle`\n  html, body {\n    overflow: hidden;\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: visible !important; \n      overflow: visible;\n      \n      .wrapper {\n        overflow-y: hidden;\n      }\n    }\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow: hidden;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow: hidden; \n      overflow-y: hidden;\n    }\n  }\n\n  .slick-slider {\n    touch-action: none !important;\n  }\n`;\n\n// Release Wrapper Scroll\nexport const WrapperRelease = createGlobalStyle`\n  html, body {\n      overflow: auto;\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow-y: visible;\n      height: auto;\n      position: absolute;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: hidden;\n      position: absolute;\n    }\n  }\n`;\n\n// Wrapper Flex Reseet\nexport const WrapperFlexStart = createGlobalStyle`\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      justify-content: flex-start;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      justify-content: space-between;\n    }\n  }\n`;\n","// SimpleSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nSimpleSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n    .img {\n      height: 100%;\n    }\n  }\n`;\n\nSimpleSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n`;\n\nexport default SimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SimpleSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  FluidHeight,\n  Gutter,\n  Flex,\n  children,\n}) => (\n  <SimpleSectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <SimpleSectionStyle.Inner\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <SimpleSectionStyle.Content\n        FluidHeight={FluidHeight}\n        Flex={Flex}\n        className=\"simple-section\"\n      >\n        {children}\n      </SimpleSectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </SimpleSectionStyle.Inner>\n  </SimpleSectionStyle>\n);\n\nexport default SimpleSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MenuHero Styles:\n// These are nearly identical to the Section base styles.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInnerStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  position: relative;\n  overflow: hidden;\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : 'padding-top: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : 'padding-bottom: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ' * ' +\n        props.Padding[3] +\n        ')'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  .hero-img {\n    pointer-events: none;\n    ${props =>\n      props.imgRight || props.imgLeft || props.imgTop || props.imgBottom\n        ? 'position: absolute'\n        : null};\n    ${props => (props.imgRight ? 'right: ' + props.imgRight : null)};\n    ${props => (props.imgLeft ? 'left: ' + props.imgLeft : null)};\n    ${props => (props.imgBottom ? 'bottom: ' + props.imgBottom : null)};\n    ${props => (props.imgTop ? 'top: ' + props.imgTop : null)};\n    ${props => (props.imgWidth ? 'width: ' + props.imgWidth : null)};\n  }\n\n  .btn-secondary {\n    margin-left: calc(${Root.Size} / 4);\n  }\n`;\n\nexport const HeroContentStyle = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: ${props => (props.JustifyContent ? props.JustifyContent : 'flex-start')};\n  max-width: ${props => (props.FullWidth ? '100%' : Theme.Base.Grid.SiteWidth)};\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// WidgetSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nWidgetSection.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  height: 400px;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n`;\n\nWidgetSection.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-wrap: wrap;\n\n  .widget {\n    width: 25%;\n    padding: calc(${Root.Size} / 6);\n    &:first-child {\n      padding-left: 0;\n    }\n    &:last-child {\n      padding-right: 0;\n    }\n\n    @media (max-width: calc(${Theme.Base.Media.Width.Md} * 1.5)) {\n      width: 50%;\n      flex: unset;\n      &:nth-child(odd) {\n        padding-left: 0;\n      }\n      &:nth-child(even) {\n        padding-right: 0;\n      }\n    }\n  }\n`;\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// WidgetSection Component:\n// For displaying inline Widgets on Subpages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Widgets Container\nimport WidgetContainer from 'components/library/Widgets/Container/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport WidgetSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = ({ BgColor, Widgets, Slider, Gutter }) => (\n  <WidgetSectionStyle BgColor={BgColor}>\n    <WidgetSectionStyle.Inner Gutter={Gutter}>\n      <WidgetSectionStyle.Content className=\"widget-section\">\n        {/* Map our Widgets data. */}\n        {Widgets.map((Widget, index) => {\n          // Pass our Widgets data to our WidgetContainers\n          return (\n            <WidgetContainer\n              key={index}\n              WidgetContent={Widget.WidgetContent}\n              Flex={Widget.Flex ? Widget.Flex : null}\n            />\n          );\n        })}\n      </WidgetSectionStyle.Content>\n    </WidgetSectionStyle.Inner>\n  </WidgetSectionStyle>\n);\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Widget Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Keyframes\nimport { FadeIn } from 'components/core/Transition/Keyframes';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidgetStyle = styled.div`\n  width: 100%;\n  padding-bottom: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  opacity: 0;\n  margin-top: ${Theme.Base.Size.Sm};\n  animation-fill-mode: forwards;\n  ${FadeIn};\n`;\n\nSidebarWidgetStyle.Inner = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: ${props =>\n    props.BgColor ? props.BgColor : Theme.Color.White};\n  border-radius: ${Root.Radius};\n  box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n  overflow: hidden;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  cursor: pointer;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Background Images */\n\n  ${props => {\n    if (props.BgImage)\n      return (\n        `\n        background-image: url(` +\n        props.BgImage +\n        `);\n        background-size: cover;\n        background-position: center center;\n        background-repeat: no-repeat;\n        `\n      );\n  }};\n\n  /* Tint */\n\n  ${props => {\n    if (props.TintColor || props.TintOpacity)\n      return (\n        `\n        &:before {\n          content: '';\n          position: absolute;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          right: 0;\n          background-color:` +\n        props.TintColor +\n        `;\n          opacity:` +\n        props.TintOpacity +\n        `;\n          transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n        }\n    `\n      );\n  }};\n\n  /* Links */\n  a {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    flex: 1;\n    width: 100%;\n    color: white;\n    transform: scale(1.000000001);\n    position: relative;\n    padding: ${Theme.Base.Size.Sm};\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* The Carat Icon */\n  svg {\n    position: absolute;\n    right: ${Theme.Base.Size.Sm};\n    top: ${Theme.Base.Size.Sm};\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transform: translateX(0%);\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* Hover Styles */\n  &:hover {\n    background-color: ${Theme.Color.Black};\n    color: ${Theme.Color.White};\n    box-shadow: 0 20px 30px 0 rgba(6, 10, 92, 0.21);\n\n    a {\n      text-decoration: none;\n      color: ${Theme.Color.White};\n    }\n\n    /* The Carat Icon */\n    svg {\n      transform: translateX(50%);\n      fill: ${Theme.Color.White};\n      height: 1.2rem;\n      width: 1.2rem;\n    }\n\n    /* The Widget Icon */\n    .fas {\n      color: ${Theme.Color.White};\n    }\n\n    /* Tint */\n    ${props => {\n      if (props.TintColor || props.TintOpacity)\n        return `\n        &:before {\n          opacity: 1\n        }\n    `;\n    }};\n  }\n`;\n\nSidebarWidgetStyle.Subhead = styled.div`\n  font-size: 1rem;\n  line-height: 1.2;\n`;\n\nSidebarWidgetStyle.Headline = styled.div`\n  font-size: 1.1rem;\n  line-height: 1.2;\n  font-weight: bold;\n`;\n\nSidebarWidgetStyle.Icon = styled.i`\n  position: absolute;\n  right: ${Theme.Base.Size.Sm};\n  top: ${Theme.Base.Size.Sm};\n  font-size: 1.2rem;\n  transform: scale(1.4);\n  transform-origin: top right;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  color: ${props => (props.Color ? props.Color : Theme.Color.Black)};\n`;\n\nexport default SidebarWidgetStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Default Widget.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport SidebarWidgetStyle from './styles.scss';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidget = ({\n  BgColor,\n  BgImage,\n  Headline,\n  TextColor,\n  IconName,\n  IconColor,\n  Destination,\n  TintColor,\n  TintOpacity,\n}) => (\n  <SidebarWidgetStyle className=\"widget\">\n    <SidebarWidgetStyle.Inner\n      BgColor={BgColor}\n      BgImage={BgImage}\n      TextColor={TextColor}\n      TintColor={TintColor}\n      TintOpacity={TintOpacity}\n    >\n      <Link to={Destination}>\n        <SidebarWidgetStyle.Headline>{Headline}</SidebarWidgetStyle.Headline>\n\n        {/* Pass Icon value using FontAwesome */}\n        {/* Read more: https://fontawesome.com/how-to-use/on-the-web/setup/getting-started */}\n        <SidebarWidgetStyle.Icon\n          className={'fas fa-' + IconName}\n          Color={IconColor}\n        />\n      </Link>\n    </SidebarWidgetStyle.Inner>\n  </SidebarWidgetStyle>\n);\n\nexport default SidebarWidget;\n","// Sidebar Component Styles\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SidebarStyle = styled.div`\n  position: fixed;\n  top: ${Root.Nav.Size};\n  bottom: 0;\n  height: calc(100vh - ${Root.Nav.Size});\n  display: flex;\n  z-index: 555;\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nSidebarStyle.Inner = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  padding: ${Theme.Base.Size.Sm};\n  width: ${Root.Grid.Gutter.Left};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nexport default SidebarStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Sidebar.js:\n// This is the sitewide sidebar component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport SidebarWidget from 'components/library/Widgets/Sidebar/Default';\n\n// Styles\nimport SidebarStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nconst Sidebar = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SidebarStyle>\n    <SidebarStyle.Inner>\n      <SidebarWidget\n        BgColor={Theme.Color.Primary}\n        BgImage=\"none\"\n        Headline=\"Delivery Available\"\n        TextColor={Theme.Color.White}\n        IconColor={Theme.Color.White}\n        IconName=\"car\"\n        Destination=\"/menu/delivery/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Reserve Spot\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"users\"\n        Destination=\"/menu/pick-up/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Visit\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"map-marker-alt\"\n        Destination=\"/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Chat\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"comment-alt\"\n        Destination=\"/culture\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Phone\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"phone\"\n        Destination=\"/contact\"\n      />\n    </SidebarStyle.Inner>\n  </SidebarStyle>\n);\n\nexport default Sidebar;\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SubLevelPageStyle = styled.div`\n  width: 100%;\n  flex: 1;\n  display: flex;\n  flex-wrap: nowrap;\n  color: ${Theme.Color.Background};\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n`;\n\nSubLevelPageStyle.Inner = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n\nSubLevelPageStyle.Content = styled.div`\n  width: 100%;\n  flex: 1;\n  background: ${props => (props.BgColor ? props.BgColor : 'none')};\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n`;\n\nexport default SubLevelPageStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SubLevelPage.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport Sidebar from 'components/Library/Sidebar/';\nimport { WrapperRelease } from 'components/core/WrapperControl';\n\n// Styles\nimport SubLevelPageStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nexport const SubLevelPage = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SubLevelPageStyle className=\"sub\">\n    <WrapperRelease />\n    <Sidebar\n      BgColor={BgColor}\n      PrimaryColor={PrimaryColor}\n      SecondaryColor={SecondaryColor}\n      TertiaryColor={TertiaryColor}\n    />\n    <SubLevelPageStyle.Inner className=\"sublevel-inner\">\n      {children}\n    </SubLevelPageStyle.Inner>\n  </SubLevelPageStyle>\n);\n\n// The SubLevel Page Content\nexport const SubLevelPageContent = ({\n  BgColor,\n  TextColor,\n  ItemProp,\n  children,\n}) => (\n  <SubLevelPageStyle.Content\n    TextColor={TextColor}\n    BgColor={BgColor}\n    itemProp={ItemProp}\n  >\n    {children}\n  </SubLevelPageStyle.Content>\n);\n","// Hero Component:\n// This is a helper component containing base\n// Hero styles shared across all Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { HeroInnerStyle, HeroContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInner = ({\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  Size,\n  Flex,\n  Padding,\n  children,\n  JustifyContent,\n}) => (\n  <HeroInnerStyle\n    Size={Size ? Size : false}\n    Padding={Padding ? Padding : false}\n    imgRight={imgRight ? imgRight : false}\n    imgLeft={imgLeft ? imgLeft : false}\n    imgBottom={imgBottom ? imgBottom : false}\n    imgTop={imgTop ? imgTop : false}\n    imgWidth={imgWidth ? imgWidth : false}\n  >\n    <HeroContentStyle\n      className=\"hero-content\"\n      JustifyContent={JustifyContent}\n      Flex={Flex}\n    >\n      {children}\n    </HeroContentStyle>\n  </HeroInnerStyle>\n);\n\nexport const HeroContent = ({ children, Flex }) => (\n  <HeroContentStyle Flex={Flex} className=\"hero-content\">\n    {children}\n  </HeroContentStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SimpleHero Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHeroStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  z-index: 1;\n  position: relative;\n  /* margin-top: calc(${Root.Nav.Size} * -1); */\n  background: ${props => (props.Background ? props.Background : 'none')};\n  background-size: cover;\n  background-position: center center;\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n  align-self: flex-start;\n  justify-self: flex-start;\n\n  /* Background Tint */\n  ${props =>\n    props.Tint\n      ? `\n  &.tint {\n    &:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      top: 0;\n      background-color: rgba(0,0,0,` +\n        props.Tint +\n        `);\n    }\n    .inner {\n      z-index: 500;\n    }\n  }\n  `\n      : null}\n  \n  /* Background Tint */\n  ${props =>\n    props.TintBorder\n      ? `\n      &:after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;      \n      top: 0;\n      height: 1px;\n      z-index: 5;\n      background-color: rgba(0,0,0, 0.05);\n    }\n  `\n      : null}\n\n  /* Block Spacing */\n  .block {\n    &:first-child {\n      padding-right: calc(${Root.Size} / 2);\n    }\n    &:second-child {\n      padding-left: calc(${Root.Size} / 2);\n    }\n  }\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n    height: 100%;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img, .img {\n      height: 100%;\n    }\n    .hero-img, .gatsby-image-wrapper {\n      position: unset !important;\n    }\n  }\n`;\n\nexport default SimpleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Helpers\nimport { HeroInner } from './../../Hero';\n\n// Styles\nimport SimpleHeroStyle from './styles.scss';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHero = ({\n  Background,\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  TextColor,\n  Tint,\n  Padding,\n  Size,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  Flex,\n  JustifyContent,\n  TintBorder,\n  children,\n}) => (\n  <SimpleHeroStyle\n    Background={Background}\n    TextColor={TextColor}\n    Tint={Tint}\n    TintBorder={TintBorder}\n    className={Tint ? 'tint' : null}\n  >\n    <HeroInner\n      Size={Size ? Size : false}\n      Padding={Padding}\n      imgRight={imgRight ? imgRight : false}\n      imgLeft={imgLeft ? imgLeft : false}\n      imgBottom={imgBottom ? imgBottom : false}\n      imgTop={imgTop ? imgTop : false}\n      imgWidth={imgWidth ? imgWidth : false}\n      JustifyContent={JustifyContent}\n      className=\"inner\"\n      Flex={Flex}\n    >\n      {children}\n    </HeroInner>\n    {BgMatch ? (\n      <div className=\"section-img\">\n        <ImgMatch src={BgMatch} AltText={BgAlt} className=\"hero-img\" />\n      </div>\n    ) : null}\n    {BgQuery ? (\n      <div className=\"section-img\">\n        <ImgQuery src={BgQuery} AltText=\"Hero Alt\" className=\"hero-img\" />\n      </div>\n    ) : null}\n  </SimpleHeroStyle>\n);\n\nexport default SimpleHero;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Breadcrumb> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const BreadCrumb = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  width: 100%;\n  align-items: center;\n  transform: translateX(calc(1rem * -1.5));\n  text-decoration: none;\n`;\n\nBreadCrumb.Label = styled(Link)`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  margin-left: calc(${Theme.Base.Size.Sm});\n  position: relative;\n  text-transform: capitalize;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: calc((${Theme.Base.Size.Sm} / 2) * -1);\n    transform: translateY(-50%);\n    width: 2px;\n    height: 2px;\n    border-radius: 50%;\n    background-color: ${props =>\n      props.TextColor ? props.TextColor : Theme.Color.Black};\n  }\n\n  &:first-child {\n    margin-left: 0;\n    position: relative;\n\n    &:before {\n      display: none;\n    }\n  }\n\n  svg {\n    transform: rotate(180deg) translateX(0%);\n    transform-origin: center center;\n    width: 1rem;\n    height: 1rem;\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transition: all 0.25s ease;\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n\n  &:hover {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    svg {\n      transform: rotate(180deg) translateX(50%);\n    }\n  }\n`;\n\nexport default BreadCrumb;\n//////////////////////////////////////////////////////////////////////\n","// <Bread Crumbs=\"\"> Component:\n// The breadcrumb component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport BreadCrumbStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Bread = ({ Crumbs, TextColor }) => (\n  <BreadCrumbStyle>\n    {Crumbs.map((crumb, index) => {\n      return (\n        <BreadCrumbStyle.Label\n          to={crumb.Destination}\n          key={index}\n          TextColor={TextColor}\n        >\n          {/* // Hide back button if nested item. */}\n          {index == 0 ? (\n            <Icon className=\"svg-carat\" Name=\"carat\" TextColor={TextColor} />\n          ) : null}\n\n          {crumb.Label}\n        </BreadCrumbStyle.Label>\n      );\n    })}\n  </BreadCrumbStyle>\n);\n\nexport default Bread;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Section Component:\n// This is a helper component containing base\n// Section styles shared across all Section components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { SectionInnerStyle, SectionContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const SectionInner = ({ children }) => (\n  <SectionInnerStyle>\n    <SectionContentStyle>{children}</SectionContentStyle>\n  </SectionInnerStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SocialStripStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SocialStripStyle = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Array-based margins utilizing root variable multiple. */\n  ${props =>\n    props.Margin\n      ? 'margin-top: calc(' + Root.Size + ' * ' + props.Margin[0] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-right: calc(' + Root.Size + ' * ' + props.Margin[1] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-bottom: calc(' + Root.Size + ' * ' + props.Margin[2] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-left: calc(' + Root.Size + ' * ' + props.Margin[3] + ')'\n      : null};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    margin-right: calc(${Theme.Base.Size.Md} * 0.8);\n    position: relative;\n    font-size: calc(${Root.Size} / 2);\n    width: calc(${Root.Size} / 2);\n    height: calc(${Root.Size} / 2);\n\n    span {\n      width: 100%;\n      height: auto;\n      font-size: calc(${Root.Size} / 2);\n      i {\n        font-size: calc(${Root.Size} / 2);\n      }\n    }\n\n    i {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%) scale(1.8);\n      transform-origin: center center;\n      opacity: 0;\n      border-radius: 50%;\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover {\n      &:before {\n        opacity: 0.1;\n      }\n    }\n  }\n`;\n\nSocialStripStyle.Label = styled.span`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  svg {\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nexport default SocialStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// SocialStrip Component:\n// The SocialStrip component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SocialStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SocialStrip = ({ TextColor, Location, Margin }) => (\n  <SocialStripStyle Margin={Margin} TextColor={TextColor}>\n    <a\n      href={'https://www.facebook.com/sharer.php?u=' + Location}\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"facebook\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://twitter.com/intent/tweet?url=' +\n        Location +\n        '&text=Test&via=Test&hashtags=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"twitter\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://www.linkedin.com/shareArticle?mini=true&url=' +\n        Location +\n        '&title=Test&summary=Test&source=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"linkedin\" Color={TextColor} />\n    </a>\n  </SocialStripStyle>\n);\n\nexport default SocialStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SplitSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n`;\n\nSplitSectionStyle.Inner = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: center;\n  position: relative;\n\n  .block {\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n\n      /* Add left padding to first block if it's a text\n      block depending on it's flex property: */\n      ${props =>\n        props.Flex\n          ? null\n          : 'padding-left: calc(' +\n            Root.Grid.Gutter.Left +\n            ' + ' +\n            Root.Size +\n            ')'};\n    }\n\n    &:last-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n    }\n\n    .block-content {\n      max-width: calc(${Root.Site.Width} / 3);\n      width: 100%;\n    }\n\n    .block-img-wrap {\n      width: 100%;\n      padding-bottom: 80%;\n      overflow: hidden;\n      position: relative;\n\n      .block-img {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`;\n\nexport default SplitSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitSection Component:\n// This is a basic component for sections with.\n// fullwidth 50% areas compensating for the\n// left gutter sidebar.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SplitSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSection = ({ children, Flex }) => (\n  <SplitSectionStyle>\n    <SplitSectionStyle.Inner Flex={Flex}>{children}</SplitSectionStyle.Inner>\n  </SplitSectionStyle>\n);\n\nexport default SplitSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.6;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.15;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// HeroStrip Component:\n// The HeroStrip component, typically used in Hero components.\n// Example: https://www.dropbox.com/s/fkq5n663abznqpt/Screenshot%202019-04-19%2018.20.13.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\n\n// Styles\nimport HeroStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst HeroStrip = ({ Items, BgColor, TextColor }) => (\n  <HeroStripStyle BgColor={BgColor} TextColor={TextColor}>\n    <HeroStripStyle.Inner TextColor={TextColor}>\n      {Items.map((Item, index) => {\n        if (Item.Destination) {\n          return (\n            <div key={index} className=\"hero-strip-item focus\">\n              <Link to={Item.Destination}>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </Link>\n            </div>\n          );\n        } else {\n          return (\n            <div key={index} className=\"hero-strip-item\">\n              <div>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </div>\n            </div>\n          );\n        }\n      })}\n    </HeroStripStyle.Inner>\n  </HeroStripStyle>\n);\n\nexport default HeroStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// StickyScrollSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst StickyScrollSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nStickyScrollSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n  }\n`;\n\nStickyScrollSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n\n  .block {\n    .gallery-img {\n      padding: 0 0 calc(${Root.Size} / 2) 0;\n\n      &:last-child {\n        padding: 0;\n      }\n    }\n\n    &.sticky-block {\n      .block-content {\n        position: sticky;\n        top: calc(${Root.Nav.Size});\n        padding-bottom: ${Root.Size};\n        height: calc(100vh - ${Root.Nav.Size});\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n    }\n  }\n\n  .txt-caption {\n    font-size: 1.4rem;\n    font-weight: bold;\n    color: ${Theme.Color.Slate};\n    display: block;\n    margin-bottom: calc(${Theme.Base.Size.Sm});\n  }\n`;\n\nexport default StickyScrollSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyScrollSection Component:\n// Desired outcome: https://www.dropbox.com/s/brll80qg306ywmk/Screenshot%202019-05-06%2015.01.12.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\nimport Block from 'components/library/Block';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport StickyScrollSectionStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// Render Element\nconst StickyScrollSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  Content,\n  Gallery,\n  GalleryQueries,\n  Gutter,\n  Flex,\n  Button,\n}) => (\n  <StickyScrollSectionStyle\n    Style={Style}\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <ReleaseOverflow />\n    <StickyScrollSectionStyle.Inner Gutter={Gutter}>\n      <StickyScrollSectionStyle.Content Flex={Flex} className=\"sticky-section\">\n        <Block Padding={[0, 1, 0, 1]} className=\"sticky-block\">\n          <span className=\"txt-caption\">{Content.Subheadline}</span>\n          <h2>{Content.Headline}</h2>\n          <p className=\"p-md\">{Content.Body}</p>\n\n          {/* Check if a Btn exists, display if so. */}\n          {Button ? (\n            <Btn\n              Label={Button.Label}\n              BgColor={Button.BgColor}\n              TextColor={Button.TextColor}\n              Destination={Button.Destination}\n              IconPosition=\"left\"\n              IconClass={Button.IconClass ? Button.IconClass : null}\n              IconFas\n            />\n          ) : null}\n        </Block>\n        <Block Padding={[0, 1, 0, 1]}>\n          {Gallery\n            ? Gallery.map((Img, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgMatch src={Img.Src} AltText={Img.Alt} />\n                  </div>\n                );\n              })\n            : null}\n          {GalleryQueries\n            ? GalleryQueries.map((query, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgQuery src={query.Fluid} AltText={query.Alt} />\n                  </div>\n                );\n              })\n            : null}\n        </Block>\n      </StickyScrollSectionStyle.Content>\n    </StickyScrollSectionStyle.Inner>\n  </StickyScrollSectionStyle>\n);\n\nexport default StickyScrollSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n"],"sourceRoot":""}