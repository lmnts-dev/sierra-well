{"version":3,"sources":["webpack:///./src/components/library/PageTabs/styles.scss.js","webpack:///./src/components/library/PageTabs/index.js","webpack:///./src/templates/Location/Components/LocationPageWrapper/index.js","webpack:///./src/templates/Location/Landing/layout.js","webpack:///./src/templates/Location/Landing/index.js","webpack:///./src/components/library/Block/styles.scss.js","webpack:///./src/components/library/Block/index.js","webpack:///./src/components/library/Section/SlideSection/styles.scss.js","webpack:///./src/components/library/Section/SlideSection/index.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/components/core/WrapperControl/index.js","webpack:///./src/components/library/Hero/styles.scss.js","webpack:///./src/components/library/Section/WidgetSection/styles.scss.js","webpack:///./src/components/library/Section/WidgetSection/index.js","webpack:///./src/components/library/Hero/index.js","webpack:///./src/components/library/Section/SimpleSection/styles.scss.js","webpack:///./src/components/library/Section/SimpleSection/index.js","webpack:///./src/components/library/Hero/SimpleHero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/index.js","webpack:///./src/components/library/Breadcrumb/styles.scss.js","webpack:///./src/components/library/Breadcrumb/index.js","webpack:///./src/components/library/Widgets/Sidebar/Default/styles.scss.js","webpack:///./src/components/library/Widgets/Sidebar/Default/index.js","webpack:///./src/components/Library/Sidebar/styles.scss.js","webpack:///./src/components/Library/Sidebar/index.js","webpack:///./src/templates/SubLevelPage/styles.scss.js","webpack:///./src/templates/SubLevelPage/index.js","webpack:///./src/templates/Learn/Transformer/index.js","webpack:///./src/components/library/Section/MasonrySection/styles.scss.js","webpack:///./src/components/library/Section/MasonrySection/index.js","webpack:///./src/components/library/Section/index.js","webpack:///./src/components/library/SocialStrip/styles.scss.js","webpack:///./src/components/library/SocialStrip/index.js","webpack:///./src/components/library/QuestionListings/styles.scss.js","webpack:///./src/components/library/QuestionListings/index.js","webpack:///./src/templates/Question/Transformer/index.js","webpack:///./src/components/library/HeroStrip/styles.scss.js","webpack:///./src/components/library/HeroStrip/index.js","webpack:///./src/components/library/Section/SplitSection/styles.scss.js","webpack:///./src/components/library/Section/SplitSection/index.js","webpack:///./src/components/library/QuestionFooter/styles.scss.js","webpack:///./src/components/library/QuestionFooter/index.js","webpack:///./src/components/library/SuggestionList/styles.scss.js","webpack:///./src/components/library/SuggestionList/index.js","webpack:///./src/templates/Location/Transformer/index.js","webpack:///./src/components/library/Castle/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/index.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/index.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/styles.scss.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/index.js","webpack:///./src/components/library/Section/StickyScrollSection/styles.scss.js","webpack:///./src/components/library/Section/StickyScrollSection/index.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/index.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/index.js","webpack:///./src/components/library/Castle/index.js","webpack:///./src/components/library/SimpleList/styles.scss.js","webpack:///./src/components/library/SimpleList/index.js","webpack:///./src/components/library/AwardBadge/styles.scss.js","webpack:///./src/components/library/AwardBadge/index.js","webpack:///./src/components/library/AwardHours/styles.scss.js","webpack:///./src/components/library/AwardHours/index.js","webpack:///./src/components/library/SpecialsListings/styles.scss.js","webpack:///./src/components/library/SpecialsListings/index.js"],"names":["PageTabsStyle","styled","div","_templateObject","Root","Size","props","GradientColor","hexToRGB","Padding","Button","PageTabs","_ref","List","Location","Label","BaseUrl","TextColor","Affix","react_default","a","createElement","styles_scss","className","map","item","index","destination","currentLocation","DestinationPath","slug","LocationPathWithSlash","pathname","key","Btn","AddClass","slice","BgColor","name","Destination","LocationPageWrapper","children","SpecialsPage","Headline","LocationData","LocationTheme","about","PageTheme","Layout","Color","Background","PrimaryColor","Primary","SecondaryColor","Secondary","TertiaryColor","Tertiary","SubLevelPage","SimpleHero","Flex","Block","maxWidth","geography","city","state","headline","IconClass","toLowerCase","IconPosition","IconFas","contactDetails","location","address","meta","maps","External","AwardHours","Hours","hours","time","days","Data","start_time","library_PageTabs","Tint","TintBorder","SuggestionList","nearby","Theme","Nightsky","TemplateLayout","elements","SummaryHeadlineString","summary","Components_LocationPageWrapper","SpecialsListings","PageLocation","Castle","Bricks","href","LocationLandingTemplate","_ref2","layout_TemplateLayout","__webpack_require__","d","__webpack_exports__","query","LocationLandingPage","layout","locationLandingTransformer","data","allPrismicLocation","edges","node","pageContext","Specials","BlockStyle","flex","AlignItems","Style","css","_templateObject2","JustifyContent","BgTint","Width","Base","Grid","SiteWidth","BgMatch","BgQuery","BgAlt","ImgMatch","src","AltText","ImgQuery","SlideSectionStyle","Sm","Media","Md","Black","Inner","SectionInnerStyle","Gutter","Left","Right","Content","SectionContentStyle","_templateObject3","SectionSize","SectionHeader","_templateObject4","_templateObject5","Transition","Duration","CssEase","CallToAction","_templateObject6","NextArrow","style","onClick","Object","assign","onKeyPress","role","tabIndex","Icons","Name","PrevArrow","SectionSlider","_React$Component","call","this","render","_settings","_this","slidesToShow","ArrowColor","SliderSettings","slidesToScroll","autoplay","useTransform","infinite","arrows","console","log","settings","dots","speed","autoplaySpeed","draggable","nextArrow","prevArrow","responsive","breakpoint","Fragment","Helmet","rel","type","lib_default","ref","h","slider","React","Component","SlideSection","Widgets","Header","Icon","ViewAll","SlideSection_styles_scss","IconclassName","SlideSection_SectionSlider","TextColr","Widget","Container","WidgetContent","dP","f","FProto","Function","prototype","nameRE","configurable","get","match","e","WrapperLock","createGlobalStyle","WrapperRelease","HeroInnerStyle","imgRight","imgLeft","imgTop","imgBottom","imgWidth","HeroContentStyle","FullWidth","WidgetSection","White","Slider","WidgetSection_styles_scss","HeroInner","HeroContent","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styles_scss__WEBPACK_IMPORTED_MODULE_2__","SimpleSectionStyle","FluidHeight","SimpleSection","SimpleSection_styles_scss","SimpleHeroStyle","Nav","Hero","BreadCrumb","Link","Bread","Crumbs","crumb","to","SidebarWidgetStyle","FadeIn","Radius","BgImage","TintColor","TintOpacity","Subhead","i","SidebarWidget","IconName","IconColor","gatsby_browser_entry","SidebarStyle","styles_scss_templateObject","styles_scss_templateObject2","Sidebar","Sidebar_styles_scss","Default","SubLevelPageStyle","SubLevelPage_styles_scss_templateObject","SubLevelPage_styles_scss_templateObject2","styles_scss_templateObject3","SubLevelPage_SubLevelPage","SubLevelPage_SubLevelPageContent","SubLevelPage_styles_scss","WrapperControl","Library_Sidebar","SubLevelPageContent","ItemProp","itemProp","categoryDataTransformer","categories","category","id","text","icon","Slug","uid","Breadcrumb","color_background","color_primary","color_secondary","color_tertiary","Tags","tags","tag","tag_name","tag_icon","tag_slug","MasonrySectionStyle","Columns","ColumnGap","MasonrySection","PaddingY","MasonrySection_styles_scss","SocialStripStyle","Margin","span","SocialStrip","target","QuestionCards","CategoryFilter","TagFilter","CategorySlug","TagSlug","AllCategories","QuestionSlugString","categoryMatch","categoryData","categoryFilter","matchedCategory","filter","length","categoryMap","allPrismicQuestionCategory","questionsMap","questionDataTransformer","allPrismicQuestion","Question","QuestionCategory","filteredCategory","title","coverImage","BgImageAltText","includes","Whitee","_1178841057","QuestionListings","QuestionListings_QuestionCards","question","Array","isArray","questionPost","date","author","document","cover_image","localFile","childImageSharp","fluid","shortAnswer","short_answer","longAnswer","long_answer","HeroStripStyle","ViewWidthFontSize","HeroStrip","Items","HeroStrip_styles_scss","Item","Caption","SplitSectionStyle","Site","SplitSection","SplitSection_styles_scss","BrowseCategories","categoryWidgets","widgetArray","Meta","Generic","IconSize","viewAll","unshift","Slate","_1344697354","QuestionFooter","HideCategories","QuestionFooter_BrowseCategories","SuggestionListStyle","nearby_name","nearby_slug","geo_city","geo_state","country","geo_country","status","delivery","status_delivery","store","status_store","reserveSpot","meta_reserve_spot_link","menu","meta_menu","meta_google_maps_url","phone","geo_location_address","geo_location_state","nearby_locations","about_headline","featuredSpecials","featured_specials","CastleStyle","CastleHeroStyle","CastleHero","primaryData","primary","repeatableData","items","CastleHero_styles_scss","padding","replace","split","background_color","background_image","text_color","tint_opacity","breadcrumb_url","breadcrumb_label","body_text","cta_destination","cta_label","cta_bg_color","cta_text_color","cta_icon","social_sharing","CastleFullSplitSection_styles_scss_templateObject","CastleSplitSection","CastleFullSplitSection_styles_scss","direction","image","alt","CastleSimpleSectionStyle","CastleSimpleSection_styles_scss_templateObject","CastleSimpleSection","CastleSimpleSection_styles_scss","text_alignment","CastleSplitSection_styles_scss_templateObject","CastleSplitSection_styles_scss","CastleSplitImageHero_styles_scss_templateObject","CastleSplitImageHero_styles_scss","CastlePromotionalStrip_styles_scss_templateObject","CastlePromotionalStrip_styles_scss","bg_color","caption","label","promotionalItemsTransformer","StickyScrollSectionStyle","StickyScrollSection_styles_scss_templateObject","ReleaseOverflow","StickyScrollSection_templateObject","StickyScrollSection","Gallery","GalleryQueries","StickyScrollSection_styles_scss","Subheadline","Body","Img","Src","Alt","Fluid","CastleStickyGallery_styles_scss_templateObject","CastleStickyGallery_styles_scss","Section_StickyScrollSection","subheadline","Query","galleryImgQueriesTransformer","CastleWidgetRow_styles_scss_templateObject","CastleWidgetRow","CastleWidgetRow_styles_scss","widget_destination","widget_bg_color","widget_background_image","widget_subheadline","widget_headline","widget_text_color","widget_icon_class","widget_tint_color","widget_tint_opacity","widgetContentTransformer","section_size","CastleBuilder","bricks","brick","slice_type","components_CastleHero","CastleFullSplitSection","components_CastleSplitSection","CastleSplitImageHero","CastlePromotionalStrip","CastleStickyGallery","components_CastleSimpleSection","components_CastleWidgetRow","Castle_CastleBuilder","SimpleListStyle","ul","li","SimpleList","AwardBadgeStyle","Text","AwardHoursStyle","AwardHours_styles_scss","AwardBadge","Logo","SpecialListingsStyle","SpecialsListings_templateObject","SpecialCards","allPrismicSpecial","Special","tagList","styledTagList","_2565930568","SpecialListings","SpecialsListings_styles_scss","SpecialsListings_SpecialCards"],"mappings":"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","file":"component---src-templates-location-landing-index-js-f585da57f52f0e4f621c.js","sourcesContent":["// <PageTabsStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Helpers\nimport hexToRGB from 'helpers/hexToRGB';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const PageTabsStyle = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: 100%;\n  overflow: hidden;\n  position: relative;\n\n  &:before {\n    content: '';\n    position: absolute;\n    pointer-events: none;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    width: calc(${Root.Size} / 2);\n    z-index: 3;\n    background-image: ${props =>\n      props.GradientColor\n        ? 'linear-gradient(-90deg, ' +\n          hexToRGB(props.GradientColor, 1) +\n          ',' +\n          hexToRGB(props.GradientColor, 0.000001) +\n          ')'\n        : 'pink'};\n\n    /* hexToRGB(props.GradientColor, 1) */\n\n    /* background-image: linear-gradient(\n      -90deg,\n      rgba(25d5,255,0, 1) 20%,\n      rgba(25d5,255,0, 0) 100%\n    ); */\n  }\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n\n  ul {\n    display: block;\n    width: 100%;\n    max-width: 100%;\n    word-wrap: none;\n    white-space: nowrap;\n    overflow-x: auto;\n    padding: calc(${Root.Size} / 4) 0;\n\n    li {\n      display: inline-block;\n      margin-right: calc(${Root.Size});\n      font-size: 1.5rem;\n\n      .btn {\n        position: relative;\n        left: 0;\n        .btn-inner {\n          height: calc(${Root.Button.Size} * 0.7);\n          font-size: 1.8rem;\n          font-weight: normal;\n          padding: 0;\n          box-shadow: none;\n          opacity: 0.6;\n\n          &:hover {\n            box-shadow: none;\n            opacity: 1;\n          }\n        }\n\n        &.active {\n          .btn-inner {\n            font-weight: bold;\n            opacity: 1;\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default PageTabsStyle;\n//////////////////////////////////////////////////////////////////////\n","// PageTabs Component:\n// This is for listing out suggestions with an optional label in the front.\n// Reference: https://www.dropbox.com/s/qvn6rohf52unkpv/Screenshot%202019-05-02%2017.19.11.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Styles\nimport PageTabsStyle from './styles.scss';\n\n// Components\nimport Btn from 'components/library/Btn/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Our nearby locations component\nconst PageTabs = ({\n  List,\n  Label,\n  Location,\n  BaseUrl,\n  TextColor,\n  Padding,\n  Affix,\n}) => {\n  return (\n    <PageTabsStyle className=\"page-tabs\" Padding={Padding}>\n      <ul>\n        {List.map((item, index) => {\n          // Creating slugs.\n          const DestinationPath = Affix\n            ? BaseUrl + item.slug + Affix\n            : BaseUrl + item.slug;\n          const LocationPath = Location.pathname;\n          const LocationPathWithSlash = Location.pathname + '/';\n\n          // Helper function to match our locations.\n          function matchPath(destination, currentLocation) {\n            // If location & destination match:\n            if (destination == currentLocation) {\n              let className = 'active';\n              return className;\n            } else {\n              // Check and see if our destination matches without the\n              // last `/` of the url. I.e. `locations/reno vs locations/reno/`\n              if (destination == currentLocation.slice(0, -1)) {\n                let className = 'active';\n                return className;\n              } else {\n                // Then inactive:\n                let className = 'inactive';\n                return 'inactive';\n              }\n            }\n          }\n\n          // Return PageTabs.\n          return (\n            <li key={index}>\n              <Btn\n                AddClass={matchPath(DestinationPath, LocationPathWithSlash)}\n                BgColor=\"none\"\n                Label={item.name}\n                Destination={DestinationPath}\n                TextColor={TextColor}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </PageTabsStyle>\n  );\n};\n\nexport default PageTabs;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// templates/Learn.js:\n// This is the template for Learn pages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Layout from 'components/core/Layout';\nimport { SubLevelPageContent, SubLevelPage } from 'templates/SubLevelPage';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport AwardHours from 'components/library/AwardHours';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport SimpleSection from 'components/library/Section/SimpleSection';\nimport SlideSection from 'components/library/Section/SlideSection';\nimport QuestionListings from 'components/library/QuestionListings';\n\n//// Misc. Components\nimport Bread from 'components/library/Breadcrumb';\nimport SocialStrip from 'components/library/SocialStrip';\nimport QuestionFooter from 'components/library/QuestionFooter';\nimport Btn from 'components/library/Btn/';\nimport SuggestionList from 'components/library/SuggestionList';\nimport PageTabs from 'components/library/PageTabs';\nimport SimpleList from 'components/library/SimpleList';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// LocationPageWrapper component for page theming.\nconst LocationPageWrapper = ({\n  children,\n  Headline,\n  SpecialsPage,\n  LocationData,\n  Location,\n}) => {\n  const LocationTheme = LocationData.about.PageTheme;\n\n  return (\n    <Layout\n      BgColor={LocationTheme.Color.Background}\n      PrimaryColor={LocationTheme.Color.Primary}\n      SecondaryColor={LocationTheme.Color.Secondary}\n      TertiaryColor={LocationTheme.Color.Tertiary}\n    >\n      <SubLevelPage\n        BgColor={LocationTheme.Color.Background}\n        PrimaryColor={LocationTheme.Color.Primary}\n        SecondaryColor={LocationTheme.Color.Secondary}\n        TertiaryColor={LocationTheme.Color.Tertiary}\n      >\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[3, 1, 1.45, 1]}\n          Flex=\"row\"\n          TextColor={LocationTheme.Color.Primary}\n        >\n          <Block maxWidth={0.5}>\n            {/* <Bread\n              Crumbs={[\n                {\n                  Destination: 'locations/',\n                  Label: 'Locations',\n                },\n                {\n                  Destination: 'locations/',\n                  Label: LocationData.geography.state,\n                },\n                {\n                  Destination:\n                    'locations/' +\n                    LocationData.geography.state.toLowerCase() +\n                    '/' +\n                    LocationData.slug,\n                  Label: LocationData.name,\n                },\n              ]}\n              TextColor={LocationTheme.Color.Primary}\n            /> */}\n            {SpecialsPage ? (\n              <h1 className=\"h2\">\n                Cannabis specials & deals in {LocationData.geography.city},{' '}\n                {LocationData.geography.state}.\n              </h1>\n            ) : (\n              <h1 className=\"h2\">{LocationData.about.headline}</h1>\n            )}\n            <Btn\n              IconClass=\"plus\"\n              Label=\"View Menu\"\n              BgColor={LocationTheme.Color.Primary}\n              TextColor={LocationTheme.Color.Tertiary}\n              Destination={\n                '/menu/' +\n                LocationData.geography.state.toLowerCase() +\n                '/' +\n                LocationData.slug\n              }\n              IconPosition=\"left\"\n              IconFas\n            />\n            <Btn\n              AddClass=\"btn-secondary\"\n              IconClass=\"map-marker-alt\"\n              Label={LocationData.contactDetails.location.address}\n              BgColor=\"none\"\n              TextColor={LocationTheme.Color.Tertiary}\n              Destination={LocationData.meta.maps}\n              IconPosition=\"left\"\n              External\n              IconFas\n            />\n            {/* <SocialStrip\n              Margin={[0.5, 0, 0, 0]}\n              Location={Location}\n              TextColor={LocationTheme.Color.Primary}\n            /> */}\n          </Block>\n          <Block Flex=\"row\" maxWidth={0.5}>\n            <AwardHours\n              TextColor={LocationTheme.Color.Primary}\n              Hours={LocationData.contactDetails.hours.map((time, index) => {\n                return {\n                  Label: time.days,\n                  Data: time.start_time,\n                };\n              })}\n            />\n          </Block>\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[0, 1, 0, 1]}\n          Flex=\"column\"\n          TextColor={LocationTheme.Color.Primary}\n        >\n          <PageTabs\n            Location={Location}\n            BaseUrl={\n              '/locations' +\n              '/' +\n              LocationData.geography.state.toLowerCase() +\n              '/' +\n              LocationData.slug +\n              '/'\n            }\n            List={[\n              { name: 'About', slug: '' },\n              { name: 'Specials', slug: 'specials' },\n              { name: 'Menu', slug: 'menu' },\n            ]}\n            TextColor={LocationTheme.Color.Primary}\n            Padding={[0, 0, 0, 0]}\n          />\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[0, 1, 0, 1]}\n          Flex=\"column\"\n          TextColor={LocationTheme.Color.Primary}\n          Tint={0}\n          TintBorder\n        >\n          <SuggestionList\n            BaseUrl={\n              '/locations' +\n              '/' +\n              LocationData.geography.state.toLowerCase() +\n              '/' +\n              LocationData.slug +\n              '/'\n            }\n            List={LocationData.nearby}\n            Affix=\"/menu\"\n            Label=\"Nearby\"\n            TextColor={LocationTheme.Color.Primary}\n            GradientColor={LocationTheme.Color.Background}\n            Padding={[0, 0, 0, 0]}\n          />\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        {/* Begin page content. */}\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n        <SubLevelPageContent\n          BgColor={Theme.Color.Background}\n          TextColor={Theme.Color.Nightsky}\n        >\n          {/* ///////////// */}\n\n          {/* ///////////// */}\n\n          {children}\n\n          {/* ///////////// */}\n\n          {/* ///////////// */}\n        </SubLevelPageContent>\n        {/* End page content. */}\n      </SubLevelPage>\n    </Layout>\n  );\n};\n\nexport default LocationPageWrapper;\n","// templates/Learn.js:\n// This is the template for Learn pages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport SpecialsListings from 'components/library/SpecialsListings';\n\n// Template Specific Components\nimport LocationPageWrapper from '../Components/LocationPageWrapper';\n\n// Castle.js by L&M\nimport Castle from 'components/library/Castle';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// TemplateLayout Component to pass data where it needs to go for\n// the theming of the hero as well as the LearnSection and what\n// to display in those cards.\nconst TemplateLayout = ({\n  LocationData,\n  Location,\n  Headline,\n  SpecialsPage,\n  elements,\n}) => {\n  // Build our automatic summary headline.\n  let SummaryHeadlineString =\n    LocationData.name +\n    // eslint-disable-next-line\n    \"'s leading cannabis dispensary — where humans come first.\";\n\n  // Check if a headline exists. If it does, display it. If it doesn't, use SummaryHeadlineString.\n  let SummaryHeadline =\n    LocationData.about.summary.headline != ''\n      ? LocationData.about.summary.headline\n      : SummaryHeadlineString;\n\n  if (SpecialsPage == true) {\n    return (\n      <LocationPageWrapper\n        Headline={Headline}\n        LocationData={LocationData}\n        Location={Location}\n        SpecialsPage={SpecialsPage}\n      >\n        <SpecialsListings\n          BgColor={LocationData.about.PageTheme.Color.Background}\n          TextColor={LocationData.about.PageTheme.Color.Primary}\n          LocationData={LocationData}\n          PageLocation={Location}\n        />\n        {/* ///////////// */}\n      </LocationPageWrapper>\n    );\n  } else {\n    return (\n      <LocationPageWrapper\n        Headline={Headline}\n        LocationData={LocationData}\n        Location={Location}\n        SpecialsPage={SpecialsPage}\n      >\n        {/* Check if elements exist. If so, run Castle. If not, display nothing. */}\n        {elements ? (\n          <Castle Bricks={elements} Location={Location.href} />\n        ) : null}\n\n        {/* ///////////// */}\n      </LocationPageWrapper>\n    );\n  }\n};\n\n// The Template itself. Where it all begins.\nconst LocationLandingTemplate = ({\n  LocationData,\n  Location,\n  elements,\n  SpecialsPage,\n}) => {\n  return (\n    <TemplateLayout\n      LocationData={LocationData}\n      Location={Location}\n      elements={elements}\n      SpecialsPage={SpecialsPage}\n    />\n  );\n};\n\nexport default LocationLandingTemplate;\n","// templates/Location/Landing/index.js:\n// This is the Location Landing page.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Templates\nimport LocationLandingTemplate from './layout';\n\n// Transformers\nimport { locationLandingTransformer } from 'templates/Location/Transformer';\n\n// Load Castle Fragments\nimport 'components/library/Castle';\n\n// Data\nimport { graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst LocationLandingPage = props => {\n  return (\n    <LocationLandingTemplate\n      LocationData={\n        locationLandingTransformer(props.data.allPrismicLocation.edges[0].node)\n          .edges.node\n      }\n      elements={props.data.allPrismicLocation.edges[0].node.data.elements}\n      Location={props.location}\n      SpecialsPage={props.pageContext.Specials}\n      Headline={\n        locationLandingTransformer(props.data.allPrismicLocation.edges[0].node)\n          .edges.node.about.headline\n      }\n    />\n  );\n};\n\nexport default LocationLandingPage;\n\n// GraphQL Queries\n/////////////////////////////////////////////////////////////////////\n\n// The post template's GraphQL query. Notice the slug\n// variable which is passed in. We set this on the page\n// context in gatsby-node.js.\n//\n// All GraphQL queries in Gatsby are run at build-time and\n// loaded as plain JSON files so have minimal client cost.\nexport const query = graphql`\n  query($Id: String!) {\n    allPrismicLocation(filter: { id: { eq: $Id } }) {\n      edges {\n        node {\n          id\n          tags\n          uid\n\n          # Load our Castle Component data.\n          ...PrismicLocationElementsHeroData\n          ...PrismicLocationElementsFullSplitSectionData\n          ...PrismicLocationElementsSimpleSectionData\n          ...PrismicLocationElementsSplitSectionData\n          ...PrismicLocationElementsStickyGalleryData\n          ...PrismicLocationElementsSplitImageHeroData\n          ...PrismicLocationElementsPromotionalStripData\n          ...PrismicLocationElementsWidgetRowData\n\n          data {\n            name {\n              text\n            }\n            status_delivery\n            status_store\n            geo_city\n            geo_state\n            geo_country\n            geo_location_address\n            geo_location_state\n            phone\n            featured_specials {\n              label\n              caption\n              destination\n            }\n            hours {\n              days\n              start_time\n              end_time\n            }\n            meta_reserve_spot_link {\n              url\n            }\n            meta_menu {\n              url\n            }\n            meta_google_maps_url {\n              url\n            }\n            nearby_locations {\n              nearby_name\n              nearby_slug\n              color_background\n              color_primary\n              color_secondary\n              color_tertiary\n            }\n            about_headline {\n              text\n            }\n            color_background\n            color_primary\n            color_secondary\n            color_tertiary\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Block> Styles:\n// This is the primary column component.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\nexport const BlockStyle = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.flex : 'column')};\n  position: relative;\n  flex-shrink: 1;\n  ${props => (props.BgColor ? 'background: ' + props.BgColor + ';' : null)}\n  ${props => (props.TextColor ? 'color: ' + props.TextColor + ';' : null)}\n  \n  /* Item Alignment. We are aligning items */\n  /* 'stretch' by default. */\n  ${props =>\n    props.AlignItems ? 'align-items: ' + props.AlignItems + ';' : null}\n\n  /* Centered Style */\n  ${props =>\n    props.Style == 'centered' &&\n    css`\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto;\n\n      p,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        text-align: center;\n        width: 100%;\n      }\n\n      .btn {\n        margin: 0 auto;\n      }\n\n      .block-content {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n      }\n    `}\n\n  /* The block content. */\n  .block-content {\n    z-index: 2;\n    margin: 0 auto;\n    width: 100%;\n    ${props => (props.JustifyContent ? 'display:flex' : null)};\n    ${props =>\n      props.JustifyContent\n        ? 'justify-content: ' + props.JustifyContent + ';'\n        : null}\n\n    p {\n      max-width: 80%;\n    }\n  }\n\n  /* Background images with Gatsby-Img */\n  .block-img {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n\n    .img {\n      flex: 1;\n    }\n  }\n\n  /* Width Multiple */\n    ${props =>\n      props.Width ? 'width: ' + props.Width * 100 + '%;' : 'flex: 1;'}\n  max-width: ${props =>\n    props.maxWidth\n      ? 'calc(' + Theme.Base.Grid.SiteWidth + ' * ' + props.maxWidth + ')'\n      : Theme.Base.Grid.SiteWidth};\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n`;\n\nexport default BlockStyle;\n//////////////////////////////////////////////////////////////////////\n","// <Block> Component:\n// This is the sitewide block style of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Styles\nimport BlockStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Block = ({\n  children,\n  className,\n  Style,\n  maxWidth,\n  Width,\n  Padding,\n  AlignItems,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  BgTint,\n  BgColor,\n  TextColor,\n  JustifyContent,\n  Flex,\n}) => (\n  <BlockStyle\n    className={className ? className + ' block' : 'block'}\n    Width={Width}\n    maxWidth={maxWidth}\n    Style={Style}\n    Padding={Padding}\n    AlignItems={AlignItems ? AlignItems : false}\n    JustifyContent={JustifyContent ? JustifyContent : false}\n    BgTint={BgTint}\n    BgColor={BgColor}\n    TextColor={TextColor}\n    Flex={Flex}\n  >\n    {/* Block Content */}\n    {children ? <div className=\"block-content\">{children}</div> : null}\n\n    {/* For Background Images */}\n    {BgMatch ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n\n    {/* For Background Images with ImgQuery */}\n    {BgQuery ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgQuery src={BgQuery} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n  </BlockStyle>\n);\n\nexport default Block;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SlideSectionStyle = styled.div`\n  width: 100%;\n  overflow: hidden;\n\n  /* Slick styles */\n  .slick-slider {\n    padding-bottom: ${Theme.Base.Size.Sm};\n    margin-bottom: ${Theme.Base.Size.Sm};\n\n    .slick-slide {\n      &:first-child {\n        .widget {\n          padding-left: 0;\n        }\n      }\n    }\n    .slick-list {\n      overflow: visible;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      z-index: 400;\n      background: rgba(0, 0, 0, 0);\n\n      @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n        top: calc((${Root.Size} * 1.8) * -1);\n        width: calc(${Root.Size} * 1.5);\n        height: calc(${Root.Size} * 1.5);\n      }\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc((${Root.Size} * 0.75) + (${Root.Size} * 0.25));\n\n        @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n          right: calc((${Root.Size} * 1.5) + (${Root.Size} * 0.25));\n        }\n      }\n\n      &.slick-next {\n        right: 0;\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n\n    .slick-dots {\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: auto;\n      padding: 0;\n      margin: 0;\n\n      @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n        bottom: calc((${Root.Size} * .3) * -1);\n      }\n\n      li {\n        margin: 0;\n        padding: 0;\n        width: 10px;\n        height: 10px;\n        margin-right: 5px;\n\n        button {\n          margin: 0;\n          padding: 0;\n          position: relative;\n          width: 10px;\n          height: 10px;\n          margin-right: 5px;\n\n          &:before {\n            content: '';\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            width: 7px;\n            height: 7px;\n            border: 1px solid ${Theme.Color.Black};\n            border-radius: 50%;\n          }\n        }\n      }\n    }\n  }\n`;\n\nSlideSectionStyle.Inner = styled(SectionInnerStyle)`\n  width: 100%;\n  padding-bottom: 0;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: 0'};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n    padding-left: ${Root.Grid.Gutter.Left};\n    padding-right: ${Root.Grid.Gutter.Right};\n  }\n`;\n\nSlideSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: column;\n\n  .widget {\n    padding: calc(${Root.Size} / 6);\n    height: ${props =>\n      props.SectionSize\n        ? 'calc(' + Root.Size + '*' + props.SectionSize + ')'\n        : 'calc(' + Root.Size + '* 3)'};\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      padding: calc(${Root.Size} / 3) calc(${Root.Size} / 4);\n      height: ${props =>\n        props.SectionSize\n          ? 'calc((' + Root.Size + '* 3) * ' + props.SectionSize + ')'\n          : 'calc((' + Root.Size + '* 3) * 3)'};\n    }\n  }\n`;\n\nSlideSectionStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n`;\n\nSlideSectionStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Nightsky)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  i {\n    margin-right: ${Theme.Base.Size.Sm};\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n`;\n\nSlideSectionStyle.CallToAction = styled.div`\n  display: flex;\n\n  .btn {\n    background-color: rgba(0, 0, 0, 0);\n    color: ${Theme.Color.Black};\n\n    svg {\n      fill: ${Theme.Color.Black};\n      border: ${Theme.Color.Black};\n    }\n\n    i {\n      color: ${Theme.Color.Black};\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nexport default SlideSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SlideSection.js:\n//\n// Usage:\n// <SlideSection\n// Widgets={Widgets}\n// SectionSize=\"Large\"\n// SlidesToShow={4}\n// Header=\"Headline\"\n// ViewAll={['/', 'View All']}\n// />\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\nimport { Link } from 'gatsby';\n\n// Components\nimport WidgetContainer from 'components/library/Widgets/Container/';\nimport Btn from 'components/library/Btn';\nimport Icon from 'elements/Icons';\n\n// Constants\nimport { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport SlideSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Section Slider:\n// For displaying widgets within a SlideSection.\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The Slider itself.\nclass SectionSlider extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n\n    // Get any theming.\n    const ArrowColor = this.props.ArrowColor;\n\n    // Get any custom Slider Settings we want to pass.\n    const slidesToShow = this.props.SliderSettings.slidesToShow\n      ? this.props.SliderSettings.slidesToShow\n      : 1;\n    const slidesToScroll = this.props.SliderSettings.slidesToScroll\n      ? this.props.SliderSettings.slidesToScroll\n      : 1;\n    const autoplay = this.props.SliderSettings.autoplay\n      ? this.props.SliderSettings.autoplay\n      : false;\n    const useTransform = this.props.SliderSettings.useTransform\n      ? this.props.SliderSettings.useTransform\n      : true;\n    const infinite = this.props.SliderSettings.infinite\n      ? this.props.SliderSettings.infinite\n      : false;\n    const arrows = this.props.SliderSettings.arrows\n      ? this.props.SliderSettings.arrows\n      : false;\n\n    console.log(useTransform);\n\n    // Pass into Slick Settings.\n    const settings = {\n      dots: true,\n      speed: 550,\n      arrows: false,\n      autoplaySpeed: 4000,\n      slidesToShow: slidesToShow,\n      slidesToScroll: slidesToScroll,\n      autoplay: autoplay,\n      infinite: infinite,\n      draggable: true,\n      arrows: arrows,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n      useTransform: useTransform,\n      responsive: [\n        {\n          breakpoint: Base.Media.Width.Md + 'px',\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n          },\n        },\n      ],\n    };\n\n    return (\n      <>\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n        <Slider ref={h => (this.slider = h)} {...settings}>\n          {this.props.children}\n        </Slider>\n      </>\n    );\n  }\n}\n\n// The SubLevel Page Itself\nconst SlideSection = ({\n  Widgets,\n  SectionSize,\n  SliderSettings,\n  Header,\n  Icon,\n  ViewAll,\n  Theme,\n  Gutter,\n}) => (\n  <SlideSectionStyle className=\"slide-section\">\n    <SlideSectionStyle.Inner Gutter={Gutter} className=\"slide-section-inner\">\n      <SlideSectionStyle.Content SectionSize={SectionSize}>\n        <SlideSectionStyle.SectionHeader>\n          <SlideSectionStyle.Headline TextColor={Theme.TextColor}>\n            {Icon ? <i className={'fas fa-' + Icon} /> : null}\n            {Header ? <h2>{Header}</h2> : null}\n          </SlideSectionStyle.Headline>\n          {ViewAll ? (\n            <SlideSectionStyle.CallToAction>\n              <Btn\n                Destination={ViewAll[0]}\n                BgColor=\"inherit\"\n                Label={ViewAll[1]}\n                IconclassName=\"carat\"\n              />\n            </SlideSectionStyle.CallToAction>\n          ) : null}\n        </SlideSectionStyle.SectionHeader>\n\n        <SectionSlider\n          SliderSettings={SliderSettings}\n          ArrowColor={Theme.TextColr}\n        >\n          {/* Map our Widgets data. */}\n          {Widgets.map((Widget, index) => {\n            // Pass our Widgets data to our WidgetContainers\n            return (\n              <WidgetContainer\n                key={index}\n                WidgetContent={Widget.WidgetContent}\n                Flex={Widget.Flex ? Widget.Flex : null}\n              />\n            );\n          })}\n        </SectionSlider>\n      </SlideSectionStyle.Content>\n    </SlideSectionStyle.Inner>\n  </SlideSectionStyle>\n);\n\nexport default SlideSection;\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","// WrapperControl.js:\n// For controlling our `.wrapper` class app-wide.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Lock Wrapper Scroll\nexport const WrapperLock = createGlobalStyle`\n  html, body {\n    overflow: hidden;\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: visible !important; \n      overflow: visible;\n      \n      .wrapper {\n        overflow-y: hidden;\n      }\n    }\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow: hidden;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow: hidden; \n      overflow-y: hidden;\n    }\n  }\n\n  .slick-slider {\n    touch-action: none !important;\n  }\n`;\n\n// Release Wrapper Scroll\nexport const WrapperRelease = createGlobalStyle`\n  html, body {\n      overflow: auto;\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow-y: visible;\n      height: auto;\n      position: absolute;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: hidden;\n      position: absolute;\n    }\n  }\n`;\n\n// Wrapper Flex Reseet\nexport const WrapperFlexStart = createGlobalStyle`\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      justify-content: flex-start;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      justify-content: space-between;\n    }\n  }\n`;\n","// MenuHero Styles:\n// These are nearly identical to the Section base styles.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInnerStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  position: relative;\n  overflow: hidden;\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : 'padding-top: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : 'padding-bottom: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ' * ' +\n        props.Padding[3] +\n        ')'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  .hero-img {\n    pointer-events: none;\n    ${props =>\n      props.imgRight || props.imgLeft || props.imgTop || props.imgBottom\n        ? 'position: absolute'\n        : null};\n    ${props => (props.imgRight ? 'right: ' + props.imgRight : null)};\n    ${props => (props.imgLeft ? 'left: ' + props.imgLeft : null)};\n    ${props => (props.imgBottom ? 'bottom: ' + props.imgBottom : null)};\n    ${props => (props.imgTop ? 'top: ' + props.imgTop : null)};\n    ${props => (props.imgWidth ? 'width: ' + props.imgWidth : null)};\n  }\n\n  .btn-secondary {\n    margin-left: calc(${Root.Size} / 4);\n  }\n`;\n\nexport const HeroContentStyle = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: ${props =>\n    props.JustifyContent ? props.JustifyContent : 'flex-start'};\n  max-width: ${props => (props.FullWidth ? '100%' : Theme.Base.Grid.SiteWidth)};\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// WidgetSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nWidgetSection.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  min-height: 400px;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n\n  @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n    padding-left: ${Root.Grid.Gutter.Left};\n    padding-right: ${Root.Grid.Gutter.Right};\n  }\n`;\n\nWidgetSection.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-wrap: wrap;\n\n  .widget {\n    width: 25%;\n    padding: calc(${Root.Size} / 6);\n    &:first-child {\n      padding-left: 0;\n    }\n    &:last-child {\n      padding-right: 0;\n    }\n\n    @media (max-width: calc(${Theme.Base.Media.Width.Md} * 1.5)) {\n      width: 50%;\n      flex: unset;\n      min-height: 150px;\n\n      &:nth-child(odd) {\n        padding-left: 0;\n      }\n      &:nth-child(even) {\n        padding-right: 0;\n      }\n    }\n  }\n`;\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// WidgetSection Component:\n// For displaying inline Widgets on Subpages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Widgets Container\nimport WidgetContainer from 'components/library/Widgets/Container/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport WidgetSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = ({ BgColor, Widgets, Slider, Gutter }) => (\n  <WidgetSectionStyle BgColor={BgColor}>\n    <WidgetSectionStyle.Inner Gutter={Gutter}>\n      <WidgetSectionStyle.Content className=\"widget-section\">\n        {/* Map our Widgets data. */}\n        {Widgets.map((Widget, index) => {\n          // Pass our Widgets data to our WidgetContainers\n          return (\n            <WidgetContainer\n              key={index}\n              WidgetContent={Widget.WidgetContent}\n              Flex={Widget.Flex ? Widget.Flex : null}\n            />\n          );\n        })}\n      </WidgetSectionStyle.Content>\n    </WidgetSectionStyle.Inner>\n  </WidgetSectionStyle>\n);\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Hero Component:\n// This is a helper component containing base\n// Hero styles shared across all Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { HeroInnerStyle, HeroContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInner = ({\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  Size,\n  Flex,\n  Padding,\n  children,\n  JustifyContent,\n}) => (\n  <HeroInnerStyle\n    Size={Size ? Size : false}\n    Padding={Padding ? Padding : false}\n    imgRight={imgRight ? imgRight : false}\n    imgLeft={imgLeft ? imgLeft : false}\n    imgBottom={imgBottom ? imgBottom : false}\n    imgTop={imgTop ? imgTop : false}\n    imgWidth={imgWidth ? imgWidth : false}\n  >\n    <HeroContentStyle\n      className=\"hero-content\"\n      JustifyContent={JustifyContent}\n      Flex={Flex}\n    >\n      {children}\n    </HeroContentStyle>\n  </HeroInnerStyle>\n);\n\nexport const HeroContent = ({ children, Flex }) => (\n  <HeroContentStyle Flex={Flex} className=\"hero-content\">\n    {children}\n  </HeroContentStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SimpleSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nSimpleSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n    .img {\n      height: 100%;\n    }\n  }\n`;\n\nSimpleSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n`;\n\nexport default SimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SimpleSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  FluidHeight,\n  Gutter,\n  Flex,\n  children,\n}) => (\n  <SimpleSectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <SimpleSectionStyle.Inner\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <SimpleSectionStyle.Content\n        FluidHeight={FluidHeight}\n        Flex={Flex}\n        className=\"simple-section\"\n      >\n        {children}\n      </SimpleSectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </SimpleSectionStyle.Inner>\n  </SimpleSectionStyle>\n);\n\nexport default SimpleSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SimpleHero Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHeroStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  z-index: 1;\n  position: relative;\n  /* margin-top: calc(${Root.Nav.Size} * -1); */\n  background: ${props => (props.Background ? props.Background : 'none')};\n  background-size: cover;\n  background-position: center center;\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n  align-self: flex-start;\n  justify-self: flex-start;\n\n  /* Background Tint */\n  ${props =>\n    props.Tint\n      ? `\n  &.tint {\n    &:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      top: 0;\n      background-color: rgba(0,0,0,` +\n        props.Tint +\n        `);\n    }\n    .inner {\n      z-index: 500;\n    }\n  }\n  `\n      : null}\n  \n  /* Background Tint */\n  ${props =>\n    props.TintBorder\n      ? `\n      &:after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;      \n      top: 0;\n      height: 1px;\n      z-index: 5;\n      background-color: rgba(0,0,0, 0.05);\n    }\n  `\n      : null}\n\n  /* Block Spacing */\n  .block {\n    &:first-child {\n      padding-right: calc(${Root.Size} / 2);\n    }\n    &:second-child {\n      padding-left: calc(${Root.Size} / 2);\n    }\n  }\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n    height: 100%;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img, .img {\n      height: 100%;\n    }\n    .hero-img, .gatsby-image-wrapper {\n      position: unset !important;\n    }\n  }\n`;\n\nexport default SimpleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Helpers\nimport { HeroInner } from './../../Hero';\n\n// Styles\nimport SimpleHeroStyle from './styles.scss';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHero = ({\n  Background,\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  TextColor,\n  Tint,\n  Padding,\n  Size,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  Flex,\n  JustifyContent,\n  TintBorder,\n  children,\n}) => (\n  <SimpleHeroStyle\n    Background={Background}\n    TextColor={TextColor}\n    Tint={Tint}\n    TintBorder={TintBorder}\n    className={Tint ? 'tint' : null}\n  >\n    <HeroInner\n      Size={Size ? Size : false}\n      Padding={Padding}\n      imgRight={imgRight ? imgRight : false}\n      imgLeft={imgLeft ? imgLeft : false}\n      imgBottom={imgBottom ? imgBottom : false}\n      imgTop={imgTop ? imgTop : false}\n      imgWidth={imgWidth ? imgWidth : false}\n      JustifyContent={JustifyContent}\n      className=\"inner\"\n      Flex={Flex}\n    >\n      {children}\n    </HeroInner>\n    {BgMatch ? (\n      <div className=\"section-img\">\n        <ImgMatch src={BgMatch} AltText={BgAlt} className=\"hero-img\" />\n      </div>\n    ) : null}\n    {BgQuery ? (\n      <div className=\"section-img\">\n        <ImgQuery src={BgQuery} AltText=\"Hero Alt\" className=\"hero-img\" />\n      </div>\n    ) : null}\n  </SimpleHeroStyle>\n);\n\nexport default SimpleHero;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Breadcrumb> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const BreadCrumb = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  width: 100%;\n  align-items: center;\n  transform: translateX(calc(1rem * -1.5));\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 50%;\n      left: calc((${Theme.Base.Size.Sm}) * -1);\n      transform: translateY(-50%);\n      width: 2px;\n      height: 2px;\n      border-radius: 50%;\n      background-color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    svg {\n      transform: rotate(180deg) translateX(0%);\n      transform-origin: center center;\n      width: 1rem;\n      height: 1rem;\n      fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n      transition: all 0.25s ease;\n      fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    }\n\n    &:hover {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      text-decoration: none;\n      svg {\n        transform: rotate(180deg) translateX(50%);\n      }\n    }\n  }\n`;\n\nBreadCrumb.Label = styled(Link)`\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  margin-left: calc(${Theme.Base.Size.Sm} * 1.75);\n  position: relative;\n  text-transform: capitalize;\n\n  &:first-child {\n    margin-left: 0;\n    position: relative;\n\n    &:before {\n      display: none;\n    }\n  }\n`;\n\nexport default BreadCrumb;\n//////////////////////////////////////////////////////////////////////\n","// <Bread Crumbs=\"\"> Component:\n// The breadcrumb component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport BreadCrumbStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Bread = ({ Crumbs, TextColor }) => (\n  <BreadCrumbStyle TextColor={TextColor}>\n    {Crumbs.map((crumb, index) => {\n      return (\n        <BreadCrumbStyle.Label\n          to={crumb.Destination}\n          key={index}\n        >\n          {/* // Hide back button if nested item. */}\n          {index == 0 ? (\n            <Icon className=\"svg-carat\" Name=\"carat\" TextColor={TextColor} />\n          ) : null}\n          {crumb.Label}\n        </BreadCrumbStyle.Label>\n      );\n    })}\n  </BreadCrumbStyle>\n);\n\nexport default Bread;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Widget Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Keyframes\nimport { FadeIn } from 'components/core/Transition/Keyframes';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidgetStyle = styled.div`\n  width: 100%;\n  padding-bottom: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  opacity: 0;\n  margin-top: ${Theme.Base.Size.Sm};\n  animation-fill-mode: forwards;\n  ${FadeIn};\n`;\n\nSidebarWidgetStyle.Inner = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: ${props =>\n    props.BgColor ? props.BgColor : Theme.Color.White};\n  border-radius: ${Root.Radius};\n  box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n  overflow: hidden;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  cursor: pointer;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Background Images */\n\n  ${props => {\n    if (props.BgImage)\n      return (\n        `\n        background-image: url(` +\n        props.BgImage +\n        `);\n        background-size: cover;\n        background-position: center center;\n        background-repeat: no-repeat;\n        `\n      );\n  }};\n\n  /* Tint */\n\n  ${props => {\n    if (props.TintColor || props.TintOpacity)\n      return (\n        `\n        &:before {\n          content: '';\n          position: absolute;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          right: 0;\n          background-color:` +\n        props.TintColor +\n        `;\n          opacity:` +\n        props.TintOpacity +\n        `;\n          transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n        }\n    `\n      );\n  }};\n\n  /* Links */\n  a {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    flex: 1;\n    width: 100%;\n    color: white;\n    transform: scale(1.000000001);\n    position: relative;\n    padding: ${Theme.Base.Size.Sm};\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* The Carat Icon */\n  svg {\n    position: absolute;\n    right: ${Theme.Base.Size.Sm};\n    top: ${Theme.Base.Size.Sm};\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transform: translateX(0%);\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* Hover Styles */\n  &:hover {\n    background-color: ${Theme.Color.Black};\n    color: ${Theme.Color.White};\n    box-shadow: 0 20px 30px 0 rgba(6, 10, 92, 0.21);\n\n    a {\n      text-decoration: none;\n      color: ${Theme.Color.White};\n    }\n\n    /* The Carat Icon */\n    svg {\n      transform: translateX(50%);\n      fill: ${Theme.Color.White};\n      height: 1.2rem;\n      width: 1.2rem;\n    }\n\n    /* The Widget Icon */\n    .fas {\n      color: ${Theme.Color.White};\n    }\n\n    /* Tint */\n    ${props => {\n      if (props.TintColor || props.TintOpacity)\n        return `\n        &:before {\n          opacity: 1\n        }\n    `;\n    }};\n  }\n`;\n\nSidebarWidgetStyle.Subhead = styled.div`\n  font-size: 1rem;\n  line-height: 1.2;\n`;\n\nSidebarWidgetStyle.Headline = styled.div`\n  font-size: 1.1rem;\n  line-height: 1.2;\n  font-weight: bold;\n`;\n\nSidebarWidgetStyle.Icon = styled.i`\n  position: absolute;\n  right: ${Theme.Base.Size.Sm};\n  top: ${Theme.Base.Size.Sm};\n  font-size: 1.2rem;\n  transform: scale(1.4);\n  transform-origin: top right;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  color: ${props => (props.Color ? props.Color : Theme.Color.Black)};\n`;\n\nexport default SidebarWidgetStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Default Widget.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport SidebarWidgetStyle from './styles.scss';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidget = ({\n  BgColor,\n  BgImage,\n  Headline,\n  TextColor,\n  IconName,\n  IconColor,\n  Destination,\n  TintColor,\n  TintOpacity,\n}) => (\n  <SidebarWidgetStyle className=\"widget\">\n    <SidebarWidgetStyle.Inner\n      BgColor={BgColor}\n      BgImage={BgImage}\n      TextColor={TextColor}\n      TintColor={TintColor}\n      TintOpacity={TintOpacity}\n    >\n      <Link to={Destination}>\n        <SidebarWidgetStyle.Headline>{Headline}</SidebarWidgetStyle.Headline>\n\n        {/* Pass Icon value using FontAwesome */}\n        {/* Read more: https://fontawesome.com/how-to-use/on-the-web/setup/getting-started */}\n        <SidebarWidgetStyle.Icon\n          className={'fas fa-' + IconName}\n          Color={IconColor}\n        />\n      </Link>\n    </SidebarWidgetStyle.Inner>\n  </SidebarWidgetStyle>\n);\n\nexport default SidebarWidget;\n","// Sidebar Component Styles\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SidebarStyle = styled.div`\n  position: fixed;\n  top: ${Root.Nav.Size};\n  bottom: 0;\n  height: calc(100vh - ${Root.Nav.Size});\n  display: flex;\n  z-index: 555;\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nSidebarStyle.Inner = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  padding: ${Theme.Base.Size.Sm};\n  width: ${Root.Grid.Gutter.Left};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nexport default SidebarStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Sidebar.js:\n// This is the sitewide sidebar component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport SidebarWidget from 'components/library/Widgets/Sidebar/Default';\n\n// Styles\nimport SidebarStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nconst Sidebar = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SidebarStyle>\n    <SidebarStyle.Inner>\n      <SidebarWidget\n        BgColor={Theme.Color.Primary}\n        BgImage=\"none\"\n        Headline=\"Delivery Available\"\n        TextColor={Theme.Color.White}\n        IconColor={Theme.Color.White}\n        IconName=\"car\"\n        Destination=\"/menu/delivery/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Reserve Spot\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"users\"\n        Destination=\"/menu/pick-up/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Visit\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"map-marker-alt\"\n        Destination=\"/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Chat\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"comment-alt\"\n        Destination=\"/culture\"\n      />\n      {/* <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Phone\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"phone\"\n        Destination=\"/contact\"\n      /> */}\n    </SidebarStyle.Inner>\n  </SidebarStyle>\n);\n\nexport default Sidebar;\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SubLevelPageStyle = styled.div`\n  width: 100%;\n  flex: 1;\n  display: flex;\n  flex-wrap: nowrap;\n  color: ${Theme.Color.Background};\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n`;\n\nSubLevelPageStyle.Inner = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n\nSubLevelPageStyle.Content = styled.div`\n  width: 100%;\n  flex: 1;\n  background: ${props => (props.BgColor ? props.BgColor : 'none')};\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n\n  .post-details  {\n    opacity: .4;\n    display: block;\n    margin-bottom: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default SubLevelPageStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SubLevelPage.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport Sidebar from 'components/Library/Sidebar/';\nimport { WrapperRelease } from 'components/core/WrapperControl';\n\n// Styles\nimport SubLevelPageStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nexport const SubLevelPage = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SubLevelPageStyle className=\"sub\">\n    <WrapperRelease />\n    <Sidebar\n      BgColor={BgColor}\n      PrimaryColor={PrimaryColor}\n      SecondaryColor={SecondaryColor}\n      TertiaryColor={TertiaryColor}\n    />\n    <SubLevelPageStyle.Inner className=\"sublevel-inner\">\n      {children}\n    </SubLevelPageStyle.Inner>\n  </SubLevelPageStyle>\n);\n\n// The SubLevel Page Content\nexport const SubLevelPageContent = ({\n  BgColor,\n  TextColor,\n  ItemProp,\n  children,\n}) => (\n  <SubLevelPageStyle.Content\n    TextColor={TextColor}\n    BgColor={BgColor}\n    itemProp={ItemProp}\n  >\n    {children}\n  </SubLevelPageStyle.Content>\n);\n","// Transformer:\n// This is for taking Prismic data and transforming it into something that\n// this component would like to handle. The Transformer is typically used\n// in /template/ pages where a GraphQL query from Prismic (or any data) source\n// is involved.\n//////////////////////////////////////////////////////////////////////\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { node } from 'prop-types';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Function to create our Categories Map\nexport const tagDataTransformer = tags => {\n  if (tags) {\n    let tagsMap = tags.map((tag, index) => {\n      return {\n        Name: tag.tag_name,\n        Icon: tag.tag_icon,\n        Slug: tag.tag_slug,\n      };\n    });\n\n    return tagsMap;\n  } else {\n    return null;\n  }\n};\n\n// Function to create our Categories Map\nexport const categoryDataTransformer = categories => {\n  if (categories) {\n    let categoriesMap = categories.map((category, index) => {\n      return {\n        node: {\n          id: category.node.id,\n          Name: category.node.data.name ? category.node.data.name.text : '',\n          Icon: category.node.data.icon,\n          Headline: category.node.data.headline,\n          Slug: category.node.uid,\n          Breadcrumb: {\n            Destination: '/learn/all/',\n            Label: 'All Questions',\n          },\n          PageTheme: {\n            Color: {\n              Background: category.node.data.color_background,\n              Primary: category.node.data.color_primary,\n              Secondary: category.node.data.color_secondary,\n              Tertiary: category.node.data.color_tertiary,\n            },\n          },\n          Tags: tagDataTransformer(category.node.data.tags),\n        },\n      };\n    });\n\n    return categoriesMap;\n  } else {\n    return 'null';\n  }\n};\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MasonrySecction Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst MasonrySectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n  overflow: visible;\n`;\n\nMasonrySectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n  overflow: visible;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n\n  @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n    padding-left: ${Root.Grid.Gutter.Left};\n    padding-right: ${Root.Grid.Gutter.Right};\n  }\n`;\n\nMasonrySectionStyle.Content = styled.div`\n  width: 100%;\n  position: relative;\n  margin: 0 auto;\n  overflow: visible;\n  max-width: ${Theme.Base.Grid.SiteWidth};\n\n  /* Performance fixes on Chrome & Safari\n  -webkit-backface-visibility: hidden;\n  -moz-backface-visibility: hidden;\n  -ms-backface-visibility: hidden;\n  backface-visibility: hidden;\n\n  /* Performance fixes on Chrome & Safari */\n  /* -webkit-perspective: 1000;\n  -moz-perspective: 1000;\n  -ms-perspective: 1000;\n  perspective: 1000; */\n\n  /* CSS Masonry */\n  /* Read more: https://w3bits.com/css-masonry/ */\n  /* column-width: 33%;\n  column-count: ${props => (props.Columns ? props.Columns : 3)};\n  column-gap: ${props =>\n    props.ColumnGap\n      ? ' calc(' + Root.Size + ' * ' + props.ColumnGap + ')'\n      : 'calc(' + Root.Size + '* .25)'};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    column-width: 100%;\n    column-count: 1;\n  } */\n\n\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n\n  .widget-content {\n    border-radius: ${Root.Radius};\n    box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n    position: relative;\n    overflow: hidden;\n    flex: 30%;\n    margin: calc(${Root.Size} / 5);\n    width: 30%;\n    display: flex;\n    color: ${Theme.Color.White};\n    margin-bottom: ${props =>\n      props.ColumnGap\n        ? ' calc(' + Root.Size + ' * ' + props.ColumnGap + ')'\n        : 'calc(' + Root.Size + '* .25)'};\n\n    .widget-headline {\n      margin-bottom: calc(${Root.Size} * 2);\n    }\n\n    a, i {\n      color: ${Theme.Color.White};\n    }\n    \n    svg {\n      fill: ${Theme.Color.White};\n    }\n  }\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    .widget-content {\n      flex: auto;\n      margin: calc(${Root.Size} / 5) 0;\n      width: 100%;\n    }\n  }\n`;\n\nexport default MasonrySectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// MasonrySection Component:\n// This is a component for a MasonryGrid of Widgets.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport MasonrySectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst MasonrySection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  PaddingY,\n  FluidHeight,\n  Gutter,\n  Columns,\n  ColumnGap,\n  children,\n}) => (\n  <MasonrySectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <MasonrySectionStyle.Inner\n      Size={PaddingY}\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <MasonrySectionStyle.Content\n        FluidHeight={FluidHeight}\n        className=\"masonry-section\"\n        Columns={Columns}\n        ColumnGap={ColumnGap}\n      >\n        {children}\n      </MasonrySectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </MasonrySectionStyle.Inner>\n  </MasonrySectionStyle>\n);\n\nexport default MasonrySection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Section Component:\n// This is a helper component containing base\n// Section styles shared across all Section components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { SectionInnerStyle, SectionContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const SectionInner = ({ children }) => (\n  <SectionInnerStyle>\n    <SectionContentStyle>{children}</SectionContentStyle>\n  </SectionInnerStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SocialStripStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SocialStripStyle = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Array-based margins utilizing root variable multiple. */\n  ${props =>\n    props.Margin\n      ? 'margin-top: calc(' + Root.Size + ' * ' + props.Margin[0] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-right: calc(' + Root.Size + ' * ' + props.Margin[1] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-bottom: calc(' + Root.Size + ' * ' + props.Margin[2] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-left: calc(' + Root.Size + ' * ' + props.Margin[3] + ')'\n      : null};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    margin-right: calc(${Theme.Base.Size.Md} * 0.8);\n    position: relative;\n    font-size: calc(${Root.Size} / 2);\n    width: calc(${Root.Size} / 2);\n    height: calc(${Root.Size} / 2);\n\n    span {\n      width: 100%;\n      height: auto;\n      font-size: calc(${Root.Size} / 2);\n      i {\n        font-size: calc(${Root.Size} / 2);\n      }\n    }\n\n    i {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%) scale(1.8);\n      transform-origin: center center;\n      opacity: 0;\n      border-radius: 50%;\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover {\n      &:before {\n        opacity: 0.1;\n      }\n    }\n  }\n`;\n\nSocialStripStyle.Label = styled.span`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  svg {\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nexport default SocialStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// SocialStrip Component:\n// The SocialStrip component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SocialStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SocialStrip = ({ TextColor, Location, Margin }) => (\n  <SocialStripStyle Margin={Margin} TextColor={TextColor}>\n    <a\n      href={'https://www.facebook.com/sharer.php?u=' + Location}\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"facebook\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://twitter.com/intent/tweet?url=' +\n        Location +\n        '&text=Test&via=Test&hashtags=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"twitter\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://www.linkedin.com/shareArticle?mini=true&url=' +\n        Location +\n        '&title=Test&summary=Test&source=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"linkedin\" Color={TextColor} />\n    </a>\n  </SocialStripStyle>\n);\n\nexport default SocialStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SpecialsListings> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SpecialsListingsStyle = styled.div`\n  appearance: none;\n`;\n\nexport default SpecialsListingsStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionListings Component:\n// The QuestionListings component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Transformers\nimport { questionDataTransformer } from 'templates/Question/Transformer';\nimport { categoryDataTransformer } from 'templates/Learn/Transformer';\n\n// Styles\nimport QuestionListingsStyle from './styles.scss';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst QuestionCards = ({\n  CategoryFilter,\n  TagFilter,\n  CategorySlug,\n  AllCategories,\n  TagSlug,\n}) => {\n  // Assign our strings to build our slugs.\n  const CategorySlugString = CategorySlug ? '/' + CategorySlug : '';\n  const TagSlugString = TagSlug ? '/' + TagSlug : '';\n  const QuestionSlugString = CategorySlugString + TagSlugString;\n\n  // Helper Function to match the CategoryFilter to the right Category\n  function categoryMatch(categoryData, categoryFilter) {\n    // See  if our categoryData matches our supplied categoryFilter:\n    let matchedCategory = categoryData.filter(\n      category => category.node.Slug === categoryFilter\n    );\n\n    // If it does, return the matched Category.\n    if (matchedCategory.length > 0) {\n      return matchedCategory[0].node;\n    } else {\n      return false;\n    }\n  }\n\n  return (\n    // Run the StaticQuery to get the data we need.\n    <StaticQuery\n      query={graphql`\n        query {\n\n          ## Prismic Sourcing\n\n          allPrismicQuestionCategory {\n            edges {\n              node {\n                id\n                uid\n                data {\n                  name {\n                    text\n                  }\n                  icon\n                  headline\n                  color_background\n                  color_primary\n                  color_secondary\n                  color_tertiary\n                  tags {\n                    tag_name\n                    tag_slug\n                    tag_icon\n                  }\n                }\n              }\n            }\n          }\n\n          allPrismicQuestion {\n            edges {\n              node {\n                id\n                uid\n                tags\n                data {\n                  title {\n                    text\n                  }\n                  short_answer\n                  long_answer\n                  date\n                  author {\n                    id\n                    document {\n                      id\n                      ... on PrismicPerson {\n                        data {\n                          name {\n                            html\n                            text\n                          }\n                        }\n                      }\n                    }\n                  }\n                  category {\n                    uid\n                  }\n                  cover_image {\n                    alt\n                    localFile {\n                      id\n                      childImageSharp {\n                        fluid(maxWidth: 1200) {\n                          ...GatsbyImageSharpFluid\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => {\n        const categoryMap = categoryDataTransformer(\n          data.allPrismicQuestionCategory.edges\n        );\n\n        const questionsMap = questionDataTransformer(\n          data.allPrismicQuestion.edges\n        );\n\n        // console.log('categoryMap');\n        // console.log(categoryMap);\n\n        // console.log('questionsMap');\n        // console.log(questionsMap);\n\n        // Create our PageTheme variables for each Widget.\n\n        // Map the Question data we got.\n        return (\n          <>\n            {questionsMap.map((Question, index) => {\n              let QuestionCategory = Question.node.category\n                ? Question.node.category\n                : 'none';\n\n              // console.log('QuestionCategory');\n              // console.log(QuestionCategory);\n\n              // return <h1>Masonry</h1>;\n              // If the Question's Category is the same as the Filter supplied:\n              if (QuestionCategory == CategoryFilter) {\n                // If there isn't a TagFilter applied:\n                if (TagFilter == 'all') {\n                  // Use our helper function above to find the right Category's Data.\n                  let filteredCategory = categoryMatch(\n                    categoryMap,\n                    CategoryFilter\n                  );\n\n                  return (\n                    <DefaultWidget\n                      BgColor={filteredCategory.PageTheme.Color.Background}\n                      TextColor={filteredCategory.PageTheme.Color.Primary}\n                      Destination={\n                        '/learn' + QuestionSlugString + '/' + Question.node.slug\n                      }\n                      Subhead={filteredCategory.Name}\n                      Headline={Question.node.title}\n                      IconName={filteredCategory.Icon}\n                      IconColor={filteredCategory.PageTheme.Color.Primary}\n                      BgQuery={\n                        Question.node.coverImage\n                          ? Question.node.coverImage\n                          : false\n                      }\n                      BgImageAltText={\n                        QuestionCategory +\n                        ' & Cannabis | ' +\n                        Question.node.title\n                      }\n                      TintColor={Theme.Color.Black}\n                      TintOpacity={0.6}\n                      key={index}\n                    />\n                  );\n                } else {\n                  // If there is a TagFilter applied, check the Tags Array\n                  // to see if it includes our filter:\n                  if (Question.node.tags.includes(TagFilter.toLowerCase())) {\n                    // Use our helper function above to find the right Category's Data.\n                    let filteredCategory = categoryMatch(\n                      categoryMap,\n                      CategoryFilter\n                    );\n\n                    return (\n                      <DefaultWidget\n                        BgColor={filteredCategory.PageTheme.Color.Background}\n                        TextColor={filteredCategory.PageTheme.Color.Primary}\n                        Destination={\n                          '/learn' +\n                          QuestionSlugString +\n                          '/' +\n                          Question.node.slug\n                        }\n                        Subhead={filteredCategory.Name}\n                        Headline={Question.node.title}\n                        IconName={filteredCategory.Icon}\n                        IconColor={filteredCategory.PageTheme.Color.Primary}\n                        BgQuery={\n                          Question.node.coverImage\n                            ? Question.node.coverImage\n                            : false\n                        }\n                        BgImageAltText={\n                          QuestionCategory +\n                          ' & Cannabis | ' +\n                          Question.node.title\n                        }\n                        TintColor={Theme.Color.Black}\n                        TintOpacity={0.6}\n                        key={index}\n                      />\n                    );\n                  } else {\n                    // If it doesn't match anything, return false. And cry.\n                    return null;\n                  }\n                }\n              } else {\n                // If we want to display all the Questions, let's make their\n                // slug their root category.\n                if (CategoryFilter == 'all') {\n                  // Use our helper function to match the Category data.\n                  let filteredCategory = categoryMatch(\n                    categoryMap,\n                    QuestionCategory\n                  );\n\n                  // console.log('all filteredCategory');\n                  // console.log(filteredCategory);\n                  // console.log('Question');\n                  // console.log(Question);\n\n                  if (filteredCategory) {\n                    return (\n                      <DefaultWidget\n                        BgColor={filteredCategory.PageTheme.Color.Background}\n                        TextColor={filteredCategory.PageTheme.Color.Primary}\n                        Destination={\n                          '/learn/' +\n                          filteredCategory.Slug +\n                          '/' +\n                          Question.node.slug\n                        }\n                        Subhead={filteredCategory.Name}\n                        Headline={Question.node.title}\n                        IconName={filteredCategory.Icon}\n                        IconColor={filteredCategory.PageTheme.Color.Primary}\n                        BgQuery={\n                          Question.node.coverImage\n                            ? Question.node.coverImage\n                            : false\n                        }\n                        BgImageAltText={\n                          QuestionCategory +\n                          ' & Cannabis | ' +\n                          Question.node.title\n                        }\n                        TintColor={Theme.Color.Black}\n                        TintOpacity={0.6}\n                        key={index}\n                      />\n                    );\n                  } else {\n                    return (\n                      <DefaultWidget\n                        BgColor={Theme.Color.Black}\n                        TextColor={Theme.Color.Whitee}\n                        Destination={'/learn/' + Question.node.slug}\n                        Subhead=\"Cannabis Questions\"\n                        Headline={Question.node.title}\n                        IconName=\"question\"\n                        IconColor={Theme.Color.White}\n                        BgQuery={\n                          Question.node.coverImage\n                            ? Question.node.coverImage\n                            : false\n                        }\n                        BgImageAltText={'Cannabis Q&A | ' + Question.node.title}\n                        TintColor={Theme.Color.Black}\n                        TintOpacity={0.6}\n                        key={index}\n                      />\n                    );\n                  }\n                } else {\n                  // If nothing is supplied, don't return anything. Also, cry.\n                  return null;\n                }\n              }\n            })}\n          </>\n        );\n      }}\n    />\n  );\n};\n\nconst QuestionListings = ({\n  Gutter,\n  CategorySlug,\n  AllCategories,\n  TagSlug,\n  BgColor,\n  CategoryFilter,\n  TagFilter,\n}) => (\n  <MasonrySection\n    Columns={3}\n    ColumnGap={0.25}\n    BgColor={BgColor ? BgColor : Theme.Color.White}\n    TextColor={Theme.Color.Nightsky}\n    Gutter={Gutter ? Gutter : [0, 1, 2, 1]}\n  >\n    {/* If the CategoryFilter is supplied */}\n    {/* {console.log('CategoryFilter Passed:')}\n    {console.log(CategoryFilter)} */}\n\n    {CategoryFilter ? (\n      <QuestionCards\n        CategorySlug={CategorySlug}\n        TagSlug={TagSlug ? TagSlug : null}\n        CategoryFilter={CategoryFilter}\n        TagFilter={TagFilter ? TagFilter : 'all'}\n        AllCategories={AllCategories}\n      />\n    ) : (\n      // If it isn't, revert to 'all'\n      <QuestionCards\n        CategorySlug={CategorySlug}\n        TagSlug={TagSlug ? TagSlug : null}\n        CategoryFilter=\"all\"\n        TagFilter={TagFilter}\n        AllCategories={AllCategories}\n      />\n    )}\n  </MasonrySection>\n);\n\nexport default QuestionListings;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Transformer:\n// This is for taking Prismic data and transforming it into something that\n// this component would like to handle. The Transformer is typically used\n// in /template/ pages where a GraphQL query from Prismic (or any data) source\n// is involved.\n//////////////////////////////////////////////////////////////////////\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Function to create our Columns Map\nexport const questionDataTransformer = question => {\n  // Check if it's empty first:\n  if (question) {\n    // If the question data is an array:\n    if (Array.isArray(question) == true) {\n      let questionMap = question.map((questionPost, index) => {\n        return {\n          node: {\n            id: questionPost.node.id ? questionPost.node.id : '',\n            slug: questionPost.node.uid ? questionPost.node.uid : '',\n            date: questionPost.node.data.date\n              ? questionPost.node.data.date\n              : '',\n            author: questionPost.node.data.author\n              ? questionPost.node.data.author.document[0].data.name.text\n              : 'Sierra Well',\n            coverImage: questionPost.node.data.cover_image.localFile\n              ? questionPost.node.data.cover_image.localFile.childImageSharp.fluid\n              : false,\n            title: questionPost.node.data.title.text\n              ? questionPost.node.data.title.text\n              : '',\n            category: questionPost.node.data.category\n              ? questionPost.node.data.category.uid\n              : '',\n            tags: questionPost.node.tags ? questionPost.node.tags : '',\n            shortAnswer: questionPost.node.data.short_answer\n              ? questionPost.node.data.short_answer\n              : '',\n            longAnswer: questionPost.node.data.long_answer\n              ? questionPost.node.data.long_answer\n              : '',\n          },\n        };\n        // return console.log(questionPost)\n      });\n\n      return questionMap;\n    }\n\n    // If it's not an array:\n    else {\n      let questionMap = {\n        id: question.id ? question.id : '',\n        slug: question.uid ? question.uid : '',\n        date: question.data.date ? question.data.date : '',\n        author: question.data.author\n          ? question.data.author.document[0].data.name.text\n          : 'Sierra Well',\n        coverImage: question.data.cover_image.localFile\n          ? question.data.cover_image.localFile.childImageSharp.fluid\n          : false,\n        title: question.data.title.text ? question.data.title.text : '',\n        category: question.data.category ? question.data.category.uid : '',\n        tags: question.tags ? question.tags : '',\n        shortAnswer: question.data.short_answer\n          ? question.data.short_answer\n          : '',\n        longAnswer: question.data.long_answer ? question.data.long_answer : '',\n      };\n\n      return questionMap;\n    }\n  }\n\n  // If the question data doesn't exist\n  else {\n    return 'No data supplied.';\n  }\n};\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) calc(${Root.Size} / 2);\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.6;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.15;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// HeroStrip Component:\n// The HeroStrip component, typically used in Hero components.\n// Example: https://www.dropbox.com/s/fkq5n663abznqpt/Screenshot%202019-04-19%2018.20.13.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\n\n// Styles\nimport HeroStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst HeroStrip = ({ Items, BgColor, TextColor }) => (\n  <HeroStripStyle\n    className=\"hero-strip\"\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <HeroStripStyle.Inner TextColor={TextColor}>\n      {Items.map((Item, index) => {\n        if (Item.Destination) {\n          return (\n            <div key={index} className=\"hero-strip-item focus\">\n              <Link to={Item.Destination}>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </Link>\n            </div>\n          );\n        } else {\n          return (\n            <div key={index} className=\"hero-strip-item\">\n              <div>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </div>\n            </div>\n          );\n        }\n      })}\n    </HeroStripStyle.Inner>\n  </HeroStripStyle>\n);\n\nexport default HeroStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SplitSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n`;\n\nSplitSectionStyle.Inner = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: center;\n  position: relative;\n\n  .block {\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n\n      /* Add left padding to first block if it's a text\n      block depending on it's flex property: */\n      ${props =>\n        props.Flex\n          ? null\n          : 'padding-left: calc(' +\n            Root.Grid.Gutter.Left +\n            ' + ' +\n            Root.Size +\n            ')'};\n    }\n\n    &:last-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n    }\n\n    .block-content {\n      max-width: calc(${Root.Site.Width} / 3);\n      width: 100%;\n    }\n\n    .block-img-wrap {\n      width: 100%;\n      padding-bottom: 80%;\n      overflow: hidden;\n      position: relative;\n\n      .block-img {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`;\n\nexport default SplitSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitSection Component:\n// This is a basic component for sections with.\n// fullwidth 50% areas compensating for the\n// left gutter sidebar.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SplitSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSection = ({ children, Flex }) => (\n  <SplitSectionStyle>\n    <SplitSectionStyle.Inner Flex={Flex}>{children}</SplitSectionStyle.Inner>\n  </SplitSectionStyle>\n);\n\nexport default SplitSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.4;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.09;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionFooter Component:\n// The QuestionFooter component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\nimport SimpleSection from 'components/library/Section/SimpleSection';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport Block from 'components/library/Block';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\nimport QuestionListings from 'components/library/QuestionListings';\nimport SlideSection from 'components/library/Section/SlideSection';\nimport Btn from 'components/library/Btn';\n\n// Transformers\nimport { categoryDataTransformer } from 'templates/Learn/Transformer';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport QuestionFooterStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Create our Categories array.\nconst BrowseCategories = () => {\n  // Helper function to dissect the data into a usable map\n  function categoryWidgets(data) {\n    let widgetArray = data.map((category, index) => {\n      return {\n        Flex: 1,\n        WidgetContent: [\n          {\n            Destination: '/learn/' + category.node.Slug,\n            Style: 'Generic',\n            Meta: {\n              Generic: {\n                BgColor: category.node.PageTheme.Color.Background,\n                BgImage: '',\n                Subhead: '',\n                Headline: category.node.Name,\n                TextColor: category.node.PageTheme.Color.Primary,\n                IconColor: category.node.PageTheme.Color.Primary,\n                IconName: category.node.Icon, // FontAwesome Icon Name\n                TintColor: '',\n                TintOpacity: '',\n                IconSize: '',\n              },\n            },\n          },\n        ],\n      };\n    });\n\n    // Define our 'View All Widget'\n    let viewAll = {\n      Flex: 1,\n      WidgetContent: [\n        {\n          Destination: '/learn/all',\n          Style: 'Generic',\n          Meta: {\n            Generic: {\n              BgColor: Theme.Color.Nightsky,\n              BgImage: '',\n              Subhead: '',\n              Headline: 'All Categories',\n              TextColor: Theme.Color.White,\n              IconColor: Theme.Color.White,\n              IconName: 'question', // FontAwesome Icon Name\n              TintColor: '',\n              TintOpacity: '',\n              IconSize: '',\n            },\n          },\n        },\n      ],\n    };\n\n    // Add our 'View All Widget' to the beginning of the array with unshift().\n    widgetArray.unshift(viewAll);\n\n    // Return our new array.\n    return widgetArray;\n  }\n\n  // Return Slider with Categories\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          allPrismicQuestionCategory {\n            edges {\n              node {\n                id\n                uid\n                data {\n                  name {\n                    text\n                  }\n                  icon\n                  headline\n                  color_background\n                  color_primary\n                  color_secondary\n                  color_tertiary\n                  tags {\n                    tag_name\n                    tag_slug\n                    tag_icon\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => {\n        const categoryMap = categoryDataTransformer(\n          data.allPrismicQuestionCategory.edges\n        );\n\n        return (\n          <SlideSection\n            Widgets={categoryWidgets(categoryMap)}\n            SectionSize={6}\n            Header=\"Browse Categories\"\n            Gutter={[0, 1, 1, 1]}\n            Theme={{\n              TextColor: Theme.Color.Slate,\n              BgColor: 'none',\n            }}\n            SliderSettings={{\n              slidesToShow: 4,\n              slidesToScroll: 1,\n              autoplay: false,\n              arrows: true,\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n\n// Return our footer.\nconst QuestionFooter = ({ CategoryFilter, TagFilter, HideCategories }) => (\n  <>\n    {/* ///////////// */}\n\n    <SimpleSection\n      BgColor={Theme.Color.White}\n      TextColor={Theme.Color.Nightsky}\n      Style=\"centered\"\n    >\n      <Block Style=\"centered\" Padding={[1, 0, 0, 0]} maxWidth={0.5}>\n        <h2>Not seeing your question?</h2>\n        <p className=\"p-md\">\n          Chat with an expert now or sumbit your own question\n        </p>\n        <Btn\n          IconClass=\"intercom\"\n          Label=\"Ask a question\"\n          BgColor={Theme.Color.Primary}\n          TextColor={Theme.Color.White}\n          Destination=\"/learn/all\"\n          IconPosition=\"left\"\n        />\n      </Block>\n    </SimpleSection>\n\n    {/* ///////////// */}\n\n    {HideCategories ? null : <BrowseCategories />}\n\n    {/* ///////////// */}\n\n    {/* ///////////// */}\n\n    <QuestionListings TagFilter={TagFilter} CategoryFilter={CategoryFilter} />\n\n    {/* ///////////// */}\n  </>\n);\n\nexport default QuestionFooter;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SuggestionListStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Helpers\nimport hexToRGB from 'helpers/hexToRGB';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SuggestionListStyle = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: 100%;\n  overflow: hidden;\n  position: relative;\n\n  &:before {\n    content: '';\n    position: absolute;\n    pointer-events: none;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    width: calc(${Root.Size} / 2);\n    z-index: 3;\n    background-image: ${props =>\n      props.GradientColor\n        ? 'linear-gradient(-90deg, ' +\n          hexToRGB(props.GradientColor, 1) +\n          ',' +\n          hexToRGB(props.GradientColor, 0.000001) +\n          ')'\n        : 'pink'};\n\n    /* hexToRGB(props.GradientColor, 1) */\n\n    /* background-image: linear-gradient(\n      -90deg,\n      rgba(25d5,255,0, 1) 20%,\n      rgba(25d5,255,0, 0) 100%\n    ); */\n  }\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n\n  ul {\n    display: block;\n    width: 100%;\n    max-width: 100%;\n    word-wrap: none;\n    white-space: nowrap;\n    overflow-x: auto;\n    touch-action: pan-x;\n    -webkit-overflow-scrolling: touch;\n    padding: calc(${Root.Size} / 4) 0;\n\n    li {\n      display: inline-block;\n      margin-right: calc(${Root.Size} / 4);\n      font-size: 0.8rem;\n      text-transform: uppercase;\n      letter-spacing: 1px;      \n\n      @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n        letter-spacing: 0.3px;\n      }\n\n      &:first-child {\n        opacity: 0.3;\n        font-weight: normal;\n      }\n\n      .btn {\n        position: relative;\n        left: 0;\n        .btn-inner {\n          height: calc(${Root.Button.Size} * 0.7);\n          font-size: 0.8rem;\n          text-transform: uppercase;\n          letter-spacing: 1px;\n          font-weight: bold;\n          padding: 0 calc(${Root.Size} / 4);\n        }\n      }\n    }\n  }\n`;\n\nexport default SuggestionListStyle;\n//////////////////////////////////////////////////////////////////////\n","// SuggestionList Component:\n// This is for listing out suggestions with an optional label in the front.\n// Reference: https://www.dropbox.com/s/qvn6rohf52unkpv/Screenshot%202019-05-02%2017.19.11.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Styles\nimport SuggestionListStyle from './styles.scss';\n\n// Components\nimport Btn from 'components/library/Btn/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Our nearby locations component\nconst SuggestionList = ({\n  List,\n  Label,\n  BaseUrl,\n  TextColor,\n  GradientColor,\n  Padding,\n  Affix,\n}) => (\n  <SuggestionListStyle\n    className=\"suggestion-list\"\n    GradientColor={GradientColor}\n    Padding={Padding}\n  >\n    <ul>\n      {Label ? <li>{Label}</li> : null}\n      {List.map((item, index) => (\n        <li key={index}>\n          <Btn\n            BgColor=\"none\"\n            Label={item.nearby_name}\n            Destination={\n              Affix ? BaseUrl + item.nearby_slug + Affix : BaseUrl + item.nearby_slug\n            }\n            TextColor={TextColor}\n          />\n        </li>\n      ))}\n    </ul>\n  </SuggestionListStyle>\n);\n\nexport default SuggestionList;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Transformer:\n// This is for taking Prismic location.data and transforming it into something that\n// this component would like to handle. The Transformer is typically used\n// in /template/ pages where a GraphQL query from Prismic (or any location.data) source\n// is involved.\n//////////////////////////////////////////////////////////////////////\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Function to create our Columns Map\nexport const locationLandingTransformer = location => {\n  if (location) {\n    let locationMap = {\n      edges: {\n        node: {\n          id: location.id,\n          slug: location.uid,\n          name: location.data.name.text,\n          geography: {\n            city: location.data.geo_city,\n            state: location.data.geo_state,\n            country: location.data.geo_country,\n          },\n          status: {\n            delivery: location.data.status_delivery,\n            store: location.data.status_store,\n          },\n          meta: {\n            reserveSpot: location.data.meta_reserve_spot_link,\n            menu: location.data.meta_menu,\n            maps: location.data.meta_google_maps_url,\n          },\n          contactDetails: {\n            phone: location.data,\n            location: {\n              address: location.data.geo_location_address,\n              state: location.data.geo_location_state,\n            },\n            hours: location.data.hours,\n          },\n          nearby: location.data.nearby_locations,\n          about: {\n            headline: location.data.about_headline.text,\n            PageTheme: {\n              Color: {\n                Background: location.data.color_background,\n                Primary: location.data.color_primary,\n                Secondary: location.data.color_secondary,\n                Tertiary: location.data.color_tertiary,\n              },\n            },\n            summary: {\n              headline: location.data.about_headline.text,\n            },\n          },\n          featuredSpecials: location.data.featured_specials,\n        },\n      },\n    };\n\n    return locationMap;\n  } else {\n    return 'null';\n  }\n};\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Simple Hero component:\n// slice_type: hero\n// example: https://www.dropbox.com/s/vp50dnga8ix2n8t/Screenshot%202019-05-07%2018.37.41.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleHeroStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleHero Component\nconst CastleHero = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleHeroStyle>\n      <SimpleHero\n        Padding={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        Background={primaryData.background_color}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1 itemProp=\"name\">\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n\n          {/* Check if Social Sharing is enabled */}\n          {primaryData.social_sharing.toLowerCase() == 'yes' ? (\n            <SocialStrip\n              Margin={[0.35, 0, 0, 0]}\n              Location={location}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n        </Block>\n      </SimpleHero>\n    </CastleHeroStyle>\n  );\n};\n\nexport default CastleHero;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .block {\n    .block-content {\n      width: 100% !important;\n      align-items: stretch;\n    }\n  }\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Full Split Section component:\n// slice_type: full_split_section\n// example: https://www.dropbox.com/s/3s19gold67oyspe/Screenshot%202019-05-08%2017.00.10.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SplitSection from 'components/library/Section/SplitSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleFullSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleFullSplitSectionStyle>\n      <SplitSection\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Padding={[1, 1, 1, 2]}\n          Width={0.5}\n          BgColor={primaryData.background_color}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n      </SplitSection>\n    </CastleFullSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsFullSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsFullSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .cta-wrap {\n    display: flex;\n    .btn {\n      margin-right: calc(${Root.Size} / 4);\n    }\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSimpleSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSimpleSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        BgMatch=\"placeholder_bg_4.jpg\"\n        BgTint={primaryData.tint_opacity}\n        BgAlt=\"Our Awesome Alt Tag\"\n        TextColor={primaryData.text_color}\n        Style={primaryData.text_alignment}\n      >\n        <Block\n          Style=\"centered\"\n          Padding={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          maxWidth={0.5}\n        >\n          {/* Check for Headline */}\n          <h2>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h2>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-md\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          <div className=\"cta-wrap\">\n            {repeatableData[0].cta_destination != null\n              ? repeatableData.map((item, index) => {\n                  return (\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  );\n                })\n              : null}\n          </div>\n        </Block>\n      </SimpleSection>\n    </CastleSimpleSectionStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSimpleSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSimpleSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Gutter={[1, 0, 1, 1]}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n\n        <Block\n          Padding={[3, 1, 3, 1]}\n          Width={0.5}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n      </SimpleSection>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitImageHero component:\n// slice_type: split_image_hero\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport Bread from 'components/library/Breadcrumb/';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleHero\n        imgLeft={primaryData.direction == 'normal' ? null : '0'}\n        imgRight={primaryData.direction == 'normal' ? '0' : null}\n        imgBottom=\"0\"\n        imgWidth=\"50%\"\n        Size={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        className=\"simple-hero\"\n        Background={primaryData.background_color}\n        JustifyContent={primaryData.direction == 'normal' ? null : 'flex-end'}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={0.5}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <Btn\n                    Label={item.cta_label}\n                    BgColor={item.cta_bg_color}\n                    TextColor={item.cta_text_color}\n                    Destination={item.cta_destination}\n                    IconPosition={item.cta_icon ? 'left' : null}\n                    IconClass={item.cta_icon ? item.cta_icon : null}\n                    IconFas\n                  />\n                );\n              })\n            : null}\n        </Block>\n        <Block className=\"hero-img\">\n          <ImgMatch src=\"hero-phone.png\" alt=\"100% Free Delivery\" />\n        </Block>\n      </SimpleHero>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitImageHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitImageHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// PromotionalStrip component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport HeroStrip from 'components/library/HeroStrip';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleSplitSectionStyle>\n      <HeroStrip\n        BgColor={\n          primaryData.bg_color ? primaryData.bg_color : Theme.Color.White\n        }\n        TextColor={\n          primaryData.text_color ? primaryData.text_color : Theme.Color.Nightsky\n        }\n        Items={promotionalItemsTransformer(repeatableData)}\n      />\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsPromotionalStripData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsPromotionalStripData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// StickyScrollSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst StickyScrollSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nStickyScrollSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n  }\n`;\n\nStickyScrollSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n\n  .block {\n    .gallery-img {\n      padding: 0 0 calc(${Root.Size} / 2) 0;\n\n      &:last-child {\n        padding: 0;\n      }\n    }\n\n    &.sticky-block {\n      .block-content {\n        position: sticky;\n        top: calc(${Root.Nav.Size});\n        padding-bottom: ${Root.Size};\n        height: calc(100vh - ${Root.Nav.Size});\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n    }\n  }\n\n  .txt-caption {\n    font-size: 1.4rem;\n    font-weight: bold;\n    color: ${Theme.Color.Slate};\n    display: block;\n    margin-bottom: calc(${Theme.Base.Size.Sm});\n  }\n`;\n\nexport default StickyScrollSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyScrollSection Component:\n// Desired outcome: https://www.dropbox.com/s/brll80qg306ywmk/Screenshot%202019-05-06%2015.01.12.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\nimport Block from 'components/library/Block';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport StickyScrollSectionStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// Render Element\nconst StickyScrollSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  Content,\n  Gallery,\n  GalleryQueries,\n  Gutter,\n  Flex,\n  Button,\n}) => (\n  <StickyScrollSectionStyle\n    Style={Style}\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <ReleaseOverflow />\n    <StickyScrollSectionStyle.Inner Gutter={Gutter}>\n      <StickyScrollSectionStyle.Content Flex={Flex} className=\"sticky-section\">\n        <Block Padding={[0, 1, 0, 1]} className=\"sticky-block\">\n          <span className=\"txt-caption\">{Content.Subheadline}</span>\n          <h2>{Content.Headline}</h2>\n          <p className=\"p-md\">{Content.Body}</p>\n\n          {/* Check if a Btn exists, display if so. */}\n          {Button ? (\n            <Btn\n              Label={Button.Label}\n              BgColor={Button.BgColor}\n              TextColor={Button.TextColor}\n              Destination={Button.Destination}\n              IconPosition=\"left\"\n              IconClass={Button.IconClass ? Button.IconClass : null}\n              IconFas\n            />\n          ) : null}\n        </Block>\n        <Block Padding={[0, 1, 0, 1]}>\n          {Gallery\n            ? Gallery.map((Img, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgMatch src={Img.Src} AltText={Img.Alt} />\n                  </div>\n                );\n              })\n            : null}\n          {GalleryQueries\n            ? GalleryQueries.map((query, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgQuery src={query.Fluid} AltText={query.Alt} />\n                  </div>\n                );\n              })\n            : null}\n        </Block>\n      </StickyScrollSectionStyle.Content>\n    </StickyScrollSectionStyle.Inner>\n  </StickyScrollSectionStyle>\n);\n\nexport default StickyScrollSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyGallery component:\n// slice_type: sticky_gallery\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport StickyScrollSection from 'components/library/Section/StickyScrollSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleStickyGalleryStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our GalleryQueries map.\n  const galleryImgQueriesTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let queries = data.map((Query, index) => {\n        return {\n          Fluid: Query.src.localFile.childImageSharp.fluid\n            ? Query.src.localFile.childImageSharp.fluid\n            : false,\n          Alt: Query.src.alt,\n        };\n      });\n\n      // Return new map.\n      return queries;\n    } else {\n      // Else, return 0.\n      return 0;\n    }\n  };\n\n  return (\n    <CastleStickyGalleryStyle>\n      <StickyScrollSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Content={{\n          Subheadline: primaryData.subheadline,\n          Headline: primaryData.headline.text,\n          Body: primaryData.body_text,\n        }}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n        GalleryQueries={galleryImgQueriesTransformer(repeatableData)}\n        Button={{\n          Label: primaryData.cta_label,\n          BgColor: primaryData.cta_bg_color,\n          TextColor: primaryData.cta_text_color,\n          Destination: primaryData.cta_destination,\n          IconClass: primaryData.cta_icon,\n        }}\n      />\n    </CastleStickyGalleryStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsStickyGalleryData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsStickyGalleryData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// CastleWidgetRow component:\n// slice_type: widget_row\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SlideSection from 'components/library/Section/SlideSection';\n\n// Style Overrides\nimport CastleWidgetRowStyle from './styles.scss';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleWidgetRow Component\nconst CastleWidgetRow = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const widgetContentTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: item.widget_destination,\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: item.widget_bg_color,\n                  BgQuery: item.widget_background_image.localFile\n                    ? item.widget_background_image.localFile.childImageSharp\n                        .fluid\n                    : false,\n                  Subhead: item.widget_subheadline,\n                  Headline: item.widget_headline.text,\n                  TextColor: item.widget_text_color,\n                  IconColor: item.widget_text_color,\n                  IconName: item.widget_icon_class, // FontAwesome Icon Name\n                  TintColor: item.widget_tint_color\n                    ? item.widget_tint_color\n                    : Theme.Color.Black,\n                  TintOpacity: item.widget_tint_opacity,\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleWidgetRowStyle>\n      <Block maxWidth=\"100%\">\n        <SlideSection\n          Widgets={widgetContentTransformer(repeatableData)}\n          SectionSize={primaryData.section_size}\n          Header={\n            primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Keep Browsing'\n          }\n          Gutter={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          Theme={{\n            TextColor: primaryData.text_color,\n            BgColor: primaryData.bg_color,\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: primaryData.autoplay == 'On' ? true : false,\n            arrows: true,\n          }}\n        />\n      </Block>\n    </CastleWidgetRowStyle>\n  );\n};\n\nexport default CastleWidgetRow;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsWidgetRowData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsWidgetRowData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// ::::::::      :::      ::::::::  ::::::::::: :::        ::::::::::\n// :+:    :+:   :+: :+:   :+:    :+:     :+:     :+:        :+:\n// +:+         +:+   +:+  +:+            +:+     +:+        +:+\n// +#+        +#++:++#++: +#++:++#++     +#+     +#+        +#++:++#\n// +#+        +#+     +#+        +#+     +#+     +#+        +#+\n// #+#    #+# #+#     #+# #+#    #+#     #+#     #+#        #+#\n//  ########  ###     ###  ########      ###     ########## ##########\n//\n// Castle.js // By Peter Laxalt // www.laxaltandmciver.co\n// This is the page builder for Elements.\n// Future regex for matching {{ variables }} https://regex101.com/r/xgOodL/1\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Styles\nimport CastleStyle from './styles.scss';\n\n// Components\nimport CastleHero from './components/CastleHero';\nimport CastleFullSplitSection from './components/CastleFullSplitSection';\nimport CastleSimpleSection from './components/CastleSimpleSection';\nimport CastleSplitSection from './components/CastleSplitSection';\nimport CastleSplitImageHero from './components/CastleSplitImageHero';\nimport CastlePromotionalStrip from './components/CastlePromotionalStrip';\nimport CastleStickyGallery from './components/CastleStickyGallery';\nimport CastleWidgetRow from './components/CastleWidgetRow';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Castle\nclass CastleBuilder extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  // Render\n  render() {\n    const bricks = this.props.Bricks;\n    const location = this.props.Location;\n\n    return (\n      <>\n        {bricks.map((brick, index) => {\n          switch (brick.slice_type) {\n            case 'hero':\n              return (\n                <CastleHero data={brick} location={location} key={index} />\n              );\n            case 'full_split_section':\n              return (\n                <CastleFullSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_section':\n              return (\n                <CastleSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_image_hero':\n              return (\n                <CastleSplitImageHero\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'promotional_strip':\n              return (\n                <CastlePromotionalStrip\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'sticky_gallery':\n              return (\n                <CastleStickyGallery\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'simple_section':\n              return (\n                <CastleSimpleSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'widget_row':\n              return (\n                <CastleWidgetRow data={brick} location={location} key={index} />\n              );\n          }\n        })}\n      </>\n    );\n  }\n}\n\nconst Castle = ({ Bricks, Location }) => (\n  <CastleStyle>\n    <CastleBuilder Bricks={Bricks} Location={Location} />\n  </CastleStyle>\n);\n\nexport default Castle;\n","// <SimpleListStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SimpleListStyle = styled.div`\n  display: flex;\n`;\n\nSimpleListStyle.List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n`;\n\nSimpleListStyle.Item = styled.li`\n  display: block;\n  position: relative;\n  text-transform: capitalize;\n  margin-bottom: calc(${Root.Size} / 2);\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  span {\n    display: block;\n    &:first-child {\n      opacity: 0.6;\n      font-size: 1.2rem;\n      padding-bottom: calc(${Theme.Base.Size.Sm} / 2);\n    }\n    &:last-child {\n      font-weight: bold;\n      font-size: 1.5rem;\n    }\n  }\n`;\n\nexport default SimpleListStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SimpleListStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleList = ({ List, TextColor }) => (\n  <SimpleListStyle className=\"simple-list\" TextColor={TextColor}>\n    <SimpleListStyle.List TextColor={TextColor}>\n      {List.map((item, index) => {\n        return (\n          <SimpleListStyle.Item key={index}>\n            <span>{item.Label}</span>\n            <span>{item.Data}</span>\n          </SimpleListStyle.Item>\n        );\n      })}\n    </SimpleListStyle.List>\n  </SimpleListStyle>\n);\n\nexport default SimpleList;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <AwardBadgeStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const AwardBadgeStyle = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: calc(${Root.Size} * 3);\n  height: calc(${Root.Size} * 3);\n  background: ${Theme.Color.Primary};\n  color: ${Theme.Color.White};\n  border-radius: 50%;\n  box-shadow: 0 0px 8px 0 rgba(6, 10, 92, 0.12);\n  position: relative;\n  text-align: center;\n  padding: ${Theme.Base.Size.Sm};\n\n  .img {\n    width: 50%;\n  }\n\n  span {\n    margin-top: calc(${Theme.Base.Size.Sm} * 0.75);\n    padding-top: calc(${Theme.Base.Size.Sm} * 0.75);\n    text-align: center;\n    width: 100%;\n    position: relative;\n    font-weight: bold;\n    font-size: 0.9rem;\n    line-height: 1.3;\n\n    &:before {\n      content: '';\n      position: absolute;\n      left: 50%;\n      top: 0;\n      transform: translateX(-50%);\n      height: 1px;\n      width: ${Theme.Base.Size.Md};\n      background: ${Theme.Color.White};\n    }\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 3%;\n    right: 3%;\n    top: 3%;\n    bottom: 3%;\n    border: 1px solid ${Theme.Color.White};\n    border-radius: 50%;\n  }\n`;\n\nexport default AwardBadgeStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Styles\nimport AwardBadgeStyle from './styles.scss';\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst AwardHours = ({ Text, TextColor, BgColor }) => (\n  <AwardBadgeStyle TextColor={TextColor} BgColor={BgColor}>\n    <ImgMatch src=\"logos/leafly.png\" AltText=\"Leafly\" />\n    <span>{Text}</span>\n  </AwardBadgeStyle>\n);\n\nexport default AwardHours;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <AwardHoursStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const AwardHoursStyle = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: stretch;\n  flex: 1;\n\n  .simple-list {\n    padding-left: calc(${Root.Size} / 2);\n    margin-left: calc(${Root.Size} / 2);\n    border-left: 1px solid\n      ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    display: flex;\n    align-items: center;\n    ul {\n      justify-content: center;\n    }\n  }\n`;\n\nAwardHoursStyle.List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n`;\n\nAwardHoursStyle.Item = styled.li`\n  display: block;\n  position: relative;\n  text-transform: capitalize;\n  margin-bottom: calc(${Root.Size} / 2);\n\n  span {\n    display: block;\n    &:first-child {\n      opacity: 0.6;\n      font-size: 1.2rem;\n      padding-bottom: calc(${Theme.Base.Size.Sm} / 2);\n    }\n    &:last-child {\n      font-weight: bold;\n      font-size: 1.5rem;\n    }\n  }\n`;\n\nexport default AwardHoursStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport AwardBadge from 'components/library/AwardBadge';\nimport SimpleList from 'components/library/SimpleList';\n\n// Styles\nimport AwardHoursStyle from './styles.scss';\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst AwardHours = ({ Hours, TextColor }) => (\n  <AwardHoursStyle TextColor={TextColor}>\n    <AwardBadge\n      Logo=\"leafly\"\n      Text=\"2018 Voted Best Boutique Dispensary\"\n      BgColor={Theme.Color.Primary}\n      TextColor={Theme.Color.White}\n    />\n    <SimpleList TextColor={TextColor} List={Hours} />\n  </AwardHoursStyle>\n);\n\nexport default AwardHours;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SpecialListingsStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SpecialListingsStyle = styled.div`\n  appearance: none;\n  position: relative;\n  background-color: ${props =>\n    props.BgColor ? props.BgColor : Theme.Color.White}\n\n  &:before {\n    content: '';\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    top: 0;\n    background-color: ${Theme.Color.Black};\n    opacity: 0.1;\n  }\n\n  .masonry-section {\n    .widget-content {\n      z-index: 100;\n\n      &:first-child {\n        width: 100%;\n        flex: 100%;\n        display: block;\n      }\n      &:nth-child(2) {\n        width: 100%;\n        flex: 100%;\n        display: block;\n      }\n\n      .tag {\n        text-transform: capitalize;\n        display: inline-block;\n        font-size: 1rem;\n        margin-right: calc(${Root.Size} / 6);\n        position: relative;\n\n        &:before {\n          content: '';\n          position: absolute;\n          right: calc(((${Root.Size} / 6) / 1.7) * -1);\n          top: 50%;\n          transform: translateY() (-50%);\n          width: 2px;\n          height: 2px;\n          border-radius: 50%;\n          background-color: ${Theme.Color.White};\n        }\n\n        &:last-child {\n          margin-right: 0;\n          &:before {\n            display: none;\n          }\n        }\n      }\n    }\n  }\n\n  .hero-strip {\n    position: sticky;\n    top: ${Root.Nav.Size};\n    z-index: 400;\n    /* background-color: rgba(255, 255, 255, 0.1) !important;\n    span {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.White} !important;      \n    } */\n  }\n`;\n\nSpecialListingsStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n  padding-left: ${Root.Grid.Gutter.Left};\n  padding-right: ${Root.Grid.Gutter.Right};\n\n  h2 {\n    padding-bottom: 0;\n    margin-bottom: 0;\n    margin-top: ${Root.Size};\n  }\n`;\n\nSpecialListingsStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Nightsky)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n`;\n\nexport default SpecialListingsStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionListings Component:\n// The QuestionListings component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport HeroStrip from 'components/library/HeroStrip';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport SpecialListingsStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// The Specials Cards.\nconst SpecialCards = ({ PageLocation }) => {\n  return (\n    // Run the StaticQuery to get the data we need.\n    <StaticQuery\n      query={graphql`\n        query {\n          allPrismicSpecial {\n            edges {\n              node {\n                id\n                uid\n                data {\n                  title {\n                    text\n                  }\n                  icon\n                  tags\n                  color_background\n                  color_primary\n                  color_secondary\n                  color_tertiary\n                  cover_image {\n                    alt\n                    localFile {\n                      id\n                      childImageSharp {\n                        fluid(maxWidth: 1200) {\n                          ...GatsbyImageSharpFluid\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data =>\n        // Create our PageTheme variables for each Widget.\n\n        // Map the Question data we got.\n        data.allPrismicSpecial.edges.map((Special, index) => {\n          let tagList = Special.node.data.tags.replace(/\\s/g, '').split(',');\n          let styledTagList =\n            tagList.length > 0\n              ? tagList.map((tag, index) => (\n                  <span className=\"tag\" index={index}>\n                    {tag}\n                  </span>\n                ))\n              : 'Specials';\n\n          return (\n            <DefaultWidget\n              BgColor={Special.node.data.color_background}\n              TextColor={Special.node.data.color_primary}\n              Destination={PageLocation.pathname + '/' + Special.node.uid}\n              Subhead={styledTagList}\n              Headline={Special.node.data.title.text}\n              IconName={Special.node.data.icon}\n              IconColor={Special.node.data.color_primary}\n              BgQuery={\n                Special.node.data.cover_image.localFile\n                  ? Special.node.data.cover_image.localFile.childImageSharp\n                      .fluid\n                  : false\n              }\n              // BgImageFile={Question.node.coverImage}\n              BgImageAltText={\n                Special.node.data.cover_image.localFile\n                  ? Special.node.data.cover_image.alt\n                  : null\n              }\n              TintColor={\n                Special.node.data.cover_image.localFile\n                  ? Theme.Color.Black\n                  : null\n              }\n              TintOpacity={Special.node.data.cover_image.localFile ? 0.6 : null}\n              key={index}\n            >\n              {/* {console.log(tagList)} */}\n            </DefaultWidget>\n          );\n        })\n      }\n    />\n  );\n};\n\nconst SpecialListings = ({\n  Gutter,\n  BgColor,\n  TextColor,\n  LocationData,\n  PageLocation,\n  Header,\n}) => {\n  // Function to create our Promotional Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <SpecialListingsStyle\n      className=\"specials-listings\"\n      BgColor={BgColor}\n      TextColor={TextColor}\n    >\n      <ReleaseOverflow />\n      {LocationData ? (\n        LocationData.featuredSpecials.length > 0 ? (\n          <HeroStrip\n            BgColor={Theme.Color.White}\n            TextColor={Theme.Color.Nightsky}\n            Items={promotionalItemsTransformer(LocationData.featuredSpecials)}\n          />\n        ) : null\n      ) : null}\n\n      {Header ? (\n        <SpecialListingsStyle.SectionHeader>\n          <SpecialListingsStyle.Headline TextColor={TextColor}>\n            <h2>{Header}</h2>\n          </SpecialListingsStyle.Headline>\n        </SpecialListingsStyle.SectionHeader>\n      ) : null}\n\n      <MasonrySection\n        Columns={3}\n        ColumnGap={0.25}\n        BgColor={BgColor ? BgColor : Theme.Color.White}\n        TextColor={TextColor ? TextColor : Theme.Color.Nightsky}\n        Gutter={Gutter ? Gutter : [.5, 1, 2, 1]}\n      >\n        {/* {console.log(LocationData.featuredSpecials.length)} */}\n        <SpecialCards PageLocation={PageLocation} />\n      </MasonrySection>\n    </SpecialListingsStyle>\n  );\n};\n\nexport default SpecialListings;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n"],"sourceRoot":""}