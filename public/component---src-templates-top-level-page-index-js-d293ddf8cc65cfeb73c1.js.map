{"version":3,"sources":["webpack:///./src/templates/TopLevelPage/layout.js","webpack:///./src/templates/TopLevelPage/index.js","webpack:///./src/components/library/Block/styles.scss.js","webpack:///./src/components/library/Block/index.js","webpack:///./src/components/library/Section/SlideSection/styles.scss.js","webpack:///./src/components/library/Section/SlideSection/index.js","webpack:///./src/components/core/HorizontalContent/styles.scss.js","webpack:///./src/components/core/WrapperControl/index.js","webpack:///./src/components/library/Section/SimpleSection/styles.scss.js","webpack:///./src/components/library/Section/SimpleSection/index.js","webpack:///./src/components/library/Hero/styles.scss.js","webpack:///./src/components/core/HorizontalContent/SlideColumn/index.js","webpack:///./src/components/library/Hero/index.js","webpack:///./src/components/library/Hero/SimpleHero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/index.js","webpack:///./src/components/library/Breadcrumb/styles.scss.js","webpack:///./src/components/library/Breadcrumb/index.js","webpack:///./src/components/library/Section/index.js","webpack:///./src/components/core/HorizontalContent/index.js","webpack:///./src/components/library/SocialStrip/styles.scss.js","webpack:///./src/components/library/SocialStrip/index.js","webpack:///./src/components/core/HorizontalContent/SlideGroup/index.js","webpack:///./src/components/library/Section/SplitSection/styles.scss.js","webpack:///./src/components/library/Section/SplitSection/index.js","webpack:///./src/components/library/HeroStrip/styles.scss.js","webpack:///./src/components/library/HeroStrip/index.js","webpack:///./src/components/library/Section/StickyScrollSection/styles.scss.js","webpack:///./src/components/library/Section/StickyScrollSection/index.js","webpack:///./src/components/library/Castle/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/index.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/index.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/styles.scss.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/index.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/index.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/index.js","webpack:///./src/components/library/Castle/index.js"],"names":["LargeContent","_ref","node","id","columns","dashboard_link","document","data","body","react_default","a","createElement","HorizontalContent","SlideGroup","className","SlidesData","Name","Columns","columnDataTransformer","console","log","SmallContent","TopLevelPageTemplate","_ref2","elements","Layout","BgColor","color_background","Theme","Color","Background","PrimaryColor","color_primary","Nightsky","SecondaryColor","color_secondary","TertiaryColor","color_tertiary","White","DeviceQuery","Query","layout_LargeContent","layout_SmallContent","__webpack_require__","d","__webpack_exports__","query","TopLevelPage","props","allPrismicTopLevelPage","edges","Fragment","layout","BlockStyle","styled","div","_templateObject","Flex","flex","TextColor","AlignItems","Style","css","_templateObject2","JustifyContent","BgTint","Width","maxWidth","Base","Grid","SiteWidth","Padding","Root","Size","Block","children","BgMatch","BgQuery","BgAlt","styles_scss","ImgMatch","src","AltText","ImgQuery","SlideSectionStyle","Sm","Black","Inner","SectionInnerStyle","Gutter","Left","Content","SectionContentStyle","_templateObject3","SectionSize","Media","Md","SectionHeader","_templateObject4","Headline","_templateObject5","Transition","Duration","CssEase","CallToAction","_templateObject6","NextArrow","style","onClick","Object","assign","onKeyPress","role","tabIndex","Icons","PrevArrow","SectionSlider","_React$Component","call","this","render","_settings","_this","slidesToShow","ArrowColor","SliderSettings","slidesToScroll","autoplay","arrows","settings","dots","speed","autoplaySpeed","infinite","draggable","nextArrow","prevArrow","responsive","breakpoint","Helmet","rel","type","href","lib_default","ref","h","slider","React","Component","SlideSection","Widgets","Header","Icon","ViewAll","SlideSection_styles_scss","Btn","Destination","Label","IconclassName","SlideSection_SectionSlider","TextColr","map","Widget","index","Container","key","WidgetContent","HorizontalContentStyle","Footer","Right","Nav","FadeIn","SlideColumnContainer","Column","Divider","ColWidth","WrapperLock","createGlobalStyle","WrapperRelease","SimpleSectionStyle","Primary","FluidHeight","SimpleSection","SimpleSection_styles_scss","HeroInnerStyle","imgRight","imgLeft","imgTop","imgBottom","imgWidth","HeroContentStyle","FullWidth","SlideColumn","react__WEBPACK_IMPORTED_MODULE_1___default","_styles_scss__WEBPACK_IMPORTED_MODULE_4__","components_library_Widgets_Container___WEBPACK_IMPORTED_MODULE_3__","column","slice_type","Type","sideHeaderWidgetDataTransformer","primary","defaultWidgetDataTransformer","items","HeroInner","HeroContent","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styles_scss__WEBPACK_IMPORTED_MODULE_2__","SimpleHeroStyle","Tint","TintBorder","SimpleHero","Hero","BreadCrumb","Link","Bread","Crumbs","crumb","to","_styles_scss__WEBPACK_IMPORTED_MODULE_1__","SocialStripStyle","Margin","span","SocialStrip","Location","target","handleWheel","bind","assertThisInitialized_default","inheritsLoose_default","_proto","prototype","e","deltaY","deltaX","slickPrev","slickNext","_this2","variableWidth","WrapperControl","onWheel","c","SplitSectionStyle","Site","SplitSection","SplitSection_styles_scss","HeroStripStyle","ViewWidthFontSize","HeroStrip","Items","HeroStrip_styles_scss","Item","gatsby_browser_entry","Caption","StickyScrollSectionStyle","Slate","ReleaseOverflow","StickyScrollSection_templateObject","StickyScrollSection","Gallery","GalleryQueries","Button","StickyScrollSection_styles_scss","Subheadline","Body","IconPosition","IconClass","IconFas","Img","Src","Alt","Fluid","CastleStyle","CastleHeroStyle","styles_scss_templateObject","CastleHero","location","primaryData","repeatableData","CastleHero_styles_scss","padding","replace","split","background_color","background_image","localFile","childImageSharp","fluid","text_color","tint_opacity","breadcrumb_url","Breadcrumb","breadcrumb_label","itemProp","headline","text","body_text","cta_destination","item","cta_label","cta_bg_color","cta_text_color","cta_icon","social_sharing","toLowerCase","CastleFullSplitSection_styles_scss_templateObject","CastleSplitSection","CastleFullSplitSection_styles_scss","direction","image","alt","CastleSimpleSectionStyle","CastleSimpleSection_styles_scss_templateObject","CastleSimpleSection","CastleSimpleSection_styles_scss","text_alignment","CastleSplitSection_styles_scss_templateObject","CastleSplitSection_styles_scss","CastleSplitImageHero_styles_scss_templateObject","CastleSplitImageHero_styles_scss","CastlePromotionalStrip_styles_scss_templateObject","length","CastlePromotionalStrip_styles_scss","bg_color","caption","label","destination","promotionalItemsTransformer","CastleStickyGallery_styles_scss_templateObject","CastleStickyGallery_styles_scss","subheadline","galleryImgQueriesTransformer","CastleWidgetRow_styles_scss_templateObject","CastleWidgetRow","CastleWidgetRow_styles_scss","widget_destination","Meta","Generic","widget_bg_color","widget_background_image","Subhead","widget_subheadline","widget_headline","widget_text_color","IconColor","IconName","widget_icon_class","TintColor","widget_tint_color","TintOpacity","widget_tint_opacity","IconSize","widgetContentTransformer","section_size","CastleBuilder","bricks","Bricks","brick","components_CastleHero","CastleFullSplitSection","components_CastleSplitSection","CastleSplitImageHero","CastlePromotionalStrip","CastleStickyGallery","components_CastleSimpleSection","components_CastleWidgetRow","Castle","Castle_CastleBuilder"],"mappings":"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","file":"component---src-templates-top-level-page-index-js-d293ddf8cc65cfeb73c1.js","sourcesContent":["// templates/Question.js:\n// This is the Question template of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport Device from 'components/core/DeviceQuery';\nimport Layout from 'components/core/Layout';\n\n// Components\nimport { HorizontalContent } from 'components/core/HorizontalContent';\nimport SlideGroup from 'components/core/HorizontalContent/SlideGroup';\n\n// Data Transfomers\nimport { columnDataTransformer } from 'components/core/HorizontalContent/SlideColumn';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Large Device Content\nconst LargeContent = ({ node, id }) => {\n  const columns = node.dashboard_link.document[0].data.body;\n\n  return (\n    <HorizontalContent>\n      <SlideGroup\n        className={id}\n        SlidesData={[{ Name: id, Columns: columnDataTransformer(columns) }]}\n      />\n      {console.log(node)}\n      {console.log('columnDataTransformer(columns):')}\n      {console.log(columnDataTransformer(columns))}\n      {console.log('columns:')}\n      {console.log(columns)}\n    </HorizontalContent>\n  );\n};\n\n// Small Device Content\nconst SmallContent = () => (\n  <div>\n    <h1>Mobile content</h1>\n  </div>\n);\n\n// The Question Template\nconst TopLevelPageTemplate = ({ data, node, id, elements }) => (\n  <Layout\n    BgColor={\n      node.color_background ? node.color_background : Theme.Color.Background\n    }\n    PrimaryColor={\n      node.color_primary ? node.color_primary : Theme.Color.Nightsky\n    }\n    SecondaryColor={\n      node.color_secondary ? node.color_secondary : Theme.Color.Nightsky\n    }\n    TertiaryColor={\n      node.color_tertiary ? node.color_tertiary : Theme.Color.White\n    }\n  >\n    <Device Query=\"Desktop\">\n      <LargeContent node={node} id={id} />\n    </Device>\n\n    <Device Query=\"Mobile\">\n      <SmallContent />\n    </Device>\n  </Layout>\n);\n\nexport default TopLevelPageTemplate;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Top Level Page Template:\n// This is the top level page template.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Templates\nimport TopLevelPageTemplate from './layout';\n\n// Load Castle Fragments\nimport 'components/library/Castle';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Question Template\nconst TopLevelPage = props => {\n  const node = props.data.allPrismicTopLevelPage.edges[0].node;\n\n  return (\n    <>\n      <TopLevelPageTemplate node={node.data} id={node.id} data={props} />\n    </>\n  );\n};\n\nexport default TopLevelPage;\n\n// GraphQL Queries\n// ///////////////////////////////////////////////////////////////////\nexport const query = graphql`\n  query($Id: String!) {\n    allPrismicTopLevelPage(filter: { id: { eq: $Id } }) {\n      edges {\n        node {\n          id\n          uid\n          data {\n            description\n            page_title {\n              text\n            }\n            dashboard_link {\n              id\n              ... on dashboardLink_2 {\n                id\n                document {\n                  id\n                  data {\n                    dashboard_name {\n                      html\n                      text\n                    }\n                    body {\n                      __typename\n                      ... on PrismicDashboardBodyColumn {\n                        slice_type\n                        items {\n                          widget_background_image {\n                            alt\n                            localFile {\n                              id\n                              childImageSharp {\n                                fluid(maxWidth: 1200) {\n                                  ...GatsbyImageSharpFluid\n                                }\n                              }\n                            }\n                          }\n                          widget_headline {\n                            text\n                          }\n                          widget_subheadline\n                          widget_destination\n                          widget_style\n                          widget_width_multiple\n                          widget_height_fraction\n                          widget_icon_class\n                          widget_text_color\n                          widget_bg_color\n                          tint_color\n                          tint_opacity\n                        }\n                      }\n\n                      ... on PrismicDashboardBodyTitleColumn {\n                        slice_type\n                        primary {\n                          widget_headline {\n                            text\n                          }\n                          widget_intro_copy\n                          widget_body_copy\n                        }\n                      }\n\n                      ... on PrismicDashboardBodyDivider {\n                        slice_type\n                        primary {\n                          type\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            opengraph_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// ////////////////////////////////////////////////////////////////////\n// End Component\n","// <Block> Styles:\n// This is the primary column component.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\nexport const BlockStyle = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.flex : 'column')};\n  position: relative;\n  flex-shrink: 1;\n  ${props => (props.BgColor ? 'background: ' + props.BgColor + ';' : null)}\n  ${props => (props.TextColor ? 'color: ' + props.TextColor + ';' : null)}\n  \n  /* Item Alignment. We are aligning items */\n  /* 'stretch' by default. */\n  ${props =>\n    props.AlignItems ? 'align-items: ' + props.AlignItems + ';' : null}\n\n  /* Centered Style */\n  ${props =>\n    props.Style == 'centered' &&\n    css`\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto;\n\n      p,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        text-align: center;\n        width: 100%;\n      }\n\n      .btn {\n        margin: 0 auto;\n      }\n\n      .block-content {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n      }\n    `}\n\n  /* The block content. */\n  .block-content {\n    z-index: 2;\n    margin: 0 auto;\n    width: 100%;\n    ${props => (props.JustifyContent ? 'display:flex' : null)};\n    ${props =>\n      props.JustifyContent\n        ? 'justify-content: ' + props.JustifyContent + ';'\n        : null}\n\n    p {\n      max-width: 80%;\n    }\n  }\n\n  /* Background images with Gatsby-Img */\n  .block-img {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n\n    .img {\n      flex: 1;\n    }\n  }\n\n  /* Width Multiple */\n    ${props =>\n      props.Width ? 'width: ' + props.Width * 100 + '%;' : 'flex: 1;'}\n  max-width: ${props =>\n    props.maxWidth\n      ? 'calc(' + Theme.Base.Grid.SiteWidth + ' * ' + props.maxWidth + ')'\n      : Theme.Base.Grid.SiteWidth};\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n`;\n\nexport default BlockStyle;\n//////////////////////////////////////////////////////////////////////\n","// <Block> Component:\n// This is the sitewide block style of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Styles\nimport BlockStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Block = ({\n  children,\n  className,\n  Style,\n  maxWidth,\n  Width,\n  Padding,\n  AlignItems,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  BgTint,\n  BgColor,\n  TextColor,\n  JustifyContent,\n  Flex,\n}) => (\n  <BlockStyle\n    className={className ? className + ' block' : 'block'}\n    Width={Width}\n    maxWidth={maxWidth}\n    Style={Style}\n    Padding={Padding}\n    AlignItems={AlignItems ? AlignItems : false}\n    JustifyContent={JustifyContent ? JustifyContent : false}\n    BgTint={BgTint}\n    BgColor={BgColor}\n    TextColor={TextColor}\n    Flex={Flex}\n  >\n    {/* Block Content */}\n    {children ? <div className=\"block-content\">{children}</div> : null}\n\n    {/* For Background Images */}\n    {BgMatch ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n\n    {/* For Background Images with ImgQuery */}\n    {BgQuery ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgQuery src={BgQuery} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n  </BlockStyle>\n);\n\nexport default Block;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SlideSectionStyle = styled.div`\n  width: 100%;\n  overflow: hidden;\n\n  /* Slick styles */\n  .slick-slider {\n    padding-bottom: ${Theme.Base.Size.Sm};\n    margin-bottom: ${Theme.Base.Size.Sm};\n\n    .slick-slide {\n      &:first-child {\n        .widget {\n          padding-left: 0;\n        }\n      }\n    }\n    .slick-list {\n      overflow: visible;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      z-index: 400;\n      background: rgba(0, 0, 0, 0);\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc((${Root.Size} * 0.75) + (${Root.Size} * 0.25));\n      }\n\n      &.slick-next {\n        right: 0;\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n\n    .slick-dots {\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: auto;\n      padding: 0;\n      margin: 0;\n\n      li {\n        margin: 0;\n        padding: 0;\n        width: 10px;\n        height: 10px;\n        margin-right: 5px;\n\n        button {\n          margin: 0;\n          padding: 0;\n          position: relative;\n          width: 10px;\n          height: 10px;\n          margin-right: 5px;\n\n          &:before {\n            content: '';\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            width: 7px;\n            height: 7px;\n            border: 1px solid ${Theme.Color.Black};\n            border-radius: 50%;\n          }\n        }\n      }\n    }\n  }\n`;\n\nSlideSectionStyle.Inner = styled(SectionInnerStyle)`\n  width: 100%;\n  padding-bottom: 0;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: 0'};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n`;\n\nSlideSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: column;\n\n  .widget {\n    padding: calc(${Root.Size} / 6);\n    height: ${props =>\n      props.SectionSize\n        ? 'calc(' + Root.Size + '*' + props.SectionSize + ')'\n        : 'calc(' + Root.Size + '* 3)'};\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      padding: calc(${Root.Size}) calc(${Root.Size} / 4);\n      height: ${props =>\n        props.SectionSize\n          ? 'calc((' + Root.Size + '* 3) * ' + props.SectionSize + ')'\n          : 'calc((' + Root.Size + '* 3) * 3)'};\n    }\n  }\n`;\n\nSlideSectionStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n`;\n\nSlideSectionStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : null)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  i {\n    margin-right: ${Theme.Base.Size.Sm};\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n`;\n\nSlideSectionStyle.CallToAction = styled.div`\n  display: flex;\n\n  .btn {\n    background-color: rgba(0, 0, 0, 0);\n    color: ${Theme.Color.Black};\n\n    svg {\n      fill: ${Theme.Color.Black};\n      border: ${Theme.Color.Black};\n    }\n\n    i {\n      color: ${Theme.Color.Black};\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nexport default SlideSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SlideSection.js:\n//\n// Usage:\n// <SlideSection\n// Widgets={Widgets}\n// SectionSize=\"Large\"\n// SlidesToShow={4}\n// Header=\"Headline\"\n// ViewAll={['/', 'View All']}\n// />\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\nimport { Link } from 'gatsby';\n\n// Components\nimport WidgetContainer from 'components/library/Widgets/Container/';\nimport Btn from 'components/library/Btn';\nimport Icon from 'elements/Icons';\n\n// Constants\nimport { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport SlideSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Section Slider:\n// For displaying widgets within a SlideSection.\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The Slider itself.\nclass SectionSlider extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n\n    // Get any theming.\n    const ArrowColor = this.props.ArrowColor;\n\n    // Get any custom Slider Settings we want to pass.\n    const slidesToShow = this.props.SliderSettings.slidesToShow\n      ? this.props.SliderSettings.slidesToShow\n      : 1;\n    const slidesToScroll = this.props.SliderSettings.slidesToScroll\n      ? this.props.SliderSettings.slidesToScroll\n      : 1;\n    const autoplay = this.props.SliderSettings.autoplay\n      ? this.props.SliderSettings.autoplay\n      : false;\n    const arrows = this.props.SliderSettings.arrows\n      ? this.props.SliderSettings.arrows\n      : false;\n\n    // Pass into Slick Settings.\n    const settings = {\n      dots: true,\n      speed: 550,\n      arrows: false,\n      autoplaySpeed: 4000,\n      slidesToShow: slidesToShow,\n      slidesToScroll: slidesToScroll,\n      autoplay: autoplay,\n      infinite: false,\n      draggable: true,\n      arrows: arrows,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n      responsive: [\n        {\n          breakpoint: Base.Media.Width.Md + 'px',\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n          },\n        },\n      ],\n    };\n\n    return (\n      <>\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n        <Slider ref={h => (this.slider = h)} {...settings}>\n          {this.props.children}\n        </Slider>\n      </>\n    );\n  }\n}\n\n// The SubLevel Page Itself\nconst SlideSection = ({\n  Widgets,\n  SectionSize,\n  SliderSettings,\n  Header,\n  Icon,\n  ViewAll,\n  Theme,\n  Gutter,\n}) => (\n  <SlideSectionStyle>\n    <SlideSectionStyle.Inner Gutter={Gutter}>\n      <SlideSectionStyle.Content SectionSize={SectionSize}>\n        <SlideSectionStyle.SectionHeader>\n          <SlideSectionStyle.Headline TextColor={Theme.TextColor}>\n            {Icon ? <i className={'fas fa-' + Icon} /> : null}\n            <h2>{Header}</h2>\n          </SlideSectionStyle.Headline>\n          {ViewAll ? (\n            <SlideSectionStyle.CallToAction>\n              <Btn\n                Destination={ViewAll[0]}\n                BgColor=\"inherit\"\n                Label={ViewAll[1]}\n                IconclassName=\"carat\"\n              />\n            </SlideSectionStyle.CallToAction>\n          ) : null}\n        </SlideSectionStyle.SectionHeader>\n\n        <SectionSlider\n          SliderSettings={SliderSettings}\n          ArrowColor={Theme.TextColr}\n        >\n          {/* Map our Widgets data. */}\n          {Widgets.map((Widget, index) => {\n            // Pass our Widgets data to our WidgetContainers\n            return (\n              <WidgetContainer\n                key={index}\n                WidgetContent={Widget.WidgetContent}\n                Flex={Widget.Flex ? Widget.Flex : null}\n              />\n            );\n          })}\n        </SectionSlider>\n      </SlideSectionStyle.Content>\n    </SlideSectionStyle.Inner>\n  </SlideSectionStyle>\n);\n\nexport default SlideSection;\n","// Layout Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Keyframe\nimport { FadeIn } from 'components/core/Transition/Keyframes';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst HorizontalContentStyle = styled.div`\n  width: 100%;\n  padding-left: 0;\n  padding-right: 0;\n  padding-bottom: ${Root.Footer.Size};\n  overflow: visible;\n\n  .slick-slider {\n    .slick-list {\n      overflow: visible;\n    }\n\n    .slick-track {\n      display: flex;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      background: rgba(0, 0, 0, 0);\n      z-index: 1500;\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc(\n          ((${Root.Size} * 0.75) + (${Root.Size} * 0.25)) +\n            ${Root.Grid.Gutter.Right}\n        );\n      }\n\n      &.slick-next {\n        right: calc(${Root.Grid.Gutter.Right});\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n  }\n`;\n\n// The Slide Group Wrapper\nHorizontalContentStyle.Inner = styled.div`\n  width: 100%;\n  padding: calc(${Root.Nav.Size} * 2) 0 0 0;\n\n  /* Padding on first slide */\n  .slick-slide {\n    padding: 0;\n    overflow: visible;\n    div {\n      outline: 0;\n      &:focus {\n        outline: 0;\n      }\n      .col {\n        &:first-child {\n          padding-left: ${Theme.Base.Size.Sm};\n        }\n      }\n    }\n    &:first-child {\n      padding: 0 0 0 ${Theme.Base.Size.Sm};\n      .col {\n        &:first-child {\n          padding-left: 0;\n        }\n      }\n    }\n  }\n\n  .widget {\n    ${FadeIn};\n  }\n`;\n\n// The Individual Slide Wrapper\nHorizontalContentStyle.SlideColumnContainer = styled.div`\n  width: 100%;\n  padding: 0;\n  overflow: visible;\n  height: calc(100vh - (${Root.Nav.Size} * 2 + ${Root.Footer.Size}));\n`;\n\n// The Individual Slide Inner\nHorizontalContentStyle.SlideColumnContainer.Inner = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  overflow: visible;\n  padding-bottom: ${Theme.Base.Size.Sm};\n  height: calc(100vh - (${Root.Nav.Size} * 2 + ${Root.Footer.Size}));\n`;\n\n// The Column Wrapper\nHorizontalContentStyle.Column = styled.div`\n  padding: ${Theme.Base.Size.Sm} ${Theme.Base.Size.Sm} ${Theme.Base.Size.Sm} 0;\n  height: calc(100vh - (${Root.Nav.Size} * 2 + ${Root.Footer.Size}));\n  display: flex;\n  flex-direction: column;\n  flex: ${props => (props.Divider ? 'unset' : '1')};\n  width: ${props =>\n    props.ColWidth\n      ? props.ColWidth\n      : props.Divider\n      ? Theme.Base.Size.Md\n      : 'auto'};\n\n    .col-inner {\n      min-width: 250px;\n    }\n`;\n\nHorizontalContentStyle.Column.Inner = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 100%;\n  max-width: 100%;\n  .widget {\n    &:first-child {\n      padding-top: 0;\n    }\n  }\n\n  ${props => {\n    if (props.Divider)\n      return `\n        width: ${Theme.Base.Size.Md};\n        &:before {\n          content: '';\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          // left: calc(50% - ${Base.Size.Sm / 2 + 'px'});\n          left: 50%;\n          width: 1px;\n          opacity: .05;\n          background-color: { Theme.Color.Indigo };\n        }\n    `;\n  }}\n`;\n\nexport default HorizontalContentStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// WrapperControl.js:\n// For controlling our `.wrapper` class app-wide.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Lock Wrapper Scroll\nexport const WrapperLock = createGlobalStyle`\n  html, body {\n    overflow: hidden;\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: visible !important; \n      overflow: visible;\n      \n      .wrapper {\n        overflow-y: hidden;\n      }\n    }\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow: hidden;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow: hidden; \n      overflow-y: hidden;\n    }\n  }\n\n  .slick-slider {\n    touch-action: none !important;\n  }\n`;\n\n// Release Wrapper Scroll\nexport const WrapperRelease = createGlobalStyle`\n  html, body {\n      overflow: auto;\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow-y: visible;\n      height: auto;\n      position: absolute;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: hidden;\n      position: absolute;\n    }\n  }\n`;\n\n// Wrapper Flex Reseet\nexport const WrapperFlexStart = createGlobalStyle`\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      justify-content: flex-start;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      justify-content: space-between;\n    }\n  }\n`;\n","// SimpleSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nSimpleSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n    .img {\n      height: 100%;\n    }\n  }\n`;\n\nSimpleSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n`;\n\nexport default SimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SimpleSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  FluidHeight,\n  Gutter,\n  Flex,\n  children,\n}) => (\n  <SimpleSectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <SimpleSectionStyle.Inner\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <SimpleSectionStyle.Content\n        FluidHeight={FluidHeight}\n        Flex={Flex}\n        className=\"simple-section\"\n      >\n        {children}\n      </SimpleSectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </SimpleSectionStyle.Inner>\n  </SimpleSectionStyle>\n);\n\nexport default SimpleSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MenuHero Styles:\n// These are nearly identical to the Section base styles.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInnerStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  position: relative;\n  overflow: hidden;\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : 'padding-top: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : 'padding-bottom: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ' * ' +\n        props.Padding[3] +\n        ')'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  .hero-img {\n    pointer-events: none;\n    ${props =>\n      props.imgRight || props.imgLeft || props.imgTop || props.imgBottom\n        ? 'position: absolute'\n        : null};\n    ${props => (props.imgRight ? 'right: ' + props.imgRight : null)};\n    ${props => (props.imgLeft ? 'left: ' + props.imgLeft : null)};\n    ${props => (props.imgBottom ? 'bottom: ' + props.imgBottom : null)};\n    ${props => (props.imgTop ? 'top: ' + props.imgTop : null)};\n    ${props => (props.imgWidth ? 'width: ' + props.imgWidth : null)};\n  }\n\n  .btn-secondary {\n    margin-left: calc(${Root.Size} / 4);\n  }\n`;\n\nexport const HeroContentStyle = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: ${props => (props.JustifyContent ? props.JustifyContent : 'flex-start')};\n  max-width: ${props => (props.FullWidth ? '100%' : Theme.Base.Grid.SiteWidth)};\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SlideColumn.js\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Componentss\nimport WidgetContainer from 'components/library/Widgets/Container/';\n\n// Styles\nimport HorizontalContentStyle from './../styles.scss';\n\n// Data Transformers\nimport { defaultWidgetDataTransformer } from 'components/library/Widgets/Library/Default';\nimport { sideHeaderWidgetDataTransformer } from 'components/library/Widgets/Library/SideHeader';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SlideColumn Itself\n// <SlideColumn Divider /> returns a Divider\nclass SlideColumn extends React.Component {\n  constructor(props) {\n    // Get our this.props\n    super(props);\n  }\n\n  render() {\n    const Divider = this.props.Divider;\n    const Widgets = this.props.Widgets;\n\n    // If it's a Divider:\n    if (Divider == true) {\n      return (\n        <HorizontalContentStyle.Column Divider className=\"divider\">\n          <HorizontalContentStyle.Column.Inner Divider />\n        </HorizontalContentStyle.Column>\n      );\n    }\n\n    // If it's not:\n    else {\n      return (\n        <HorizontalContentStyle.Column className=\"col\">\n          <HorizontalContentStyle.Column.Inner className=\"col-inner\">\n            {/* Map our Widgets data. */}\n            {Widgets.map((Widget, index) => {\n              // Pass our Widgets data to our WidgetContainers\n              return (\n                <WidgetContainer\n                  key={index}\n                  WidgetContent={Widget.WidgetContent}\n                  Flex={Widget.Flex}\n                  Width={Widget.Width}\n                />\n              );\n            })}\n          </HorizontalContentStyle.Column.Inner>\n        </HorizontalContentStyle.Column>\n      );\n    }\n  }\n}\n\nexport default SlideColumn;\n\n// Transformer:\n// This is for taking Prismic data and transforming it into something that\n// this component would like to handle. The Transformer is typically used\n// in /template/ pages where a GraphQL query from Prismic (or any data) source\n// is involved.\n//////////////////////////////////////////////////////////////////////\n\n// Function to create our Columns Map\nexport const columnDataTransformer = data => {\n  if (data) {\n    let columnMap = data.map((column, index) => {\n      switch (column.slice_type) {\n        case 'title_column':\n          return {\n            Type: column.slice_type,\n            Widgets: sideHeaderWidgetDataTransformer(column.primary),\n          };\n        case 'column':\n          return {\n            Type: column.slice_type,\n            Widgets: defaultWidgetDataTransformer(column.items),\n          };\n        case 'divider':\n          return {\n            Type: column.slice_type,\n            Widgets: defaultWidgetDataTransformer(column.items),\n          };\n      }\n    });\n\n    return columnMap;\n  } else {\n    return 'null';\n  }\n};\n","// Hero Component:\n// This is a helper component containing base\n// Hero styles shared across all Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { HeroInnerStyle, HeroContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInner = ({\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  Size,\n  Flex,\n  Padding,\n  children,\n  JustifyContent,\n}) => (\n  <HeroInnerStyle\n    Size={Size ? Size : false}\n    Padding={Padding ? Padding : false}\n    imgRight={imgRight ? imgRight : false}\n    imgLeft={imgLeft ? imgLeft : false}\n    imgBottom={imgBottom ? imgBottom : false}\n    imgTop={imgTop ? imgTop : false}\n    imgWidth={imgWidth ? imgWidth : false}\n  >\n    <HeroContentStyle\n      className=\"hero-content\"\n      JustifyContent={JustifyContent}\n      Flex={Flex}\n    >\n      {children}\n    </HeroContentStyle>\n  </HeroInnerStyle>\n);\n\nexport const HeroContent = ({ children, Flex }) => (\n  <HeroContentStyle Flex={Flex} className=\"hero-content\">\n    {children}\n  </HeroContentStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SimpleHero Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHeroStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  z-index: 1;\n  position: relative;\n  /* margin-top: calc(${Root.Nav.Size} * -1); */\n  background: ${props => (props.Background ? props.Background : 'none')};\n  background-size: cover;\n  background-position: center center;\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n  align-self: flex-start;\n  justify-self: flex-start;\n\n  /* Background Tint */\n  ${props =>\n    props.Tint\n      ? `\n  &.tint {\n    &:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      top: 0;\n      background-color: rgba(0,0,0,` +\n        props.Tint +\n        `);\n    }\n    .inner {\n      z-index: 500;\n    }\n  }\n  `\n      : null}\n  \n  /* Background Tint */\n  ${props =>\n    props.TintBorder\n      ? `\n      &:after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;      \n      top: 0;\n      height: 1px;\n      z-index: 5;\n      background-color: rgba(0,0,0, 0.05);\n    }\n  `\n      : null}\n\n  /* Block Spacing */\n  .block {\n    &:first-child {\n      padding-right: calc(${Root.Size} / 2);\n    }\n    &:second-child {\n      padding-left: calc(${Root.Size} / 2);\n    }\n  }\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n    height: 100%;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img, .img {\n      height: 100%;\n    }\n    .hero-img, .gatsby-image-wrapper {\n      position: unset !important;\n    }\n  }\n`;\n\nexport default SimpleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Helpers\nimport { HeroInner } from './../../Hero';\n\n// Styles\nimport SimpleHeroStyle from './styles.scss';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHero = ({\n  Background,\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  TextColor,\n  Tint,\n  Padding,\n  Size,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  Flex,\n  JustifyContent,\n  TintBorder,\n  children,\n}) => (\n  <SimpleHeroStyle\n    Background={Background}\n    TextColor={TextColor}\n    Tint={Tint}\n    TintBorder={TintBorder}\n    className={Tint ? 'tint' : null}\n  >\n    <HeroInner\n      Size={Size ? Size : false}\n      Padding={Padding}\n      imgRight={imgRight ? imgRight : false}\n      imgLeft={imgLeft ? imgLeft : false}\n      imgBottom={imgBottom ? imgBottom : false}\n      imgTop={imgTop ? imgTop : false}\n      imgWidth={imgWidth ? imgWidth : false}\n      JustifyContent={JustifyContent}\n      className=\"inner\"\n      Flex={Flex}\n    >\n      {children}\n    </HeroInner>\n    {BgMatch ? (\n      <div className=\"section-img\">\n        <ImgMatch src={BgMatch} AltText={BgAlt} className=\"hero-img\" />\n      </div>\n    ) : null}\n    {BgQuery ? (\n      <div className=\"section-img\">\n        <ImgQuery src={BgQuery} AltText=\"Hero Alt\" className=\"hero-img\" />\n      </div>\n    ) : null}\n  </SimpleHeroStyle>\n);\n\nexport default SimpleHero;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Breadcrumb> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const BreadCrumb = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  width: 100%;\n  align-items: center;\n  transform: translateX(calc(1rem * -1.5));\n  text-decoration: none;\n`;\n\nBreadCrumb.Label = styled(Link)`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  margin-left: calc(${Theme.Base.Size.Sm});\n  position: relative;\n  text-transform: capitalize;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: calc((${Theme.Base.Size.Sm} / 2) * -1);\n    transform: translateY(-50%);\n    width: 2px;\n    height: 2px;\n    border-radius: 50%;\n    background-color: ${props =>\n      props.TextColor ? props.TextColor : Theme.Color.Black};\n  }\n\n  &:first-child {\n    margin-left: 0;\n    position: relative;\n\n    &:before {\n      display: none;\n    }\n  }\n\n  svg {\n    transform: rotate(180deg) translateX(0%);\n    transform-origin: center center;\n    width: 1rem;\n    height: 1rem;\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transition: all 0.25s ease;\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n\n  &:hover {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    svg {\n      transform: rotate(180deg) translateX(50%);\n    }\n  }\n`;\n\nexport default BreadCrumb;\n//////////////////////////////////////////////////////////////////////\n","// <Bread Crumbs=\"\"> Component:\n// The breadcrumb component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport BreadCrumbStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Bread = ({ Crumbs, TextColor }) => (\n  <BreadCrumbStyle>\n    {Crumbs.map((crumb, index) => {\n      return (\n        <BreadCrumbStyle.Label\n          to={crumb.Destination}\n          key={index}\n          TextColor={TextColor}\n        >\n          {/* // Hide back button if nested item. */}\n          {index == 0 ? (\n            <Icon className=\"svg-carat\" Name=\"carat\" TextColor={TextColor} />\n          ) : null}\n\n          {crumb.Label}\n        </BreadCrumbStyle.Label>\n      );\n    })}\n  </BreadCrumbStyle>\n);\n\nexport default Bread;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Section Component:\n// This is a helper component containing base\n// Section styles shared across all Section components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { SectionInnerStyle, SectionContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const SectionInner = ({ children }) => (\n  <SectionInnerStyle>\n    <SectionContentStyle>{children}</SectionContentStyle>\n  </SectionInnerStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// HorizontalContent.js:\n// For building out\n// Horizontally focused pages, like top-level\n// navigation pages.\n\n// Core\nimport React from 'react';\n\n// Styles\nimport HorizontalContentStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Horizontal Content Itself\nexport const HorizontalContent = ({ children }) => (\n  <HorizontalContentStyle>\n    <HorizontalContentStyle.Inner>{children}</HorizontalContentStyle.Inner>\n  </HorizontalContentStyle>\n);\n\nexport default HorizontalContent;\n","// <SocialStripStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SocialStripStyle = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Array-based margins utilizing root variable multiple. */\n  ${props =>\n    props.Margin\n      ? 'margin-top: calc(' + Root.Size + ' * ' + props.Margin[0] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-right: calc(' + Root.Size + ' * ' + props.Margin[1] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-bottom: calc(' + Root.Size + ' * ' + props.Margin[2] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-left: calc(' + Root.Size + ' * ' + props.Margin[3] + ')'\n      : null};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    margin-right: calc(${Theme.Base.Size.Md} * 0.8);\n    position: relative;\n    font-size: calc(${Root.Size} / 2);\n    width: calc(${Root.Size} / 2);\n    height: calc(${Root.Size} / 2);\n\n    span {\n      width: 100%;\n      height: auto;\n      font-size: calc(${Root.Size} / 2);\n      i {\n        font-size: calc(${Root.Size} / 2);\n      }\n    }\n\n    i {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%) scale(1.8);\n      transform-origin: center center;\n      opacity: 0;\n      border-radius: 50%;\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover {\n      &:before {\n        opacity: 0.1;\n      }\n    }\n  }\n`;\n\nSocialStripStyle.Label = styled.span`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  svg {\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nexport default SocialStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// SocialStrip Component:\n// The SocialStrip component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SocialStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SocialStrip = ({ TextColor, Location, Margin }) => (\n  <SocialStripStyle Margin={Margin} TextColor={TextColor}>\n    <a\n      href={'https://www.facebook.com/sharer.php?u=' + Location}\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"facebook\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://twitter.com/intent/tweet?url=' +\n        Location +\n        '&text=Test&via=Test&hashtags=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"twitter\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://www.linkedin.com/shareArticle?mini=true&url=' +\n        Location +\n        '&title=Test&summary=Test&source=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"linkedin\" Color={TextColor} />\n    </a>\n  </SocialStripStyle>\n);\n\nexport default SocialStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SlideGroup.js:\n// For displaying SlideGroups.\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Constants\n// import { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport HorizontalContentStyle from '../styles.scss';\n\n// Components\nimport SlideColumn from '../SlideColumn';\nimport SlideTransformer from '../SlideTransformer';\nimport { WrapperLock } from './../../WrapperControl';\nimport Icon from 'elements/Icons';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The SlideGroup Itself\nexport class SlideGroup extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleWheel = this.handleWheel.bind(this);\n  }\n\n  handleWheel(e) {\n    // Disable defaults:\n    // e.preventDefault();\n\n    // Previous / Next Slide based on mouse scroll\n    if (e.deltaY < 0 || e.deltaX < 0 || e.deltaX > 0) {\n      this.slider.slickPrev();\n    } else {\n      this.slider.slickNext();\n    }\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n    const settings = {\n      dots: false,\n      speed: 1200,\n      arrows: true,\n      slidesToShow: 3,\n      slidesToScroll: 2,\n      variableWidth: true,\n      infinite: false,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n    };\n\n    // Slides Data\n    const SlidesData = this.props.SlidesData;\n\n    // Return Slides\n    return (\n      <>\n        <WrapperLock />\n\n        {/* Helmet to initiate Slick Styles */}\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n\n        {/* Initiate our Previous / Next Slide based on mouses scroll */}\n        <div onWheel={e => this.handleWheel(e)}>\n          <Slider ref={c => (this.slider = c)} {...settings}>\n            {/* Loop through our Slide Data */}\n            {/* Pass our Slide Columns data to the Slide */}\n            {SlidesData[0].Columns.map((Column, index) => {\n              // If our Column isn't a Divider\n              if (Column.Type != 'divider') {\n                // Pass our Widgets data to our Columns\n                return <SlideColumn key={index} Widgets={Column.Widgets} />;\n              }\n\n              // If our Column is a Divider\n              else {\n                return <SlideColumn key={index} Divider />;\n              }\n            })}\n          </Slider>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default SlideGroup;\n","// SplitSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n`;\n\nSplitSectionStyle.Inner = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: center;\n  position: relative;\n\n  .block {\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n\n      /* Add left padding to first block if it's a text\n      block depending on it's flex property: */\n      ${props =>\n        props.Flex\n          ? null\n          : 'padding-left: calc(' +\n            Root.Grid.Gutter.Left +\n            ' + ' +\n            Root.Size +\n            ')'};\n    }\n\n    &:last-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n    }\n\n    .block-content {\n      max-width: calc(${Root.Site.Width} / 3);\n      width: 100%;\n    }\n\n    .block-img-wrap {\n      width: 100%;\n      padding-bottom: 80%;\n      overflow: hidden;\n      position: relative;\n\n      .block-img {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`;\n\nexport default SplitSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitSection Component:\n// This is a basic component for sections with.\n// fullwidth 50% areas compensating for the\n// left gutter sidebar.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SplitSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSection = ({ children, Flex }) => (\n  <SplitSectionStyle>\n    <SplitSectionStyle.Inner Flex={Flex}>{children}</SplitSectionStyle.Inner>\n  </SplitSectionStyle>\n);\n\nexport default SplitSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.6;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.15;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// HeroStrip Component:\n// The HeroStrip component, typically used in Hero components.\n// Example: https://www.dropbox.com/s/fkq5n663abznqpt/Screenshot%202019-04-19%2018.20.13.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\n\n// Styles\nimport HeroStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst HeroStrip = ({ Items, BgColor, TextColor }) => (\n  <HeroStripStyle BgColor={BgColor} TextColor={TextColor}>\n    <HeroStripStyle.Inner TextColor={TextColor}>\n      {Items.map((Item, index) => {\n        if (Item.Destination) {\n          return (\n            <div key={index} className=\"hero-strip-item focus\">\n              <Link to={Item.Destination}>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </Link>\n            </div>\n          );\n        } else {\n          return (\n            <div key={index} className=\"hero-strip-item\">\n              <div>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </div>\n            </div>\n          );\n        }\n      })}\n    </HeroStripStyle.Inner>\n  </HeroStripStyle>\n);\n\nexport default HeroStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// StickyScrollSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst StickyScrollSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nStickyScrollSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n  }\n`;\n\nStickyScrollSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n\n  .block {\n    .gallery-img {\n      padding: 0 0 calc(${Root.Size} / 2) 0;\n\n      &:last-child {\n        padding: 0;\n      }\n    }\n\n    &.sticky-block {\n      .block-content {\n        position: sticky;\n        top: calc(${Root.Nav.Size});\n        padding-bottom: ${Root.Size};\n        height: calc(100vh - ${Root.Nav.Size});\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n    }\n  }\n\n  .txt-caption {\n    font-size: 1.4rem;\n    font-weight: bold;\n    color: ${Theme.Color.Slate};\n    display: block;\n    margin-bottom: calc(${Theme.Base.Size.Sm});\n  }\n`;\n\nexport default StickyScrollSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyScrollSection Component:\n// Desired outcome: https://www.dropbox.com/s/brll80qg306ywmk/Screenshot%202019-05-06%2015.01.12.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\nimport Block from 'components/library/Block';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport StickyScrollSectionStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// Render Element\nconst StickyScrollSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  Content,\n  Gallery,\n  GalleryQueries,\n  Gutter,\n  Flex,\n  Button,\n}) => (\n  <StickyScrollSectionStyle\n    Style={Style}\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <ReleaseOverflow />\n    <StickyScrollSectionStyle.Inner Gutter={Gutter}>\n      <StickyScrollSectionStyle.Content Flex={Flex} className=\"sticky-section\">\n        <Block Padding={[0, 1, 0, 1]} className=\"sticky-block\">\n          <span className=\"txt-caption\">{Content.Subheadline}</span>\n          <h2>{Content.Headline}</h2>\n          <p className=\"p-md\">{Content.Body}</p>\n\n          {/* Check if a Btn exists, display if so. */}\n          {Button ? (\n            <Btn\n              Label={Button.Label}\n              BgColor={Button.BgColor}\n              TextColor={Button.TextColor}\n              Destination={Button.Destination}\n              IconPosition=\"left\"\n              IconClass={Button.IconClass ? Button.IconClass : null}\n              IconFas\n            />\n          ) : null}\n        </Block>\n        <Block Padding={[0, 1, 0, 1]}>\n          {Gallery\n            ? Gallery.map((Img, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgMatch src={Img.Src} AltText={Img.Alt} />\n                  </div>\n                );\n              })\n            : null}\n          {GalleryQueries\n            ? GalleryQueries.map((query, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgQuery src={query.Fluid} AltText={query.Alt} />\n                  </div>\n                );\n              })\n            : null}\n        </Block>\n      </StickyScrollSectionStyle.Content>\n    </StickyScrollSectionStyle.Inner>\n  </StickyScrollSectionStyle>\n);\n\nexport default StickyScrollSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Simple Hero component:\n// slice_type: hero\n// example: https://www.dropbox.com/s/vp50dnga8ix2n8t/Screenshot%202019-05-07%2018.37.41.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleHeroStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleHero Component\nconst CastleHero = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleHeroStyle>\n      <SimpleHero\n        Padding={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        Background={primaryData.background_color}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1 itemProp=\"name\">\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n\n          {/* Check if Social Sharing is enabled */}\n          {primaryData.social_sharing.toLowerCase() == 'yes' ? (\n            <SocialStrip\n              Margin={[0.35, 0, 0, 0]}\n              Location={location}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n        </Block>\n      </SimpleHero>\n    </CastleHeroStyle>\n  );\n};\n\nexport default CastleHero;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .block {\n    .block-content {\n      width: 100% !important;\n      align-items: stretch;\n    }\n  }\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Full Split Section component:\n// slice_type: full_split_section\n// example: https://www.dropbox.com/s/3s19gold67oyspe/Screenshot%202019-05-08%2017.00.10.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SplitSection from 'components/library/Section/SplitSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleFullSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleFullSplitSectionStyle>\n      <SplitSection\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Padding={[1, 1, 1, 2]}\n          Width={0.5}\n          BgColor={primaryData.background_color}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n      </SplitSection>\n    </CastleFullSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsFullSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .cta-wrap {\n    display: flex;\n    .btn {\n      margin-right: calc(${Root.Size} / 4);\n    }\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSimpleSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSimpleSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        BgMatch=\"placeholder_bg_4.jpg\"\n        BgTint={primaryData.tint_opacity}\n        BgAlt=\"Our Awesome Alt Tag\"\n        TextColor={primaryData.text_color}\n        Style={primaryData.text_alignment}\n      >\n        <Block\n          Style=\"centered\"\n          Padding={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          maxWidth={0.5}\n        >\n          {/* Check for Headline */}\n          <h2>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h2>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-md\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          <div className=\"cta-wrap\">\n            {repeatableData[0].cta_destination != null\n              ? repeatableData.map((item, index) => {\n                  return (\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  );\n                })\n              : null}\n          </div>\n        </Block>\n      </SimpleSection>\n    </CastleSimpleSectionStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSimpleSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Gutter={[1, 0, 1, 1]}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n\n        <Block\n          Padding={[3, 1, 3, 1]}\n          Width={0.5}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n      </SimpleSection>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitImageHero component:\n// slice_type: split_image_hero\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport Bread from 'components/library/Breadcrumb/';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleHero\n        imgLeft={primaryData.direction == 'normal' ? null : '0'}\n        imgRight={primaryData.direction == 'normal' ? '0' : null}\n        imgBottom=\"0\"\n        imgWidth=\"50%\"\n        Size={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        className=\"simple-hero\"\n        Background={primaryData.background_color}\n        JustifyContent={primaryData.direction == 'normal' ? null : 'flex-end'}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={0.5}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <Btn\n                    Label={item.cta_label}\n                    BgColor={item.cta_bg_color}\n                    TextColor={item.cta_text_color}\n                    Destination={item.cta_destination}\n                    IconPosition={item.cta_icon ? 'left' : null}\n                    IconClass={item.cta_icon ? item.cta_icon : null}\n                    IconFas\n                  />\n                );\n              })\n            : null}\n        </Block>\n        <Block className=\"hero-img\">\n          <ImgMatch src=\"hero-phone.png\" alt=\"100% Free Delivery\" />\n        </Block>\n      </SimpleHero>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitImageHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// PromotionalStrip component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport HeroStrip from 'components/library/HeroStrip';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleSplitSectionStyle>\n      <HeroStrip\n        BgColor={\n          primaryData.bg_color ? primaryData.bg_color : Theme.Color.White\n        }\n        TextColor={\n          primaryData.text_color ? primaryData.text_color : Theme.Color.Nightsky\n        }\n        Items={promotionalItemsTransformer(repeatableData)}\n      />\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsPromotionalStripData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyGallery component:\n// slice_type: sticky_gallery\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport StickyScrollSection from 'components/library/Section/StickyScrollSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleStickyGalleryStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our GalleryQueries map.\n  const galleryImgQueriesTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let queries = data.map((Query, index) => {\n        return {\n          Fluid: Query.src.localFile.childImageSharp.fluid\n            ? Query.src.localFile.childImageSharp.fluid\n            : false,\n          Alt: Query.src.alt,\n        };\n      });\n\n      // Return new map.\n      return queries;\n    } else {\n      // Else, return 0.\n      return 0;\n    }\n  };\n\n  return (\n    <CastleStickyGalleryStyle>\n      <StickyScrollSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Content={{\n          Subheadline: primaryData.subheadline,\n          Headline: primaryData.headline.text,\n          Body: primaryData.body_text,\n        }}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n        GalleryQueries={galleryImgQueriesTransformer(repeatableData)}\n        Button={{\n          Label: primaryData.cta_label,\n          BgColor: primaryData.cta_bg_color,\n          TextColor: primaryData.cta_text_color,\n          Destination: primaryData.cta_destination,\n          IconClass: primaryData.cta_icon,\n        }}\n      />\n    </CastleStickyGalleryStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsStickyGalleryData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// CastleWidgetRow component:\n// slice_type: widget_row\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SlideSection from 'components/library/Section/SlideSection';\n\n// Style Overrides\nimport CastleWidgetRowStyle from './styles.scss';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleWidgetRow Component\nconst CastleWidgetRow = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const widgetContentTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: item.widget_destination,\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: item.widget_bg_color,\n                  BgQuery: item.widget_background_image.localFile\n                    ? item.widget_background_image.localFile.childImageSharp\n                        .fluid\n                    : false,\n                  Subhead: item.widget_subheadline,\n                  Headline: item.widget_headline.text,\n                  TextColor: item.widget_text_color,\n                  IconColor: item.widget_text_color,\n                  IconName: item.widget_icon_class, // FontAwesome Icon Name\n                  TintColor: item.widget_tint_color\n                    ? item.widget_tint_color\n                    : Theme.Color.Black,\n                  TintOpacity: item.widget_tint_opacity,\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleWidgetRowStyle>\n      <Block maxWidth=\"100%\">\n        <SlideSection\n          Widgets={widgetContentTransformer(repeatableData)}\n          SectionSize={primaryData.section_size}\n          Header={\n            primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Keep Browsing'\n          }\n          Gutter={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          Theme={{\n            TextColor: primaryData.text_color,\n            BgColor: primaryData.bg_color,\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: primaryData.autoplay == 'On' ? true : false,\n            arrows: true,\n          }}\n        />\n      </Block>\n    </CastleWidgetRowStyle>\n  );\n};\n\nexport default CastleWidgetRow;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsWidgetRowData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle.js\n// This is the page builder for Elements.\n// Future regex for matching {{ variables }} https://regex101.com/r/xgOodL/1\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Styles\nimport CastleStyle from './styles.scss';\n\n// Components\nimport CastleHero from './components/CastleHero';\nimport CastleFullSplitSection from './components/CastleFullSplitSection';\nimport CastleSimpleSection from './components/CastleSimpleSection';\nimport CastleSplitSection from './components/CastleSplitSection';\nimport CastleSplitImageHero from './components/CastleSplitImageHero';\nimport CastlePromotionalStrip from './components/CastlePromotionalStrip';\nimport CastleStickyGallery from './components/CastleStickyGallery';\nimport CastleWidgetRow from './components/CastleWidgetRow';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Castle\nclass CastleBuilder extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  // Render\n  render() {\n    const bricks = this.props.Bricks;\n    const location = this.props.Location;\n\n    return (\n      <>\n        {bricks.map((brick, index) => {\n          switch (brick.slice_type) {\n            case 'hero':\n              return (\n                <CastleHero data={brick} location={location} key={index} />\n              );\n            case 'full_split_section':\n              return (\n                <CastleFullSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_section':\n              return (\n                <CastleSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_image_hero':\n              return (\n                <CastleSplitImageHero\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'promotional_strip':\n              return (\n                <CastlePromotionalStrip\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'sticky_gallery':\n              return (\n                <CastleStickyGallery\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'simple_section':\n              return (\n                <CastleSimpleSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'widget_row':\n              return (\n                <CastleWidgetRow data={brick} location={location} key={index} />\n              );\n          }\n        })}\n      </>\n    );\n  }\n}\n\nconst Castle = ({ Bricks, Location }) => (\n  <CastleStyle>\n    <CastleBuilder Bricks={Bricks} Location={Location} />\n  </CastleStyle>\n);\n\nexport default Castle;\n"],"sourceRoot":""}