{"version":3,"sources":["webpack:///./src/templates/TopLevelPage/styles.scss.js","webpack:///./src/templates/TopLevelPage/layout.js","webpack:///./src/templates/TopLevelPage/index.js","webpack:///./src/components/library/Block/styles.scss.js","webpack:///./src/components/library/Block/index.js","webpack:///./src/components/library/Section/SlideSection/styles.scss.js","webpack:///./src/components/library/Section/SlideSection/index.js","webpack:///./src/components/core/WrapperControl/index.js","webpack:///./src/components/core/HorizontalContent/styles.scss.js","webpack:///./src/components/library/Hero/styles.scss.js","webpack:///./src/components/library/Hero/index.js","webpack:///./src/components/library/Section/SimpleSection/styles.scss.js","webpack:///./src/components/library/Section/SimpleSection/index.js","webpack:///./src/components/library/Hero/SimpleHero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/index.js","webpack:///./src/components/library/Breadcrumb/styles.scss.js","webpack:///./src/components/library/Breadcrumb/index.js","webpack:///./src/components/library/Section/MasonrySection/styles.scss.js","webpack:///./src/components/library/Section/MasonrySection/index.js","webpack:///./src/components/core/HorizontalContent/SlideColumn/index.js","webpack:///./src/components/library/Section/index.js","webpack:///./src/components/core/VerticalContent/styles.scss.js","webpack:///./src/components/core/VerticalContent/index.js","webpack:///./src/components/library/SocialStrip/styles.scss.js","webpack:///./src/components/library/SocialStrip/index.js","webpack:///./src/components/core/HorizontalContent/index.js","webpack:///./src/components/core/HorizontalContent/SlideGroup/index.js","webpack:///./src/components/library/HeroStrip/styles.scss.js","webpack:///./src/components/library/HeroStrip/index.js","webpack:///./src/components/library/Section/SplitSection/styles.scss.js","webpack:///./src/components/library/Section/SplitSection/index.js","webpack:///./src/components/library/Castle/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/index.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/index.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/styles.scss.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/index.js","webpack:///./src/components/library/Section/StickyScrollSection/styles.scss.js","webpack:///./src/components/library/Section/StickyScrollSection/index.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/index.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/index.js","webpack:///./src/components/library/Castle/index.js","webpack:///./src/components/library/SpecialsListings/styles.scss.js","webpack:///./src/components/library/SpecialsListings/index.js"],"names":["TopLevelPageStyles","styled","div","_templateObject","LargeContent","_ref","node","id","columns","dashboard_link","document","data","body","react_default","a","createElement","HorizontalContent","SlideGroup","className","SlidesData","Name","Columns","columnDataTransformer","SmallContent","_ref2","sections","VerticalContent","map","section","index","SlideSection","key","Widgets","items","item","Flex","WidgetContent","Destination","widget_destination","Style","Meta","Generic","BgColor","widget_bg_color","BgQuery","widget_background_image","localFile","childImageSharp","fluid","Subhead","widget_subheadline","Headline","widget_headline","text","TextColor","widget_text_color","IconColor","IconName","widget_icon_class","TintColor","widget_tint_color","Theme","Color","Black","TintOpacity","tint_opacity","IconSize","SectionSize","primary","section_height_multiple","Header","section_headline","Nightsky","SliderSettings","slidesToShow","slidesToScroll","autoplay","section_autoplay","arrows","section_arrows","SpecialsListings","White","PageLocation","TopLevelPageTemplate","_ref3","elements","Layout","color_background","Background","PrimaryColor","color_primary","SecondaryColor","color_secondary","TertiaryColor","color_tertiary","DeviceQuery","Query","layout_LargeContent","styles_scss","layout_SmallContent","__webpack_require__","d","__webpack_exports__","query","TopLevelPage","props","allPrismicTopLevelPage","edges","Fragment","layout","BlockStyle","flex","AlignItems","css","_templateObject2","JustifyContent","BgTint","Width","maxWidth","Base","Grid","SiteWidth","Padding","Root","Size","Block","children","BgMatch","BgAlt","ImgMatch","src","AltText","ImgQuery","SlideSectionStyle","Sm","Media","Md","Inner","SectionInnerStyle","Gutter","Left","Right","Content","SectionContentStyle","_templateObject3","SectionHeader","_templateObject4","_templateObject5","Transition","Duration","CssEase","CallToAction","_templateObject6","NextArrow","style","onClick","Object","assign","onKeyPress","role","tabIndex","Icons","PrevArrow","SectionSlider","_React$Component","call","this","render","_settings","_this","ArrowColor","useTransform","infinite","console","log","settings","dots","speed","autoplaySpeed","draggable","nextArrow","prevArrow","responsive","breakpoint","Helmet","rel","type","href","lib_default","ref","h","slider","React","Component","Icon","ViewAll","SlideSection_styles_scss","Btn","Label","IconclassName","SlideSection_SectionSlider","TextColr","Widget","Container","WrapperLock","createGlobalStyle","WrapperRelease","HorizontalContentStyle","Footer","Nav","FadeIn","SlideColumnContainer","Column","Divider","ColWidth","HeroInnerStyle","imgRight","imgLeft","imgTop","imgBottom","imgWidth","HeroContentStyle","FullWidth","HeroInner","HeroContent","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styles_scss__WEBPACK_IMPORTED_MODULE_2__","SimpleSectionStyle","Primary","FluidHeight","SimpleSection","SimpleSection_styles_scss","SimpleHeroStyle","Tint","TintBorder","SimpleHero","Hero","BreadCrumb","Link","Bread","Crumbs","crumb","to","MasonrySectionStyle","ColumnGap","Radius","MasonrySection","PaddingY","MasonrySection_styles_scss","SlideColumn","react__WEBPACK_IMPORTED_MODULE_1___default","_styles_scss__WEBPACK_IMPORTED_MODULE_4__","components_library_Widgets_Container___WEBPACK_IMPORTED_MODULE_3__","column","slice_type","Type","sideHeaderWidgetDataTransformer","sideWidgetDataTransformer","defaultWidgetDataTransformer","VerticalContentStyle","BgImage","Mint","Tahoe","SocialStripStyle","Margin","span","SocialStrip","Location","target","_styles_scss__WEBPACK_IMPORTED_MODULE_1__","handleWheel","bind","assertThisInitialized_default","inheritsLoose_default","_proto","prototype","e","deltaY","deltaX","slickPrev","slickNext","_this2","variableWidth","WrapperControl","onWheel","c","HeroStripStyle","ViewWidthFontSize","HeroStrip","Items","HeroStrip_styles_scss","Item","gatsby_browser_entry","Caption","SplitSectionStyle","Site","SplitSection","SplitSection_styles_scss","CastleStyle","CastleHeroStyle","styles_scss_templateObject","CastleHero","location","primaryData","repeatableData","CastleHero_styles_scss","padding","replace","split","background_color","background_image","text_color","breadcrumb_url","Breadcrumb","breadcrumb_label","itemProp","headline","body_text","cta_destination","cta_label","cta_bg_color","cta_text_color","IconPosition","cta_icon","IconClass","IconFas","social_sharing","toLowerCase","CastleFullSplitSection_styles_scss_templateObject","CastleSplitSection","CastleFullSplitSection_styles_scss","direction","image","alt","CastleSimpleSectionStyle","CastleSimpleSection_styles_scss_templateObject","CastleSimpleSection","CastleSimpleSection_styles_scss","text_alignment","CastleSplitSection_styles_scss_templateObject","CastleSplitSection_styles_scss","CastleSplitImageHero_styles_scss_templateObject","CastleSplitImageHero_styles_scss","CastlePromotionalStrip_styles_scss_templateObject","length","CastlePromotionalStrip_styles_scss","bg_color","caption","label","destination","promotionalItemsTransformer","StickyScrollSectionStyle","StickyScrollSection_styles_scss_templateObject","Slate","ReleaseOverflow","StickyScrollSection_templateObject","StickyScrollSection","Gallery","GalleryQueries","Button","StickyScrollSection_styles_scss","Subheadline","Body","Img","Src","Alt","Fluid","CastleStickyGallery_styles_scss_templateObject","CastleStickyGallery_styles_scss","Section_StickyScrollSection","subheadline","galleryImgQueriesTransformer","CastleWidgetRow_styles_scss_templateObject","CastleWidgetRow","CastleWidgetRow_styles_scss","widget_tint_opacity","widgetContentTransformer","section_size","CastleBuilder","bricks","Bricks","brick","components_CastleHero","CastleFullSplitSection","components_CastleSplitSection","CastleSplitImageHero","CastlePromotionalStrip","CastleStickyGallery","components_CastleSimpleSection","components_CastleWidgetRow","Castle","Castle_CastleBuilder","SpecialListingsStyle","SpecialsListings_templateObject","SpecialCards","allPrismicSpecial","Special","tagList","tags","styledTagList","tag","Default","pathname","uid","title","icon","cover_image","BgImageAltText","_2565930568","SpecialListings","LocationData","SpecialsListings_styles_scss","featuredSpecials","SpecialsListings_SpecialCards"],"mappings":"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","file":"component---src-templates-top-level-page-index-js-963ab5709a1c1287417c.js","sourcesContent":["// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n/* Widget Content */\nconst TopLevelPageStyles = styled.div`\n  .specials-listings {\n    &:before {\n      display: none;\n    }\n  }\n`;\n\nexport default TopLevelPageStyles;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// templates/Question.js:\n// This is the Question template of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport Device from 'components/core/DeviceQuery';\nimport Layout from 'components/core/Layout';\n\n// Components\nimport { HorizontalContent } from 'components/core/HorizontalContent';\nimport VerticalContent from 'components/core/VerticalContent';\nimport SlideGroup from 'components/core/HorizontalContent/SlideGroup';\nimport SlideSection from 'components/library/Section/SlideSection';\nimport SpecialsListings from 'components/library/SpecialsListings';\n\n// Styles\nimport TopLevelPageStyles from './styles.scss'\n\n// Data Transfomers\nimport { columnDataTransformer } from 'components/core/HorizontalContent/SlideColumn';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Large Device Content\nconst LargeContent = ({ node, id }) => {\n  const columns = node.dashboard_link.document[0].data.body;\n\n  return (\n    <HorizontalContent>\n      <SlideGroup\n        className={id}\n        SlidesData={[{ Name: id, Columns: columnDataTransformer(columns) }]}\n      />\n    </HorizontalContent>\n  );\n};\n\n// Function to create our Items map.\nconst widgetContentTransformer = data => {\n  if (data != 0) {\n    // Create a new map from Prismic Data.\n    let itemList = data.map((item, index) => {\n      return {\n        // Begin WidgetContent\n        Flex: 1,\n        WidgetContent: [\n          {\n            Destination: item.widget_destination,\n            Style: 'Generic',\n            Meta: {\n              Generic: {\n                BgColor: item.widget_bg_color,\n                BgQuery: item.widget_background_image.localFile\n                  ? item.widget_background_image.localFile.childImageSharp.fluid\n                  : false,\n                Subhead: item.widget_subheadline,\n                Headline: item.widget_headline.text,\n                TextColor: item.widget_text_color,\n                IconColor: item.widget_text_color,\n                IconName: item.widget_icon_class, // FontAwesome Icon Name\n                TintColor: item.widget_tint_color\n                  ? item.widget_tint_color\n                  : Theme.Color.Black,\n                TintOpacity: item.tint_opacity,\n                IconSize: '',\n              },\n            },\n          },\n        ],\n        // End WidgetContent\n      };\n    });\n\n    // Return new map.\n    return itemList;\n  } else {\n    // Else, don't return anything.\n    return null;\n  }\n};\n\n// Small Device Content\nconst SmallContent = ({ node, id }) => {\n  const sections = node.body;\n\n  return (\n    <VerticalContent>\n      {sections.map((section, index) => {\n        return (\n          <SlideSection\n            key={index}\n            Widgets={widgetContentTransformer(section.items)}\n            SectionSize={\n              section.primary.section_height_multiple\n                ? section.primary.section_height_multiple\n                : 10\n            }\n            Header={section.primary.section_headline.text}\n            Theme={{\n              TextColor: Theme.Color.Nightsky,\n              BgColor: 'none',\n            }}\n            SliderSettings={{\n              slidesToShow: 1,\n              slidesToScroll: 1,\n              autoplay:\n                section.primary.section_autoplay == 'Yes' ? true : false,\n              arrows: section.primary.section_arrows == 'Yes' ? true : false,\n            }}\n          />\n        );\n      })}\n\n      <SpecialsListings\n        BgColor={Theme.Color.White}\n        TextColor={Theme.Color.Nightsky}\n        PageLocation=\"/\"\n        Header=\"All Specials\"\n      />\n      {/* {console.log(sections)}\n      {console.log(widgetContentTransformer(sections[0].items))} */}\n    </VerticalContent>\n  );\n};\n\n// The Question Template\nconst TopLevelPageTemplate = ({ data, node, id, elements }) => (\n  <Layout\n    BgColor={\n      node.color_background ? node.color_background : Theme.Color.Background\n    }\n    PrimaryColor={\n      node.color_primary ? node.color_primary : Theme.Color.Nightsky\n    }\n    SecondaryColor={\n      node.color_secondary ? node.color_secondary : Theme.Color.Nightsky\n    }\n    TertiaryColor={\n      node.color_tertiary ? node.color_tertiary : Theme.Color.White\n    }\n  >\n    <Device Query=\"Desktop\">\n      <LargeContent node={node} id={id} />\n    </Device>\n\n    <Device Query=\"Mobile\">\n      <TopLevelPageStyles>\n        <SmallContent node={node} id={id} />\n      </TopLevelPageStyles>\n    </Device>\n  </Layout>\n);\n\nexport default TopLevelPageTemplate;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Top Level Page Template:\n// This is the top level page template.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Templates\nimport TopLevelPageTemplate from './layout';\n\n// Load Castle Fragments\nimport 'components/library/Castle';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Question Template\nconst TopLevelPage = props => {\n  const node = props.data.allPrismicTopLevelPage.edges[0].node;\n\n  return (\n    <>\n      <TopLevelPageTemplate node={node.data} id={node.id} data={props} />\n    </>\n  );\n};\n\nexport default TopLevelPage;\n\n// GraphQL Queries\n// ///////////////////////////////////////////////////////////////////\nexport const query = graphql`\n  query($Id: String!) {\n    allPrismicTopLevelPage(filter: { id: { eq: $Id } }) {\n      edges {\n        node {\n          id\n          uid\n          data {\n            ## Page Settings\n            description\n            page_title {\n              text\n            }\n            opengraph_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n\n            ## Mobile Sections\n            body {\n              slice_type\n              primary {\n                section_headline {\n                  text\n                }\n                section_height_multiple\n                section_arrows\n                section_autoplay\n              }\n              items {\n                widget_background_image {\n                  alt\n                  localFile {\n                    id\n                    childImageSharp {\n                      fluid(maxWidth: 1200) {\n                        ...GatsbyImageSharpFluid\n                      }\n                    }\n                  }\n                }\n                widget_headline {\n                  text\n                }\n                widget_subheadline\n                widget_destination\n                widget_icon_class\n                widget_text_color\n                widget_bg_color\n                tint_color\n                tint_opacity\n              }\n            }\n\n            ## Desktop Sections\n            dashboard_link {\n              id\n              ... on dashboardLink_2 {\n                id\n                document {\n                  id\n                  data {\n                    dashboard_name {\n                      html\n                      text\n                    }\n                    body {\n                      __typename\n                      ... on PrismicDashboardBodyColumn {\n                        slice_type\n                        items {\n                          widget_background_image {\n                            alt\n                            localFile {\n                              id\n                              childImageSharp {\n                                fluid(maxWidth: 1200) {\n                                  ...GatsbyImageSharpFluid\n                                }\n                              }\n                            }\n                          }\n                          widget_headline {\n                            text\n                          }\n                          widget_subheadline\n                          widget_destination\n                          widget_style\n                          widget_width_multiple\n                          widget_height_fraction\n                          widget_icon_class\n                          widget_text_color\n                          widget_bg_color\n                          tint_color\n                          tint_opacity\n                        }\n                      }\n\n                      ... on PrismicDashboardBodyTitleColumn {\n                        slice_type\n                        primary {\n                          widget_headline {\n                            text\n                          }\n                          widget_intro_copy\n                          widget_body_copy\n                        }\n                      }\n\n                      ... on PrismicDashboardBodyDivider {\n                        slice_type\n                        primary {\n                          type\n                        }\n                      }\n\n                      ... on PrismicDashboardBodyTitleWidget {\n                        slice_type\n                        primary {\n                          widget_headline {\n                            text\n                          }\n                          widget_subheadline\n                          widget_destination\n                          widget_width_multiple\n                          widget_icon_class\n                          widget_text_color\n                          widget_bg_color\n                          tint_color\n                          tint_opacity\n                          widget_background_image {\n                            alt\n                            localFile {\n                              id\n                              childImageSharp {\n                                fluid(maxWidth: 1200) {\n                                  ...GatsbyImageSharpFluid\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// ////////////////////////////////////////////////////////////////////\n// End Component\n","// <Block> Styles:\n// This is the primary column component.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\nexport const BlockStyle = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.flex : 'column')};\n  position: relative;\n  flex-shrink: 1;\n  ${props => (props.BgColor ? 'background: ' + props.BgColor + ';' : null)}\n  ${props => (props.TextColor ? 'color: ' + props.TextColor + ';' : null)}\n  \n  /* Item Alignment. We are aligning items */\n  /* 'stretch' by default. */\n  ${props =>\n    props.AlignItems ? 'align-items: ' + props.AlignItems + ';' : null}\n\n  /* Centered Style */\n  ${props =>\n    props.Style == 'centered' &&\n    css`\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto;\n\n      p,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        text-align: center;\n        width: 100%;\n      }\n\n      .btn {\n        margin: 0 auto;\n      }\n\n      .block-content {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n      }\n    `}\n\n  /* The block content. */\n  .block-content {\n    z-index: 2;\n    margin: 0 auto;\n    width: 100%;\n    ${props => (props.JustifyContent ? 'display:flex' : null)};\n    ${props =>\n      props.JustifyContent\n        ? 'justify-content: ' + props.JustifyContent + ';'\n        : null}\n\n    p {\n      max-width: 80%;\n    }\n  }\n\n  /* Background images with Gatsby-Img */\n  .block-img {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n\n    .img {\n      flex: 1;\n    }\n  }\n\n  /* Width Multiple */\n    ${props =>\n      props.Width ? 'width: ' + props.Width * 100 + '%;' : 'flex: 1;'}\n  max-width: ${props =>\n    props.maxWidth\n      ? 'calc(' + Theme.Base.Grid.SiteWidth + ' * ' + props.maxWidth + ')'\n      : Theme.Base.Grid.SiteWidth};\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n`;\n\nexport default BlockStyle;\n//////////////////////////////////////////////////////////////////////\n","// <Block> Component:\n// This is the sitewide block style of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Styles\nimport BlockStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Block = ({\n  children,\n  className,\n  Style,\n  maxWidth,\n  Width,\n  Padding,\n  AlignItems,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  BgTint,\n  BgColor,\n  TextColor,\n  JustifyContent,\n  Flex,\n}) => (\n  <BlockStyle\n    className={className ? className + ' block' : 'block'}\n    Width={Width}\n    maxWidth={maxWidth}\n    Style={Style}\n    Padding={Padding}\n    AlignItems={AlignItems ? AlignItems : false}\n    JustifyContent={JustifyContent ? JustifyContent : false}\n    BgTint={BgTint}\n    BgColor={BgColor}\n    TextColor={TextColor}\n    Flex={Flex}\n  >\n    {/* Block Content */}\n    {children ? <div className=\"block-content\">{children}</div> : null}\n\n    {/* For Background Images */}\n    {BgMatch ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n\n    {/* For Background Images with ImgQuery */}\n    {BgQuery ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgQuery src={BgQuery} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n  </BlockStyle>\n);\n\nexport default Block;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SlideSectionStyle = styled.div`\n  width: 100%;\n  overflow: hidden;\n\n  /* Slick styles */\n  .slick-slider {\n    padding-bottom: ${Theme.Base.Size.Sm};\n    margin-bottom: ${Theme.Base.Size.Sm};\n\n    .slick-slide {\n      &:first-child {\n        .widget {\n          padding-left: 0;\n        }\n      }\n    }\n    .slick-list {\n      overflow: visible;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      z-index: 400;\n      background: rgba(0, 0, 0, 0);\n\n      @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n        top: calc((${Root.Size} * 1.8) * -1);\n        width: calc(${Root.Size} * 1.5);\n        height: calc(${Root.Size} * 1.5);\n      }\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc((${Root.Size} * 0.75) + (${Root.Size} * 0.25));\n\n        @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n          right: calc((${Root.Size} * 1.5) + (${Root.Size} * 0.25));\n        }\n      }\n\n      &.slick-next {\n        right: 0;\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n\n    .slick-dots {\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: auto;\n      padding: 0;\n      margin: 0;\n\n      @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n        bottom: calc((${Root.Size} * .3) * -1);\n      }\n\n      li {\n        margin: 0;\n        padding: 0;\n        width: 10px;\n        height: 10px;\n        margin-right: 5px;\n\n        button {\n          margin: 0;\n          padding: 0;\n          position: relative;\n          width: 10px;\n          height: 10px;\n          margin-right: 5px;\n\n          &:before {\n            content: '';\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            width: 7px;\n            height: 7px;\n            border: 1px solid ${Theme.Color.Black};\n            border-radius: 50%;\n          }\n        }\n      }\n    }\n  }\n`;\n\nSlideSectionStyle.Inner = styled(SectionInnerStyle)`\n  width: 100%;\n  padding-bottom: 0;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: 0'};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n    padding-left: ${Root.Grid.Gutter.Left};\n    padding-right: ${Root.Grid.Gutter.Right};\n  }\n`;\n\nSlideSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: column;\n\n  .widget {\n    padding: calc(${Root.Size} / 6);\n    height: ${props =>\n      props.SectionSize\n        ? 'calc(' + Root.Size + '*' + props.SectionSize + ')'\n        : 'calc(' + Root.Size + '* 3)'};\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      padding: calc(${Root.Size} / 3) calc(${Root.Size} / 4);\n      height: ${props =>\n        props.SectionSize\n          ? 'calc((' + Root.Size + '* 3) * ' + props.SectionSize + ')'\n          : 'calc((' + Root.Size + '* 3) * 3)'};\n    }\n  }\n`;\n\nSlideSectionStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n`;\n\nSlideSectionStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Nightsky)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  i {\n    margin-right: ${Theme.Base.Size.Sm};\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n`;\n\nSlideSectionStyle.CallToAction = styled.div`\n  display: flex;\n\n  .btn {\n    background-color: rgba(0, 0, 0, 0);\n    color: ${Theme.Color.Black};\n\n    svg {\n      fill: ${Theme.Color.Black};\n      border: ${Theme.Color.Black};\n    }\n\n    i {\n      color: ${Theme.Color.Black};\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nexport default SlideSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SlideSection.js:\n//\n// Usage:\n// <SlideSection\n// Widgets={Widgets}\n// SectionSize=\"Large\"\n// SlidesToShow={4}\n// Header=\"Headline\"\n// ViewAll={['/', 'View All']}\n// />\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\nimport { Link } from 'gatsby';\n\n// Components\nimport WidgetContainer from 'components/library/Widgets/Container/';\nimport Btn from 'components/library/Btn';\nimport Icon from 'elements/Icons';\n\n// Constants\nimport { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport SlideSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Section Slider:\n// For displaying widgets within a SlideSection.\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The Slider itself.\nclass SectionSlider extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n\n    // Get any theming.\n    const ArrowColor = this.props.ArrowColor;\n\n    // Get any custom Slider Settings we want to pass.\n    const slidesToShow = this.props.SliderSettings.slidesToShow\n      ? this.props.SliderSettings.slidesToShow\n      : 1;\n    const slidesToScroll = this.props.SliderSettings.slidesToScroll\n      ? this.props.SliderSettings.slidesToScroll\n      : 1;\n    const autoplay = this.props.SliderSettings.autoplay\n      ? this.props.SliderSettings.autoplay\n      : false;\n    const useTransform = this.props.SliderSettings.useTransform\n      ? this.props.SliderSettings.useTransform\n      : true;\n    const infinite = this.props.SliderSettings.infinite\n      ? this.props.SliderSettings.infinite\n      : false;\n    const arrows = this.props.SliderSettings.arrows\n      ? this.props.SliderSettings.arrows\n      : false;\n\n    console.log(useTransform);\n\n    // Pass into Slick Settings.\n    const settings = {\n      dots: true,\n      speed: 550,\n      arrows: false,\n      autoplaySpeed: 4000,\n      slidesToShow: slidesToShow,\n      slidesToScroll: slidesToScroll,\n      autoplay: autoplay,\n      infinite: infinite,\n      draggable: true,\n      arrows: arrows,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n      useTransform: useTransform,\n      responsive: [\n        {\n          breakpoint: Base.Media.Width.Md + 'px',\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n          },\n        },\n      ],\n    };\n\n    return (\n      <>\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n        <Slider ref={h => (this.slider = h)} {...settings}>\n          {this.props.children}\n        </Slider>\n      </>\n    );\n  }\n}\n\n// The SubLevel Page Itself\nconst SlideSection = ({\n  Widgets,\n  SectionSize,\n  SliderSettings,\n  Header,\n  Icon,\n  ViewAll,\n  Theme,\n  Gutter,\n}) => (\n  <SlideSectionStyle className=\"slide-section\">\n    <SlideSectionStyle.Inner Gutter={Gutter} className=\"slide-section-inner\">\n      <SlideSectionStyle.Content SectionSize={SectionSize}>\n        <SlideSectionStyle.SectionHeader>\n          <SlideSectionStyle.Headline TextColor={Theme.TextColor}>\n            {Icon ? <i className={'fas fa-' + Icon} /> : null}\n            {Header ? <h2>{Header}</h2> : null}\n          </SlideSectionStyle.Headline>\n          {ViewAll ? (\n            <SlideSectionStyle.CallToAction>\n              <Btn\n                Destination={ViewAll[0]}\n                BgColor=\"inherit\"\n                Label={ViewAll[1]}\n                IconclassName=\"carat\"\n              />\n            </SlideSectionStyle.CallToAction>\n          ) : null}\n        </SlideSectionStyle.SectionHeader>\n\n        <SectionSlider\n          SliderSettings={SliderSettings}\n          ArrowColor={Theme.TextColr}\n        >\n          {/* Map our Widgets data. */}\n          {Widgets.map((Widget, index) => {\n            // Pass our Widgets data to our WidgetContainers\n            return (\n              <WidgetContainer\n                key={index}\n                WidgetContent={Widget.WidgetContent}\n                Flex={Widget.Flex ? Widget.Flex : null}\n              />\n            );\n          })}\n        </SectionSlider>\n      </SlideSectionStyle.Content>\n    </SlideSectionStyle.Inner>\n  </SlideSectionStyle>\n);\n\nexport default SlideSection;\n","// WrapperControl.js:\n// For controlling our `.wrapper` class app-wide.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Lock Wrapper Scroll\nexport const WrapperLock = createGlobalStyle`\n  html, body {\n    overflow: hidden;\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: visible !important; \n      overflow: visible;\n      \n      .wrapper {\n        overflow-y: hidden;\n      }\n    }\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow: hidden;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow: hidden; \n      overflow-y: hidden;\n    }\n  }\n\n  .slick-slider {\n    touch-action: none !important;\n  }\n`;\n\n// Release Wrapper Scroll\nexport const WrapperRelease = createGlobalStyle`\n  html, body {\n      overflow: auto;\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow-y: visible;\n      height: auto;\n      position: absolute;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: hidden;\n      position: absolute;\n    }\n  }\n`;\n\n// Wrapper Flex Reseet\nexport const WrapperFlexStart = createGlobalStyle`\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      justify-content: flex-start;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      justify-content: space-between;\n    }\n  }\n`;\n","// Layout Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Keyframe\nimport { FadeIn } from 'components/core/Transition/Keyframes';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst HorizontalContentStyle = styled.div`\n  width: 100%;\n  padding-left: 0;\n  padding-right: 0;\n  padding-bottom: ${Root.Footer.Size};\n  overflow: visible;\n\n  .slick-slider {\n    .slick-list {\n      overflow: visible;\n    }\n\n    .slick-track {\n      display: flex;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      background: rgba(0, 0, 0, 0);\n      z-index: 1500;\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc(\n          ((${Root.Size} * 0.75) + (${Root.Size} * 0.25)) +\n            ${Root.Grid.Gutter.Right}\n        );\n      }\n\n      &.slick-next {\n        right: calc(${Root.Grid.Gutter.Right});\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n  }\n`;\n\n// The Slide Group Wrapper\nHorizontalContentStyle.Inner = styled.div`\n  width: 100%;\n  padding: calc(${Root.Nav.Size} * 2) 0 0 0;\n\n  /* Padding on first slide */\n  .slick-slide {\n    padding: 0;\n    overflow: visible;\n    div {\n      outline: 0;\n      &:focus {\n        outline: 0;\n      }\n      .col {\n        &:first-child {\n          padding-left: ${Theme.Base.Size.Sm};\n        }\n      }\n    }\n    &:first-child {\n      padding: 0 0 0 ${Theme.Base.Size.Sm};\n      .col {\n        &:first-child {\n          padding-left: 0;\n        }\n      }\n    }\n  }\n\n  .widget {\n    ${FadeIn};\n  }\n`;\n\n// The Individual Slide Wrapper\nHorizontalContentStyle.SlideColumnContainer = styled.div`\n  width: 100%;\n  padding: 0;\n  overflow: visible;\n  height: calc(100vh - (${Root.Nav.Size} * 2 + ${Root.Footer.Size}));\n`;\n\n// The Individual Slide Inner\nHorizontalContentStyle.SlideColumnContainer.Inner = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  overflow: visible;\n  padding-bottom: ${Theme.Base.Size.Sm};\n  height: calc(100vh - (${Root.Nav.Size} * 2 + ${Root.Footer.Size}));\n`;\n\n// The Column Wrapper\nHorizontalContentStyle.Column = styled.div`\n  padding: ${Theme.Base.Size.Sm} ${Theme.Base.Size.Sm} ${Theme.Base.Size.Sm} 0;\n  height: calc(100vh - (${Root.Nav.Size} * 2 + ${Root.Footer.Size}));\n  display: flex;\n  flex-direction: column;\n  flex: ${props => (props.Divider ? 'unset' : '1')};\n  width: ${props =>\n    props.ColWidth\n      ? props.ColWidth\n      : props.Divider\n      ? Theme.Base.Size.Md\n      : 'auto'};\n\n  .col-inner {\n    min-width: 250px;\n  }\n`;\n\nHorizontalContentStyle.Column.Inner = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 100%;\n  max-width: 100%;\n  .widget {\n    &:first-child {\n      padding-top: 0;\n    }\n  }\n\n  ${props => {\n    if (props.Divider)\n      return `\n        width: ${Theme.Base.Size.Md};\n        &:before {\n          content: '';\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          // left: calc(50% - ${Base.Size.Sm / 2 + 'px'});\n          left: 50%;\n          width: 1px;\n          opacity: .05;\n          background-color: { Theme.Color.Indigo };\n        }\n    `;\n  }}\n`;\n\nexport default HorizontalContentStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// MenuHero Styles:\n// These are nearly identical to the Section base styles.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInnerStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  position: relative;\n  overflow: hidden;\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : 'padding-top: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : 'padding-bottom: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ' * ' +\n        props.Padding[3] +\n        ')'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  .hero-img {\n    pointer-events: none;\n    ${props =>\n      props.imgRight || props.imgLeft || props.imgTop || props.imgBottom\n        ? 'position: absolute'\n        : null};\n    ${props => (props.imgRight ? 'right: ' + props.imgRight : null)};\n    ${props => (props.imgLeft ? 'left: ' + props.imgLeft : null)};\n    ${props => (props.imgBottom ? 'bottom: ' + props.imgBottom : null)};\n    ${props => (props.imgTop ? 'top: ' + props.imgTop : null)};\n    ${props => (props.imgWidth ? 'width: ' + props.imgWidth : null)};\n  }\n\n  .btn-secondary {\n    margin-left: calc(${Root.Size} / 4);\n  }\n`;\n\nexport const HeroContentStyle = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: ${props =>\n    props.JustifyContent ? props.JustifyContent : 'flex-start'};\n  max-width: ${props => (props.FullWidth ? '100%' : Theme.Base.Grid.SiteWidth)};\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Hero Component:\n// This is a helper component containing base\n// Hero styles shared across all Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { HeroInnerStyle, HeroContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInner = ({\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  Size,\n  Flex,\n  Padding,\n  children,\n  JustifyContent,\n}) => (\n  <HeroInnerStyle\n    Size={Size ? Size : false}\n    Padding={Padding ? Padding : false}\n    imgRight={imgRight ? imgRight : false}\n    imgLeft={imgLeft ? imgLeft : false}\n    imgBottom={imgBottom ? imgBottom : false}\n    imgTop={imgTop ? imgTop : false}\n    imgWidth={imgWidth ? imgWidth : false}\n  >\n    <HeroContentStyle\n      className=\"hero-content\"\n      JustifyContent={JustifyContent}\n      Flex={Flex}\n    >\n      {children}\n    </HeroContentStyle>\n  </HeroInnerStyle>\n);\n\nexport const HeroContent = ({ children, Flex }) => (\n  <HeroContentStyle Flex={Flex} className=\"hero-content\">\n    {children}\n  </HeroContentStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SimpleSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nSimpleSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n    .img {\n      height: 100%;\n    }\n  }\n`;\n\nSimpleSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n`;\n\nexport default SimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SimpleSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  FluidHeight,\n  Gutter,\n  Flex,\n  children,\n}) => (\n  <SimpleSectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <SimpleSectionStyle.Inner\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <SimpleSectionStyle.Content\n        FluidHeight={FluidHeight}\n        Flex={Flex}\n        className=\"simple-section\"\n      >\n        {children}\n      </SimpleSectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </SimpleSectionStyle.Inner>\n  </SimpleSectionStyle>\n);\n\nexport default SimpleSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SimpleHero Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHeroStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  z-index: 1;\n  position: relative;\n  /* margin-top: calc(${Root.Nav.Size} * -1); */\n  background: ${props => (props.Background ? props.Background : 'none')};\n  background-size: cover;\n  background-position: center center;\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n  align-self: flex-start;\n  justify-self: flex-start;\n\n  /* Background Tint */\n  ${props =>\n    props.Tint\n      ? `\n  &.tint {\n    &:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      top: 0;\n      background-color: rgba(0,0,0,` +\n        props.Tint +\n        `);\n    }\n    .inner {\n      z-index: 500;\n    }\n  }\n  `\n      : null}\n  \n  /* Background Tint */\n  ${props =>\n    props.TintBorder\n      ? `\n      &:after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;      \n      top: 0;\n      height: 1px;\n      z-index: 5;\n      background-color: rgba(0,0,0, 0.05);\n    }\n  `\n      : null}\n\n  /* Block Spacing */\n  .block {\n    &:first-child {\n      padding-right: calc(${Root.Size} / 2);\n    }\n    &:second-child {\n      padding-left: calc(${Root.Size} / 2);\n    }\n  }\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n    height: 100%;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img, .img {\n      height: 100%;\n    }\n    .hero-img, .gatsby-image-wrapper {\n      position: unset !important;\n    }\n  }\n`;\n\nexport default SimpleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Helpers\nimport { HeroInner } from './../../Hero';\n\n// Styles\nimport SimpleHeroStyle from './styles.scss';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHero = ({\n  Background,\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  TextColor,\n  Tint,\n  Padding,\n  Size,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  Flex,\n  JustifyContent,\n  TintBorder,\n  children,\n}) => (\n  <SimpleHeroStyle\n    Background={Background}\n    TextColor={TextColor}\n    Tint={Tint}\n    TintBorder={TintBorder}\n    className={Tint ? 'tint' : null}\n  >\n    <HeroInner\n      Size={Size ? Size : false}\n      Padding={Padding}\n      imgRight={imgRight ? imgRight : false}\n      imgLeft={imgLeft ? imgLeft : false}\n      imgBottom={imgBottom ? imgBottom : false}\n      imgTop={imgTop ? imgTop : false}\n      imgWidth={imgWidth ? imgWidth : false}\n      JustifyContent={JustifyContent}\n      className=\"inner\"\n      Flex={Flex}\n    >\n      {children}\n    </HeroInner>\n    {BgMatch ? (\n      <div className=\"section-img\">\n        <ImgMatch src={BgMatch} AltText={BgAlt} className=\"hero-img\" />\n      </div>\n    ) : null}\n    {BgQuery ? (\n      <div className=\"section-img\">\n        <ImgQuery src={BgQuery} AltText=\"Hero Alt\" className=\"hero-img\" />\n      </div>\n    ) : null}\n  </SimpleHeroStyle>\n);\n\nexport default SimpleHero;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Breadcrumb> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const BreadCrumb = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  width: 100%;\n  align-items: center;\n  transform: translateX(calc(1rem * -1.5));\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 50%;\n      left: calc((${Theme.Base.Size.Sm}) * -1);\n      transform: translateY(-50%);\n      width: 2px;\n      height: 2px;\n      border-radius: 50%;\n      background-color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    svg {\n      transform: rotate(180deg) translateX(0%);\n      transform-origin: center center;\n      width: 1rem;\n      height: 1rem;\n      fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n      transition: all 0.25s ease;\n      fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    }\n\n    &:hover {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      text-decoration: none;\n      svg {\n        transform: rotate(180deg) translateX(50%);\n      }\n    }\n  }\n`;\n\nBreadCrumb.Label = styled(Link)`\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  margin-left: calc(${Theme.Base.Size.Sm} * 1.75);\n  position: relative;\n  text-transform: capitalize;\n\n  &:first-child {\n    margin-left: 0;\n    position: relative;\n\n    &:before {\n      display: none;\n    }\n  }\n`;\n\nexport default BreadCrumb;\n//////////////////////////////////////////////////////////////////////\n","// <Bread Crumbs=\"\"> Component:\n// The breadcrumb component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport BreadCrumbStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Bread = ({ Crumbs, TextColor }) => (\n  <BreadCrumbStyle TextColor={TextColor}>\n    {Crumbs.map((crumb, index) => {\n      return (\n        <BreadCrumbStyle.Label\n          to={crumb.Destination}\n          key={index}\n        >\n          {/* // Hide back button if nested item. */}\n          {index == 0 ? (\n            <Icon className=\"svg-carat\" Name=\"carat\" TextColor={TextColor} />\n          ) : null}\n          {crumb.Label}\n        </BreadCrumbStyle.Label>\n      );\n    })}\n  </BreadCrumbStyle>\n);\n\nexport default Bread;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MasonrySecction Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst MasonrySectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n  overflow: visible;\n`;\n\nMasonrySectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n  overflow: visible;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n\n  @media (max-width: calc(${Theme.Base.Media.Width.Md})) {\n    padding-left: ${Root.Grid.Gutter.Left};\n    padding-right: ${Root.Grid.Gutter.Right};\n  }\n`;\n\nMasonrySectionStyle.Content = styled.div`\n  width: 100%;\n  position: relative;\n  margin: 0 auto;\n  overflow: visible;\n  max-width: ${Theme.Base.Grid.SiteWidth};\n\n  /* Performance fixes on Chrome & Safari\n  -webkit-backface-visibility: hidden;\n  -moz-backface-visibility: hidden;\n  -ms-backface-visibility: hidden;\n  backface-visibility: hidden;\n\n  /* Performance fixes on Chrome & Safari */\n  /* -webkit-perspective: 1000;\n  -moz-perspective: 1000;\n  -ms-perspective: 1000;\n  perspective: 1000; */\n\n  /* CSS Masonry */\n  /* Read more: https://w3bits.com/css-masonry/ */\n  /* column-width: 33%;\n  column-count: ${props => (props.Columns ? props.Columns : 3)};\n  column-gap: ${props =>\n    props.ColumnGap\n      ? ' calc(' + Root.Size + ' * ' + props.ColumnGap + ')'\n      : 'calc(' + Root.Size + '* .25)'};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    column-width: 100%;\n    column-count: 1;\n  } */\n\n\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n\n  .widget-content {\n    border-radius: ${Root.Radius};\n    box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n    position: relative;\n    overflow: hidden;\n    flex: 30%;\n    margin: calc(${Root.Size} / 5);\n    width: 30%;\n    display: flex;\n    color: ${Theme.Color.White};\n    margin-bottom: ${props =>\n      props.ColumnGap\n        ? ' calc(' + Root.Size + ' * ' + props.ColumnGap + ')'\n        : 'calc(' + Root.Size + '* .25)'};\n\n    .widget-headline {\n      margin-bottom: calc(${Root.Size} * 2);\n    }\n\n    a, i {\n      color: ${Theme.Color.White};\n    }\n    \n    svg {\n      fill: ${Theme.Color.White};\n    }\n  }\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    .widget-content {\n      flex: auto;\n      margin: calc(${Root.Size} / 5) 0;\n      width: 100%;\n    }\n  }\n`;\n\nexport default MasonrySectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// MasonrySection Component:\n// This is a component for a MasonryGrid of Widgets.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport MasonrySectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst MasonrySection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  PaddingY,\n  FluidHeight,\n  Gutter,\n  Columns,\n  ColumnGap,\n  children,\n}) => (\n  <MasonrySectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <MasonrySectionStyle.Inner\n      Size={PaddingY}\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <MasonrySectionStyle.Content\n        FluidHeight={FluidHeight}\n        className=\"masonry-section\"\n        Columns={Columns}\n        ColumnGap={ColumnGap}\n      >\n        {children}\n      </MasonrySectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </MasonrySectionStyle.Inner>\n  </MasonrySectionStyle>\n);\n\nexport default MasonrySection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SlideColumn.js\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Componentss\nimport WidgetContainer from 'components/library/Widgets/Container/';\n\n// Styles\nimport HorizontalContentStyle from './../styles.scss';\n\n// Data Transformers\nimport { defaultWidgetDataTransformer } from 'components/library/Widgets/Library/Default';\nimport { sideHeaderWidgetDataTransformer } from 'components/library/Widgets/Library/SideHeader';\nimport { sideWidgetDataTransformer } from 'components/library/Widgets/Library/SideWidget';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SlideColumn Itself\n// <SlideColumn Divider /> returns a Divider\nclass SlideColumn extends React.Component {\n  constructor(props) {\n    // Get our this.props\n    super(props);\n  }\n\n  render() {\n    const Divider = this.props.Divider;\n    const Widgets = this.props.Widgets;\n\n    // If it's a Divider:\n    if (Divider == true) {\n      return (\n        <HorizontalContentStyle.Column Divider className=\"divider\">\n          <HorizontalContentStyle.Column.Inner Divider />\n        </HorizontalContentStyle.Column>\n      );\n    }\n\n    // If it's not:\n    else {\n      return (\n        <HorizontalContentStyle.Column className=\"col\">\n          <HorizontalContentStyle.Column.Inner className=\"col-inner\">\n            {/* Map our Widgets data. */}\n            {Widgets.map((Widget, index) => {\n              // Pass our Widgets data to our WidgetContainers\n              return (\n                <WidgetContainer\n                  key={index}\n                  WidgetContent={Widget.WidgetContent}\n                  Flex={Widget.Flex}\n                  Width={Widget.Width}\n                />\n              );\n            })}\n          </HorizontalContentStyle.Column.Inner>\n        </HorizontalContentStyle.Column>\n      );\n    }\n  }\n}\n\nexport default SlideColumn;\n\n// Transformer:\n// This is for taking Prismic data and transforming it into something that\n// this component would like to handle. The Transformer is typically used\n// in /template/ pages where a GraphQL query from Prismic (or any data) source\n// is involved.\n//////////////////////////////////////////////////////////////////////\n\n// Function to create our Columns Map\nexport const columnDataTransformer = data => {\n  console.log('columnDataTransformer:');\n  console.log(data);\n\n  if (data) {\n    let columnMap = data.map((column, index) => {\n      switch (column.slice_type) {\n        case 'title_column':\n          return {\n            Type: column.slice_type,\n            Widgets: sideHeaderWidgetDataTransformer(column.primary),\n          };\n        case 'title_widget':\n          return {\n            Type: column.slice_type,\n            Widgets: sideWidgetDataTransformer(column.primary),\n          };\n        case 'column':\n          return {\n            Type: column.slice_type,\n            Widgets: defaultWidgetDataTransformer(column.items),\n          };\n        case 'divider':\n          return {\n            Type: column.slice_type,\n            Widgets: defaultWidgetDataTransformer(column.items),\n          };\n      }\n    });\n\n    return columnMap;\n  } else {\n    return 'null';\n  }\n};\n","// Section Component:\n// This is a helper component containing base\n// Section styles shared across all Section components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { SectionInnerStyle, SectionContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const SectionInner = ({ children }) => (\n  <SectionInnerStyle>\n    <SectionContentStyle>{children}</SectionContentStyle>\n  </SectionInnerStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Layout Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Keyframe\nimport { FadeIn } from 'components/core/Transition/Keyframes';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst VerticalContentStyle = styled.div`\n  width: 100%;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: calc(${Root.Nav.Size} + ${Theme.Base.Size.Sm});\n  padding-bottom: calc(${Root.Nav.Size} + (${Root.Size} * 3));\n  overflow: visible;\n`;\n\n// The Content Inner\nVerticalContentStyle.Inner = styled.div`\n  width: 100%;\n  padding: 0;\n  overflow: visible;\n\n  .widget {\n    ${FadeIn};\n  }\n`;\n\nexport default VerticalContentStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\nimport posed, { PoseGroup } from 'react-pose';\n\n// Constants\nimport { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Components\nimport SlideSection from 'components/library/Section/SlideSection';\n\n// Styles\nimport { createGlobalStyle } from 'styled-components';\nimport VerticalContentStyle from './styles.scss';\n\n// Assets\nimport BgPlaceholder from '../../../assets/images/placeholder_bg.jpg';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Widgets = [\n  {\n    // Begin WidgetContent\n    Flex: 1,\n    WidgetContent: [\n      {\n        Destination: '/learn/all/',\n        Style: 'Generic',\n        Meta: {\n          Generic: {\n            BgColor: Theme.Color.Nightsky,\n            BgImage: '',\n            Subhead: '',\n            Headline: 'All Questions',\n            TextColor: Theme.Color.White,\n            IconColor: Theme.Color.White,\n            IconName: 'leaf', // FontAwesome Icon Name\n            TintColor: '',\n            TintOpacity: '',\n            IconSize: '',\n          },\n        },\n      },\n    ],\n    // End WidgetContent\n  },\n  {\n    // Begin WidgetContent\n    Flex: 1,\n    WidgetContent: [\n      {\n        Destination: '/learn/recreational/',\n        Style: 'Generic',\n        Meta: {\n          Generic: {\n            BgColor: Theme.Color.Mint,\n            BgImage: '',\n            Subhead: '',\n            Headline: 'Recreational',\n            TextColor: Theme.Color.Black,\n            IconColor: Theme.Color.Black,\n            IconName: 'leaf', // FontAwesome Icon Name\n            TintColor: '',\n            TintOpacity: '',\n            IconSize: '',\n          },\n        },\n      },\n    ],\n    // End WidgetContent\n  },\n  {\n    // Begin WidgetContent\n    Flex: 1,\n    WidgetContent: [\n      {\n        Destination: '/learn/medical/',\n        Style: 'Generic',\n        Meta: {\n          Generic: {\n            BgColor: Theme.Color.Tahoe,\n            BgImage: '',\n            Subhead: '',\n            Headline: 'Medical',\n            TextColor: Theme.Color.White,\n            IconColor: Theme.Color.White,\n            IconName: 'leaf', // FontAwesome Icon Name\n            TintColor: '',\n            TintOpacity: '',\n            IconSize: '',\n          },\n        },\n      },\n    ],\n    // End WidgetContent\n  },\n];\n\n// The Content Itself\nconst VerticalContent = ({ children }) => {\n  if (children) {\n    return (\n      <VerticalContentStyle>\n        <VerticalContentStyle.Inner>{children}</VerticalContentStyle.Inner>\n      </VerticalContentStyle>\n    );\n  } else {\n    return (\n      <VerticalContentStyle>\n        <VerticalContentStyle.Inner>\n          <SlideSection\n            Widgets={Widgets}\n            SectionSize={4}\n            Header=\"Latest\"\n            Theme={{\n              TextColor: Theme.Color.Black,\n              BgColor: 'none',\n            }}\n            SliderSettings={{\n              slidesToShow: 1,\n              slidesToScroll: 1,\n              autoplay: true,\n              arrows: false,\n            }}\n          />\n          <SlideSection\n            Widgets={Widgets}\n            SectionSize={4}\n            Header=\"Medical\"\n            Theme={{\n              TextColor: Theme.Color.Black,\n              BgColor: 'none',\n            }}\n            SliderSettings={{\n              slidesToShow: 1,\n              slidesToScroll: 1,\n              autoplay: true,\n              arrows: false,\n            }}\n          />\n          <SlideSection\n            Widgets={Widgets}\n            SectionSize={4}\n            Header=\"Recreational\"\n            Theme={{\n              TextColor: Theme.Color.Black,\n              BgColor: 'none',\n            }}\n            SliderSettings={{\n              slidesToShow: 1,\n              slidesToScroll: 1,\n              autoplay: true,\n              arrows: false,\n            }}\n          />\n          <SlideSection\n            Widgets={Widgets}\n            SectionSize={4}\n            Header=\"Industry\"\n            Theme={{\n              TextColor: Theme.Color.Black,\n              BgColor: 'none',\n            }}\n            SliderSettings={{\n              slidesToShow: 1,\n              slidesToScroll: 1,\n              autoplay: true,\n              arrows: false,\n            }}\n          />\n        </VerticalContentStyle.Inner>\n      </VerticalContentStyle>\n    );\n  }\n};\n\nexport default VerticalContent;\n","// <SocialStripStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SocialStripStyle = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Array-based margins utilizing root variable multiple. */\n  ${props =>\n    props.Margin\n      ? 'margin-top: calc(' + Root.Size + ' * ' + props.Margin[0] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-right: calc(' + Root.Size + ' * ' + props.Margin[1] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-bottom: calc(' + Root.Size + ' * ' + props.Margin[2] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-left: calc(' + Root.Size + ' * ' + props.Margin[3] + ')'\n      : null};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    margin-right: calc(${Theme.Base.Size.Md} * 0.8);\n    position: relative;\n    font-size: calc(${Root.Size} / 2);\n    width: calc(${Root.Size} / 2);\n    height: calc(${Root.Size} / 2);\n\n    span {\n      width: 100%;\n      height: auto;\n      font-size: calc(${Root.Size} / 2);\n      i {\n        font-size: calc(${Root.Size} / 2);\n      }\n    }\n\n    i {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%) scale(1.8);\n      transform-origin: center center;\n      opacity: 0;\n      border-radius: 50%;\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover {\n      &:before {\n        opacity: 0.1;\n      }\n    }\n  }\n`;\n\nSocialStripStyle.Label = styled.span`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  svg {\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nexport default SocialStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// SocialStrip Component:\n// The SocialStrip component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SocialStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SocialStrip = ({ TextColor, Location, Margin }) => (\n  <SocialStripStyle Margin={Margin} TextColor={TextColor}>\n    <a\n      href={'https://www.facebook.com/sharer.php?u=' + Location}\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"facebook\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://twitter.com/intent/tweet?url=' +\n        Location +\n        '&text=Test&via=Test&hashtags=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"twitter\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://www.linkedin.com/shareArticle?mini=true&url=' +\n        Location +\n        '&title=Test&summary=Test&source=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"linkedin\" Color={TextColor} />\n    </a>\n  </SocialStripStyle>\n);\n\nexport default SocialStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// HorizontalContent.js:\n// For building out\n// Horizontally focused pages, like top-level\n// navigation pages.\n\n// Core\nimport React from 'react';\n\n// Styles\nimport HorizontalContentStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Horizontal Content Itself\nexport const HorizontalContent = ({ children }) => (\n  <HorizontalContentStyle>\n    <HorizontalContentStyle.Inner>{children}</HorizontalContentStyle.Inner>\n  </HorizontalContentStyle>\n);\n\nexport default HorizontalContent;\n","// SlideGroup.js:\n// For displaying SlideGroups.\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Constants\n// import { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport HorizontalContentStyle from '../styles.scss';\n\n// Components\nimport SlideColumn from '../SlideColumn';\nimport SlideTransformer from '../SlideTransformer';\nimport { WrapperLock } from './../../WrapperControl';\nimport Icon from 'elements/Icons';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The SlideGroup Itself\nexport class SlideGroup extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleWheel = this.handleWheel.bind(this);\n  }\n\n  handleWheel(e) {\n    // Disable defaults:\n    // e.preventDefault();\n\n    // Previous / Next Slide based on mouse scroll\n    if (e.deltaY < 0 || e.deltaX < 0 || e.deltaX > 0) {\n      this.slider.slickPrev();\n    } else {\n      this.slider.slickNext();\n    }\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n    const settings = {\n      dots: false,\n      speed: 1200,\n      arrows: true,\n      slidesToShow: 3,\n      slidesToScroll: 2,\n      variableWidth: true,\n      infinite: false,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n    };\n\n    // Slides Data\n    const SlidesData = this.props.SlidesData;\n\n    // Return Slides\n    return (\n      <>\n        <WrapperLock />\n\n        {/* Helmet to initiate Slick Styles */}\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n\n        {/* Initiate our Previous / Next Slide based on mouses scroll */}\n        <div onWheel={e => this.handleWheel(e)}>\n          <Slider ref={c => (this.slider = c)} {...settings}>\n            {/* Loop through our Slide Data */}\n            {/* Pass our Slide Columns data to the Slide */}\n            {SlidesData[0].Columns.map((Column, index) => {\n              // If our Column isn't a Divider\n              if (Column.Type != 'divider') {\n                // Pass our Widgets data to our Columns\n                return <SlideColumn key={index} Widgets={Column.Widgets} />;\n              }\n\n              // If our Column is a Divider\n              else {\n                return <SlideColumn key={index} Divider />;\n              }\n            })}\n          </Slider>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default SlideGroup;\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) calc(${Root.Size} / 2);\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.6;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.15;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// HeroStrip Component:\n// The HeroStrip component, typically used in Hero components.\n// Example: https://www.dropbox.com/s/fkq5n663abznqpt/Screenshot%202019-04-19%2018.20.13.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\n\n// Styles\nimport HeroStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst HeroStrip = ({ Items, BgColor, TextColor }) => (\n  <HeroStripStyle\n    className=\"hero-strip\"\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <HeroStripStyle.Inner TextColor={TextColor}>\n      {Items.map((Item, index) => {\n        if (Item.Destination) {\n          return (\n            <div key={index} className=\"hero-strip-item focus\">\n              <Link to={Item.Destination}>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </Link>\n            </div>\n          );\n        } else {\n          return (\n            <div key={index} className=\"hero-strip-item\">\n              <div>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </div>\n            </div>\n          );\n        }\n      })}\n    </HeroStripStyle.Inner>\n  </HeroStripStyle>\n);\n\nexport default HeroStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SplitSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n`;\n\nSplitSectionStyle.Inner = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: center;\n  position: relative;\n\n  .block {\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n\n      /* Add left padding to first block if it's a text\n      block depending on it's flex property: */\n      ${props =>\n        props.Flex\n          ? null\n          : 'padding-left: calc(' +\n            Root.Grid.Gutter.Left +\n            ' + ' +\n            Root.Size +\n            ')'};\n    }\n\n    &:last-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n    }\n\n    .block-content {\n      max-width: calc(${Root.Site.Width} / 3);\n      width: 100%;\n    }\n\n    .block-img-wrap {\n      width: 100%;\n      padding-bottom: 80%;\n      overflow: hidden;\n      position: relative;\n\n      .block-img {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`;\n\nexport default SplitSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitSection Component:\n// This is a basic component for sections with.\n// fullwidth 50% areas compensating for the\n// left gutter sidebar.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SplitSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSection = ({ children, Flex }) => (\n  <SplitSectionStyle>\n    <SplitSectionStyle.Inner Flex={Flex}>{children}</SplitSectionStyle.Inner>\n  </SplitSectionStyle>\n);\n\nexport default SplitSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Simple Hero component:\n// slice_type: hero\n// example: https://www.dropbox.com/s/vp50dnga8ix2n8t/Screenshot%202019-05-07%2018.37.41.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleHeroStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleHero Component\nconst CastleHero = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleHeroStyle>\n      <SimpleHero\n        Padding={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        Background={primaryData.background_color}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1 itemProp=\"name\">\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n\n          {/* Check if Social Sharing is enabled */}\n          {primaryData.social_sharing.toLowerCase() == 'yes' ? (\n            <SocialStrip\n              Margin={[0.35, 0, 0, 0]}\n              Location={location}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n        </Block>\n      </SimpleHero>\n    </CastleHeroStyle>\n  );\n};\n\nexport default CastleHero;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .block {\n    .block-content {\n      width: 100% !important;\n      align-items: stretch;\n    }\n  }\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Full Split Section component:\n// slice_type: full_split_section\n// example: https://www.dropbox.com/s/3s19gold67oyspe/Screenshot%202019-05-08%2017.00.10.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SplitSection from 'components/library/Section/SplitSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleFullSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleFullSplitSectionStyle>\n      <SplitSection\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Padding={[1, 1, 1, 2]}\n          Width={0.5}\n          BgColor={primaryData.background_color}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n      </SplitSection>\n    </CastleFullSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsFullSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsFullSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .cta-wrap {\n    display: flex;\n    .btn {\n      margin-right: calc(${Root.Size} / 4);\n    }\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSimpleSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSimpleSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        BgMatch=\"placeholder_bg_4.jpg\"\n        BgTint={primaryData.tint_opacity}\n        BgAlt=\"Our Awesome Alt Tag\"\n        TextColor={primaryData.text_color}\n        Style={primaryData.text_alignment}\n      >\n        <Block\n          Style=\"centered\"\n          Padding={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          maxWidth={0.5}\n        >\n          {/* Check for Headline */}\n          <h2>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h2>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-md\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          <div className=\"cta-wrap\">\n            {repeatableData[0].cta_destination != null\n              ? repeatableData.map((item, index) => {\n                  return (\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  );\n                })\n              : null}\n          </div>\n        </Block>\n      </SimpleSection>\n    </CastleSimpleSectionStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSimpleSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSimpleSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Gutter={[1, 0, 1, 1]}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n\n        <Block\n          Padding={[3, 1, 3, 1]}\n          Width={0.5}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n      </SimpleSection>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitImageHero component:\n// slice_type: split_image_hero\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport Bread from 'components/library/Breadcrumb/';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleHero\n        imgLeft={primaryData.direction == 'normal' ? null : '0'}\n        imgRight={primaryData.direction == 'normal' ? '0' : null}\n        imgBottom=\"0\"\n        imgWidth=\"50%\"\n        Size={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        className=\"simple-hero\"\n        Background={primaryData.background_color}\n        JustifyContent={primaryData.direction == 'normal' ? null : 'flex-end'}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={0.5}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <Btn\n                    Label={item.cta_label}\n                    BgColor={item.cta_bg_color}\n                    TextColor={item.cta_text_color}\n                    Destination={item.cta_destination}\n                    IconPosition={item.cta_icon ? 'left' : null}\n                    IconClass={item.cta_icon ? item.cta_icon : null}\n                    IconFas\n                  />\n                );\n              })\n            : null}\n        </Block>\n        <Block className=\"hero-img\">\n          <ImgMatch src=\"hero-phone.png\" alt=\"100% Free Delivery\" />\n        </Block>\n      </SimpleHero>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitImageHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitImageHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// PromotionalStrip component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport HeroStrip from 'components/library/HeroStrip';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleSplitSectionStyle>\n      <HeroStrip\n        BgColor={\n          primaryData.bg_color ? primaryData.bg_color : Theme.Color.White\n        }\n        TextColor={\n          primaryData.text_color ? primaryData.text_color : Theme.Color.Nightsky\n        }\n        Items={promotionalItemsTransformer(repeatableData)}\n      />\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsPromotionalStripData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsPromotionalStripData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// StickyScrollSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst StickyScrollSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nStickyScrollSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n  }\n`;\n\nStickyScrollSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n\n  .block {\n    .gallery-img {\n      padding: 0 0 calc(${Root.Size} / 2) 0;\n\n      &:last-child {\n        padding: 0;\n      }\n    }\n\n    &.sticky-block {\n      .block-content {\n        position: sticky;\n        top: calc(${Root.Nav.Size});\n        padding-bottom: ${Root.Size};\n        height: calc(100vh - ${Root.Nav.Size});\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n    }\n  }\n\n  .txt-caption {\n    font-size: 1.4rem;\n    font-weight: bold;\n    color: ${Theme.Color.Slate};\n    display: block;\n    margin-bottom: calc(${Theme.Base.Size.Sm});\n  }\n`;\n\nexport default StickyScrollSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyScrollSection Component:\n// Desired outcome: https://www.dropbox.com/s/brll80qg306ywmk/Screenshot%202019-05-06%2015.01.12.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\nimport Block from 'components/library/Block';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport StickyScrollSectionStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// Render Element\nconst StickyScrollSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  Content,\n  Gallery,\n  GalleryQueries,\n  Gutter,\n  Flex,\n  Button,\n}) => (\n  <StickyScrollSectionStyle\n    Style={Style}\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <ReleaseOverflow />\n    <StickyScrollSectionStyle.Inner Gutter={Gutter}>\n      <StickyScrollSectionStyle.Content Flex={Flex} className=\"sticky-section\">\n        <Block Padding={[0, 1, 0, 1]} className=\"sticky-block\">\n          <span className=\"txt-caption\">{Content.Subheadline}</span>\n          <h2>{Content.Headline}</h2>\n          <p className=\"p-md\">{Content.Body}</p>\n\n          {/* Check if a Btn exists, display if so. */}\n          {Button ? (\n            <Btn\n              Label={Button.Label}\n              BgColor={Button.BgColor}\n              TextColor={Button.TextColor}\n              Destination={Button.Destination}\n              IconPosition=\"left\"\n              IconClass={Button.IconClass ? Button.IconClass : null}\n              IconFas\n            />\n          ) : null}\n        </Block>\n        <Block Padding={[0, 1, 0, 1]}>\n          {Gallery\n            ? Gallery.map((Img, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgMatch src={Img.Src} AltText={Img.Alt} />\n                  </div>\n                );\n              })\n            : null}\n          {GalleryQueries\n            ? GalleryQueries.map((query, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgQuery src={query.Fluid} AltText={query.Alt} />\n                  </div>\n                );\n              })\n            : null}\n        </Block>\n      </StickyScrollSectionStyle.Content>\n    </StickyScrollSectionStyle.Inner>\n  </StickyScrollSectionStyle>\n);\n\nexport default StickyScrollSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyGallery component:\n// slice_type: sticky_gallery\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport StickyScrollSection from 'components/library/Section/StickyScrollSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleStickyGalleryStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our GalleryQueries map.\n  const galleryImgQueriesTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let queries = data.map((Query, index) => {\n        return {\n          Fluid: Query.src.localFile.childImageSharp.fluid\n            ? Query.src.localFile.childImageSharp.fluid\n            : false,\n          Alt: Query.src.alt,\n        };\n      });\n\n      // Return new map.\n      return queries;\n    } else {\n      // Else, return 0.\n      return 0;\n    }\n  };\n\n  return (\n    <CastleStickyGalleryStyle>\n      <StickyScrollSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Content={{\n          Subheadline: primaryData.subheadline,\n          Headline: primaryData.headline.text,\n          Body: primaryData.body_text,\n        }}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n        GalleryQueries={galleryImgQueriesTransformer(repeatableData)}\n        Button={{\n          Label: primaryData.cta_label,\n          BgColor: primaryData.cta_bg_color,\n          TextColor: primaryData.cta_text_color,\n          Destination: primaryData.cta_destination,\n          IconClass: primaryData.cta_icon,\n        }}\n      />\n    </CastleStickyGalleryStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsStickyGalleryData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsStickyGalleryData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// CastleWidgetRow component:\n// slice_type: widget_row\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SlideSection from 'components/library/Section/SlideSection';\n\n// Style Overrides\nimport CastleWidgetRowStyle from './styles.scss';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleWidgetRow Component\nconst CastleWidgetRow = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const widgetContentTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: item.widget_destination,\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: item.widget_bg_color,\n                  BgQuery: item.widget_background_image.localFile\n                    ? item.widget_background_image.localFile.childImageSharp\n                        .fluid\n                    : false,\n                  Subhead: item.widget_subheadline,\n                  Headline: item.widget_headline.text,\n                  TextColor: item.widget_text_color,\n                  IconColor: item.widget_text_color,\n                  IconName: item.widget_icon_class, // FontAwesome Icon Name\n                  TintColor: item.widget_tint_color\n                    ? item.widget_tint_color\n                    : Theme.Color.Black,\n                  TintOpacity: item.widget_tint_opacity,\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleWidgetRowStyle>\n      <Block maxWidth=\"100%\">\n        <SlideSection\n          Widgets={widgetContentTransformer(repeatableData)}\n          SectionSize={primaryData.section_size}\n          Header={\n            primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Keep Browsing'\n          }\n          Gutter={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          Theme={{\n            TextColor: primaryData.text_color,\n            BgColor: primaryData.bg_color,\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: primaryData.autoplay == 'On' ? true : false,\n            arrows: true,\n          }}\n        />\n      </Block>\n    </CastleWidgetRowStyle>\n  );\n};\n\nexport default CastleWidgetRow;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsWidgetRowData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsWidgetRowData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// ::::::::      :::      ::::::::  ::::::::::: :::        ::::::::::\n// :+:    :+:   :+: :+:   :+:    :+:     :+:     :+:        :+:\n// +:+         +:+   +:+  +:+            +:+     +:+        +:+\n// +#+        +#++:++#++: +#++:++#++     +#+     +#+        +#++:++#\n// +#+        +#+     +#+        +#+     +#+     +#+        +#+\n// #+#    #+# #+#     #+# #+#    #+#     #+#     #+#        #+#\n//  ########  ###     ###  ########      ###     ########## ##########\n//\n// Castle.js // By Peter Laxalt // www.laxaltandmciver.co\n// This is the page builder for Elements.\n// Future regex for matching {{ variables }} https://regex101.com/r/xgOodL/1\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Styles\nimport CastleStyle from './styles.scss';\n\n// Components\nimport CastleHero from './components/CastleHero';\nimport CastleFullSplitSection from './components/CastleFullSplitSection';\nimport CastleSimpleSection from './components/CastleSimpleSection';\nimport CastleSplitSection from './components/CastleSplitSection';\nimport CastleSplitImageHero from './components/CastleSplitImageHero';\nimport CastlePromotionalStrip from './components/CastlePromotionalStrip';\nimport CastleStickyGallery from './components/CastleStickyGallery';\nimport CastleWidgetRow from './components/CastleWidgetRow';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Castle\nclass CastleBuilder extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  // Render\n  render() {\n    const bricks = this.props.Bricks;\n    const location = this.props.Location;\n\n    return (\n      <>\n        {bricks.map((brick, index) => {\n          switch (brick.slice_type) {\n            case 'hero':\n              return (\n                <CastleHero data={brick} location={location} key={index} />\n              );\n            case 'full_split_section':\n              return (\n                <CastleFullSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_section':\n              return (\n                <CastleSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_image_hero':\n              return (\n                <CastleSplitImageHero\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'promotional_strip':\n              return (\n                <CastlePromotionalStrip\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'sticky_gallery':\n              return (\n                <CastleStickyGallery\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'simple_section':\n              return (\n                <CastleSimpleSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'widget_row':\n              return (\n                <CastleWidgetRow data={brick} location={location} key={index} />\n              );\n          }\n        })}\n      </>\n    );\n  }\n}\n\nconst Castle = ({ Bricks, Location }) => (\n  <CastleStyle>\n    <CastleBuilder Bricks={Bricks} Location={Location} />\n  </CastleStyle>\n);\n\nexport default Castle;\n","// <SpecialListingsStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SpecialListingsStyle = styled.div`\n  appearance: none;\n  position: relative;\n  background-color: ${props =>\n    props.BgColor ? props.BgColor : Theme.Color.White}\n\n  &:before {\n    content: '';\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    top: 0;\n    background-color: ${Theme.Color.Black};\n    opacity: 0.1;\n  }\n\n  .masonry-section {\n    .widget-content {\n      z-index: 100;\n\n      &:first-child {\n        width: 100%;\n        flex: 100%;\n        display: block;\n      }\n      &:nth-child(2) {\n        width: 100%;\n        flex: 100%;\n        display: block;\n      }\n\n      .tag {\n        text-transform: capitalize;\n        display: inline-block;\n        font-size: 1rem;\n        margin-right: calc(${Root.Size} / 6);\n        position: relative;\n\n        &:before {\n          content: '';\n          position: absolute;\n          right: calc(((${Root.Size} / 6) / 1.7) * -1);\n          top: 50%;\n          transform: translateY() (-50%);\n          width: 2px;\n          height: 2px;\n          border-radius: 50%;\n          background-color: ${Theme.Color.White};\n        }\n\n        &:last-child {\n          margin-right: 0;\n          &:before {\n            display: none;\n          }\n        }\n      }\n    }\n  }\n\n  .hero-strip {\n    position: sticky;\n    top: ${Root.Nav.Size};\n    z-index: 400;\n    /* background-color: rgba(255, 255, 255, 0.1) !important;\n    span {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.White} !important;      \n    } */\n  }\n`;\n\nSpecialListingsStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n  padding-left: ${Root.Grid.Gutter.Left};\n  padding-right: ${Root.Grid.Gutter.Right};\n\n  h2 {\n    padding-bottom: 0;\n    margin-bottom: 0;\n    margin-top: ${Root.Size};\n  }\n`;\n\nSpecialListingsStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Nightsky)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n`;\n\nexport default SpecialListingsStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionListings Component:\n// The QuestionListings component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport HeroStrip from 'components/library/HeroStrip';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport SpecialListingsStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// The Specials Cards.\nconst SpecialCards = ({ PageLocation }) => {\n  return (\n    // Run the StaticQuery to get the data we need.\n    <StaticQuery\n      query={graphql`\n        query {\n          allPrismicSpecial {\n            edges {\n              node {\n                id\n                uid\n                data {\n                  title {\n                    text\n                  }\n                  icon\n                  tags\n                  color_background\n                  color_primary\n                  color_secondary\n                  color_tertiary\n                  cover_image {\n                    alt\n                    localFile {\n                      id\n                      childImageSharp {\n                        fluid(maxWidth: 1200) {\n                          ...GatsbyImageSharpFluid\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data =>\n        // Create our PageTheme variables for each Widget.\n\n        // Map the Question data we got.\n        data.allPrismicSpecial.edges.map((Special, index) => {\n          let tagList = Special.node.data.tags.replace(/\\s/g, '').split(',');\n          let styledTagList =\n            tagList.length > 0\n              ? tagList.map((tag, index) => (\n                  <span className=\"tag\" index={index}>\n                    {tag}\n                  </span>\n                ))\n              : 'Specials';\n\n          return (\n            <DefaultWidget\n              BgColor={Special.node.data.color_background}\n              TextColor={Special.node.data.color_primary}\n              Destination={PageLocation.pathname + '/' + Special.node.uid}\n              Subhead={styledTagList}\n              Headline={Special.node.data.title.text}\n              IconName={Special.node.data.icon}\n              IconColor={Special.node.data.color_primary}\n              BgQuery={\n                Special.node.data.cover_image.localFile\n                  ? Special.node.data.cover_image.localFile.childImageSharp\n                      .fluid\n                  : false\n              }\n              // BgImageFile={Question.node.coverImage}\n              BgImageAltText={\n                Special.node.data.cover_image.localFile\n                  ? Special.node.data.cover_image.alt\n                  : null\n              }\n              TintColor={\n                Special.node.data.cover_image.localFile\n                  ? Theme.Color.Black\n                  : null\n              }\n              TintOpacity={Special.node.data.cover_image.localFile ? 0.6 : null}\n              key={index}\n            >\n              {/* {console.log(tagList)} */}\n            </DefaultWidget>\n          );\n        })\n      }\n    />\n  );\n};\n\nconst SpecialListings = ({\n  Gutter,\n  BgColor,\n  TextColor,\n  LocationData,\n  PageLocation,\n  Header,\n}) => {\n  // Function to create our Promotional Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <SpecialListingsStyle\n      className=\"specials-listings\"\n      BgColor={BgColor}\n      TextColor={TextColor}\n    >\n      <ReleaseOverflow />\n      {LocationData ? (\n        LocationData.featuredSpecials.length > 0 ? (\n          <HeroStrip\n            BgColor={Theme.Color.White}\n            TextColor={Theme.Color.Nightsky}\n            Items={promotionalItemsTransformer(LocationData.featuredSpecials)}\n          />\n        ) : null\n      ) : null}\n\n      {Header ? (\n        <SpecialListingsStyle.SectionHeader>\n          <SpecialListingsStyle.Headline TextColor={TextColor}>\n            <h2>{Header}</h2>\n          </SpecialListingsStyle.Headline>\n        </SpecialListingsStyle.SectionHeader>\n      ) : null}\n\n      <MasonrySection\n        Columns={3}\n        ColumnGap={0.25}\n        BgColor={BgColor ? BgColor : Theme.Color.White}\n        TextColor={TextColor ? TextColor : Theme.Color.Nightsky}\n        Gutter={Gutter ? Gutter : [.5, 1, 2, 1]}\n      >\n        {/* {console.log(LocationData.featuredSpecials.length)} */}\n        <SpecialCards PageLocation={PageLocation} />\n      </MasonrySection>\n    </SpecialListingsStyle>\n  );\n};\n\nexport default SpecialListings;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n"],"sourceRoot":""}