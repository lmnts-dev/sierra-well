{"version":3,"sources":["webpack:///./src/templates/TopLevelPage/layout.js","webpack:///./src/templates/TopLevelPage/index.js","webpack:///./src/components/library/Block/styles.scss.js","webpack:///./src/components/library/Block/index.js","webpack:///./src/components/library/Section/SlideSection/styles.scss.js","webpack:///./src/components/library/Section/SlideSection/index.js","webpack:///./src/components/core/HorizontalContent/styles.scss.js","webpack:///./src/components/core/WrapperControl/index.js","webpack:///./src/components/library/Section/SimpleSection/styles.scss.js","webpack:///./src/components/library/Section/SimpleSection/index.js","webpack:///./src/components/library/Hero/styles.scss.js","webpack:///./src/components/library/Hero/index.js","webpack:///./src/components/library/Hero/SimpleHero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/index.js","webpack:///./src/components/library/Breadcrumb/styles.scss.js","webpack:///./src/components/library/Breadcrumb/index.js","webpack:///./src/components/library/Section/index.js","webpack:///./src/components/core/HorizontalContent/index.js","webpack:///./src/components/library/SocialStrip/styles.scss.js","webpack:///./src/components/library/SocialStrip/index.js","webpack:///./src/components/core/HorizontalContent/SlideColumn/index.js","webpack:///./src/components/core/HorizontalContent/SlideGroup/index.js","webpack:///./src/components/library/Section/SplitSection/styles.scss.js","webpack:///./src/components/library/Section/SplitSection/index.js","webpack:///./src/components/library/HeroStrip/styles.scss.js","webpack:///./src/components/library/HeroStrip/index.js","webpack:///./src/components/library/Section/StickyScrollSection/styles.scss.js","webpack:///./src/components/library/Section/StickyScrollSection/index.js","webpack:///./src/components/library/Castle/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/index.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/index.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/styles.scss.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/index.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/index.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/index.js","webpack:///./src/components/library/Castle/index.js"],"names":["LargeContent","_ref","node","id","columns","dashboard_link","document","data","body","widgetDataTransformer","map","widget","index","Flex","widget_height_fraction","Width","widget_width_multiple","WidgetContent","Destination","widget_destination","Style","Meta","Generic","BgColor","widget_bg_color","BgImage","BgQuery","widget_background_image","localFile","childImageSharp","fluid","Subhead","widget_subheadline","Headline","widget_headline","text","TextColor","widget_text_color","IconColor","IconName","widget_icon_class","TintColor","tint_color","TintOpacity","tint_opacity","IconSize","columnDataTransformer","length","column","Type","slice_type","Widgets","items","react_default","a","createElement","HorizontalContent","SlideGroup","className","SlidesData","Name","Columns","console","log","SmallContent","TopLevelPageTemplate","_ref2","elements","Layout","color_background","Theme","Color","Background","PrimaryColor","color_primary","Nightsky","SecondaryColor","color_secondary","TertiaryColor","color_tertiary","White","DeviceQuery","Query","layout_LargeContent","layout_SmallContent","__webpack_require__","d","__webpack_exports__","query","TopLevelPage","props","allPrismicTopLevelPage","edges","Fragment","layout","BlockStyle","styled","div","_templateObject","flex","AlignItems","css","_templateObject2","JustifyContent","BgTint","maxWidth","Base","Grid","SiteWidth","Padding","Root","Size","Block","children","BgMatch","BgAlt","styles_scss","ImgMatch","src","AltText","ImgQuery","SlideSectionStyle","Sm","Black","Inner","SectionInnerStyle","Gutter","Left","Content","SectionContentStyle","_templateObject3","SectionSize","Media","Md","SectionHeader","_templateObject4","_templateObject5","Transition","Duration","CssEase","CallToAction","_templateObject6","NextArrow","style","onClick","Object","assign","onKeyPress","role","tabIndex","Icons","PrevArrow","SectionSlider","_React$Component","call","this","render","_settings","_this","slidesToShow","ArrowColor","SliderSettings","slidesToScroll","autoplay","arrows","settings","dots","speed","autoplaySpeed","infinite","draggable","nextArrow","prevArrow","responsive","breakpoint","Helmet","rel","type","href","lib_default","ref","h","slider","React","Component","SlideSection","Header","Icon","ViewAll","SlideSection_styles_scss","Btn","Label","IconclassName","SlideSection_SectionSlider","TextColr","Widget","Container","key","HorizontalContentStyle","Footer","Right","Nav","FadeIn","SlideColumnContainer","Column","Divider","ColWidth","WrapperLock","createGlobalStyle","WrapperRelease","SimpleSectionStyle","Primary","FluidHeight","SimpleSection","SimpleSection_styles_scss","HeroInnerStyle","imgRight","imgLeft","imgTop","imgBottom","imgWidth","HeroContentStyle","FullWidth","HeroInner","HeroContent","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styles_scss__WEBPACK_IMPORTED_MODULE_2__","SimpleHeroStyle","Tint","TintBorder","SimpleHero","Hero","BreadCrumb","Link","Bread","Crumbs","crumb","to","_styles_scss__WEBPACK_IMPORTED_MODULE_1__","SocialStripStyle","Margin","span","SocialStrip","Location","target","SlideColumn","handleWheel","bind","assertThisInitialized_default","inheritsLoose_default","_proto","prototype","e","deltaY","deltaX","slickPrev","slickNext","_this2","variableWidth","WrapperControl","onWheel","c","HorizontalContent_SlideColumn","SplitSectionStyle","Site","SplitSection","SplitSection_styles_scss","HeroStripStyle","ViewWidthFontSize","HeroStrip","Items","HeroStrip_styles_scss","Item","gatsby_browser_entry","Caption","StickyScrollSectionStyle","Slate","ReleaseOverflow","StickyScrollSection_templateObject","StickyScrollSection","Gallery","GalleryQueries","Button","StickyScrollSection_styles_scss","Subheadline","Body","IconPosition","IconClass","IconFas","Img","Src","Alt","Fluid","CastleStyle","CastleHeroStyle","styles_scss_templateObject","CastleHero","location","primaryData","primary","repeatableData","CastleHero_styles_scss","padding","replace","split","background_color","background_image","text_color","breadcrumb_url","Breadcrumb","breadcrumb_label","itemProp","headline","body_text","cta_destination","item","cta_label","cta_bg_color","cta_text_color","cta_icon","social_sharing","toLowerCase","CastleFullSplitSection_styles_scss_templateObject","CastleSplitSection","CastleFullSplitSection_styles_scss","direction","image","alt","CastleSimpleSectionStyle","CastleSimpleSection_styles_scss_templateObject","CastleSimpleSection","CastleSimpleSection_styles_scss","text_alignment","CastleSplitSection_styles_scss_templateObject","CastleSplitSection_styles_scss","CastleSplitImageHero_styles_scss_templateObject","CastleSplitImageHero_styles_scss","CastlePromotionalStrip_styles_scss_templateObject","CastlePromotionalStrip_styles_scss","bg_color","caption","label","destination","promotionalItemsTransformer","CastleStickyGallery_styles_scss_templateObject","CastleStickyGallery_styles_scss","subheadline","galleryImgQueriesTransformer","CastleWidgetRow_styles_scss_templateObject","CastleWidgetRow","CastleWidgetRow_styles_scss","widget_tint_color","widget_tint_opacity","widgetContentTransformer","section_size","CastleBuilder","bricks","Bricks","brick","components_CastleHero","CastleFullSplitSection","components_CastleSplitSection","CastleSplitImageHero","CastlePromotionalStrip","CastleStickyGallery","components_CastleSimpleSection","components_CastleWidgetRow","Castle","Castle_CastleBuilder"],"mappings":"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","file":"component---src-templates-top-level-page-index-js-1ebd71588c4282fad156.js","sourcesContent":["// templates/Question.js:\n// This is the Question template of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport Device from 'components/core/DeviceQuery';\nimport Layout from 'components/core/Layout';\n\n// Components\nimport { HorizontalContent } from 'components/core/HorizontalContent';\nimport SlideGroup from 'components/core/HorizontalContent/SlideGroup';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Large Device Content\nconst LargeContent = ({ node, id }) => {\n  const columns = node.dashboard_link.document[0].data.body;\n\n  // Function to create the Widget Map inside the Columns Map.\n  const widgetDataTransformer = data => {\n    if (data) {\n      let widgetMap = data.map((widget, index) => {\n        return {\n          // Begin WidgetContent\n          Flex: widget.widget_height_fraction\n            ? widget.widget_height_fraction\n            : 1,\n          Width: widget.widget_width_multiple\n            ? widget.widget_width_multiple\n            : 6,\n          WidgetContent: [\n            {\n              Destination: widget.widget_destination,\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: widget.widget_bg_color,\n                  BgImage: '',\n                  BgQuery: widget.widget_background_image.localFile\n                    ? widget.widget_background_image.localFile.childImageSharp\n                        .fluid\n                    : false,\n                  Subhead: widget.widget_subheadline,\n                  Headline: widget.widget_headline.text,\n                  TextColor: widget.widget_text_color,\n                  IconColor: widget.widget_text_color,\n                  IconName: widget.widget_icon_class,\n                  TintColor: widget.tint_color\n                    ? widget.tint_color\n                    : '',\n                  TintOpacity: widget.tint_opacity\n                    ? widget.tint_opacity\n                    : '',\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        };\n      });\n\n      return widgetMap;\n    } else {\n      let widgetMap = [];\n      return widgetMap;\n    }\n  };\n\n  // Function to create our Columns Map\n  const columnDataTransformer = data => {\n    if (columns.length > 0) {\n      let columnMap = data.map((column, index) => {\n        return {\n          Type: column.slice_type,\n          Widgets: widgetDataTransformer(column.items),\n        };\n      });\n\n      return columnMap;\n    } else {\n      return 'null';\n    }\n  };\n\n  return (\n    <HorizontalContent>\n      <SlideGroup\n        className={id}\n        SlidesData={[{ Name: id, Columns: columnDataTransformer(columns) }]}\n      />\n      {console.log(node)}\n      {console.log('columnDataTransformer(columns):')}\n      {console.log(columnDataTransformer(columns))}\n      {console.log('columns:')}\n      {console.log(columns)}\n    </HorizontalContent>\n  );\n};\n\n// Small Device Content\nconst SmallContent = () => (\n  <div>\n    <h1>Mobile content</h1>\n  </div>\n);\n\n// The Question Template\nconst TopLevelPageTemplate = ({ data, node, id, elements }) => (\n  <Layout\n    BgColor={\n      node.color_background ? node.color_background : Theme.Color.Background\n    }\n    PrimaryColor={\n      node.color_primary ? node.color_primary : Theme.Color.Nightsky\n    }\n    SecondaryColor={\n      node.color_secondary ? node.color_secondary : Theme.Color.Nightsky\n    }\n    TertiaryColor={\n      node.color_tertiary ? node.color_tertiary : Theme.Color.White\n    }\n  >\n    <Device Query=\"Desktop\">\n      <LargeContent node={node} id={id} />\n    </Device>\n\n    <Device Query=\"Mobile\">\n      <SmallContent />\n    </Device>\n  </Layout>\n);\n\nexport default TopLevelPageTemplate;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Top Level Page Template:\n// This is the top level page template.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Templates\nimport TopLevelPageTemplate from './layout';\n\n// Load Castle Fragments\nimport 'components/library/Castle';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Question Template\nconst TopLevelPage = props => {\n  const node = props.data.allPrismicTopLevelPage.edges[0].node;\n\n  return (\n    <>\n      <TopLevelPageTemplate node={node.data} id={node.id} data={props} />\n    </>\n  );\n};\n\nexport default TopLevelPage;\n\n// GraphQL Queries\n// ///////////////////////////////////////////////////////////////////\nexport const query = graphql`\n  query($Id: String!) {\n    allPrismicTopLevelPage(filter: { id: { eq: $Id } }) {\n      edges {\n        node {\n          id\n          uid\n          data {\n            description\n            page_title {\n              text\n            }\n            dashboard_link {\n              id\n              ... on dashboardLink_2 {\n                id\n                document {\n                  id\n                  data {\n                    dashboard_name {\n                      html\n                      text\n                    }\n                    body {\n                      __typename\n                      ... on PrismicDashboardBodyColumn {\n                        slice_type\n                        items {\n                          widget_background_image {\n                            alt\n                            localFile {\n                              id\n                              childImageSharp {\n                                fluid(maxWidth: 1200) {\n                                  ...GatsbyImageSharpFluid\n                                }\n                              }\n                            }\n                          }\n                          widget_headline {\n                            text\n                          }\n                          widget_subheadline\n                          widget_destination\n                          widget_style\n                          widget_width_multiple\n                          widget_height_fraction\n                          widget_icon_class\n                          widget_text_color\n                          widget_bg_color\n                          tint_color\n                          tint_opacity\n                        }\n                      }\n\n                      ... on PrismicDashboardBodyDivider {\n                        slice_type\n                        primary {\n                          type\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            opengraph_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// ////////////////////////////////////////////////////////////////////\n// End Component\n","// <Block> Styles:\n// This is the primary column component.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\nexport const BlockStyle = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.flex : 'column')};\n  position: relative;\n  flex-shrink: 1;\n  ${props => (props.BgColor ? 'background: ' + props.BgColor + ';' : null)}\n  ${props => (props.TextColor ? 'color: ' + props.TextColor + ';' : null)}\n  \n  /* Item Alignment. We are aligning items */\n  /* 'stretch' by default. */\n  ${props =>\n    props.AlignItems ? 'align-items: ' + props.AlignItems + ';' : null}\n\n  /* Centered Style */\n  ${props =>\n    props.Style == 'centered' &&\n    css`\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto;\n\n      p,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        text-align: center;\n        width: 100%;\n      }\n\n      .btn {\n        margin: 0 auto;\n      }\n\n      .block-content {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n      }\n    `}\n\n  /* The block content. */\n  .block-content {\n    z-index: 2;\n    margin: 0 auto;\n    width: 100%;\n    ${props => (props.JustifyContent ? 'display:flex' : null)};\n    ${props =>\n      props.JustifyContent\n        ? 'justify-content: ' + props.JustifyContent + ';'\n        : null}\n\n    p {\n      max-width: 80%;\n    }\n  }\n\n  /* Background images with Gatsby-Img */\n  .block-img {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n\n    .img {\n      flex: 1;\n    }\n  }\n\n  /* Width Multiple */\n    ${props =>\n      props.Width ? 'width: ' + props.Width * 100 + '%;' : 'flex: 1;'}\n  max-width: ${props =>\n    props.maxWidth\n      ? 'calc(' + Theme.Base.Grid.SiteWidth + ' * ' + props.maxWidth + ')'\n      : Theme.Base.Grid.SiteWidth};\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n`;\n\nexport default BlockStyle;\n//////////////////////////////////////////////////////////////////////\n","// <Block> Component:\n// This is the sitewide block style of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Styles\nimport BlockStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Block = ({\n  children,\n  className,\n  Style,\n  maxWidth,\n  Width,\n  Padding,\n  AlignItems,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  BgTint,\n  BgColor,\n  TextColor,\n  JustifyContent,\n  Flex,\n}) => (\n  <BlockStyle\n    className={className ? className + ' block' : 'block'}\n    Width={Width}\n    maxWidth={maxWidth}\n    Style={Style}\n    Padding={Padding}\n    AlignItems={AlignItems ? AlignItems : false}\n    JustifyContent={JustifyContent ? JustifyContent : false}\n    BgTint={BgTint}\n    BgColor={BgColor}\n    TextColor={TextColor}\n    Flex={Flex}\n  >\n    {/* Block Content */}\n    {children ? <div className=\"block-content\">{children}</div> : null}\n\n    {/* For Background Images */}\n    {BgMatch ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n\n    {/* For Background Images with ImgQuery */}\n    {BgQuery ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgQuery src={BgQuery} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n  </BlockStyle>\n);\n\nexport default Block;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SlideSectionStyle = styled.div`\n  width: 100%;\n  overflow: hidden;\n\n  /* Slick styles */\n  .slick-slider {\n    padding-bottom: ${Theme.Base.Size.Sm};\n    margin-bottom: ${Theme.Base.Size.Sm};\n\n    .slick-slide {\n      &:first-child {\n        .widget {\n          padding-left: 0;\n        }\n      }\n    }\n    .slick-list {\n      overflow: visible;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      z-index: 400;\n      background: rgba(0, 0, 0, 0);\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc((${Root.Size} * 0.75) + (${Root.Size} * 0.25));\n      }\n\n      &.slick-next {\n        right: 0;\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n\n    .slick-dots {\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: auto;\n      padding: 0;\n      margin: 0;\n\n      li {\n        margin: 0;\n        padding: 0;\n        width: 10px;\n        height: 10px;\n        margin-right: 5px;\n\n        button {\n          margin: 0;\n          padding: 0;\n          position: relative;\n          width: 10px;\n          height: 10px;\n          margin-right: 5px;\n\n          &:before {\n            content: '';\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            width: 7px;\n            height: 7px;\n            border: 1px solid ${Theme.Color.Black};\n            border-radius: 50%;\n          }\n        }\n      }\n    }\n  }\n`;\n\nSlideSectionStyle.Inner = styled(SectionInnerStyle)`\n  width: 100%;\n  padding-bottom: 0;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: 0'};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n`;\n\nSlideSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: column;\n\n  .widget {\n    padding: calc(${Root.Size} / 6);\n    height: ${props =>\n      props.SectionSize\n        ? 'calc(' + Root.Size + '*' + props.SectionSize + ')'\n        : 'calc(' + Root.Size + '* 3)'};\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      padding: calc(${Root.Size}) calc(${Root.Size} / 4);\n      height: ${props =>\n        props.SectionSize\n          ? 'calc((' + Root.Size + '* 3) * ' + props.SectionSize + ')'\n          : 'calc((' + Root.Size + '* 3) * 3)'};\n    }\n  }\n`;\n\nSlideSectionStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n`;\n\nSlideSectionStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : null)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  i {\n    margin-right: ${Theme.Base.Size.Sm};\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n`;\n\nSlideSectionStyle.CallToAction = styled.div`\n  display: flex;\n\n  .btn {\n    background-color: rgba(0, 0, 0, 0);\n    color: ${Theme.Color.Black};\n\n    svg {\n      fill: ${Theme.Color.Black};\n      border: ${Theme.Color.Black};\n    }\n\n    i {\n      color: ${Theme.Color.Black};\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nexport default SlideSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SlideSection.js:\n//\n// Usage:\n// <SlideSection\n// Widgets={Widgets}\n// SectionSize=\"Large\"\n// SlidesToShow={4}\n// Header=\"Headline\"\n// ViewAll={['/', 'View All']}\n// />\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\nimport { Link } from 'gatsby';\n\n// Components\nimport WidgetContainer from 'components/library/Widgets/Container/';\nimport Btn from 'components/library/Btn';\nimport Icon from 'elements/Icons';\n\n// Constants\nimport { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport SlideSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Section Slider:\n// For displaying widgets within a SlideSection.\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The Slider itself.\nclass SectionSlider extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n\n    // Get any theming.\n    const ArrowColor = this.props.ArrowColor;\n\n    // Get any custom Slider Settings we want to pass.\n    const slidesToShow = this.props.SliderSettings.slidesToShow\n      ? this.props.SliderSettings.slidesToShow\n      : 1;\n    const slidesToScroll = this.props.SliderSettings.slidesToScroll\n      ? this.props.SliderSettings.slidesToScroll\n      : 1;\n    const autoplay = this.props.SliderSettings.autoplay\n      ? this.props.SliderSettings.autoplay\n      : false;\n    const arrows = this.props.SliderSettings.arrows\n      ? this.props.SliderSettings.arrows\n      : false;\n\n    // Pass into Slick Settings.\n    const settings = {\n      dots: true,\n      speed: 550,\n      arrows: false,\n      autoplaySpeed: 4000,\n      slidesToShow: slidesToShow,\n      slidesToScroll: slidesToScroll,\n      autoplay: autoplay,\n      infinite: false,\n      draggable: true,\n      arrows: arrows,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n      responsive: [\n        {\n          breakpoint: Base.Media.Width.Md + 'px',\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n          },\n        },\n      ],\n    };\n\n    return (\n      <>\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n        <Slider ref={h => (this.slider = h)} {...settings}>\n          {this.props.children}\n        </Slider>\n      </>\n    );\n  }\n}\n\n// The SubLevel Page Itself\nconst SlideSection = ({\n  Widgets,\n  SectionSize,\n  SliderSettings,\n  Header,\n  Icon,\n  ViewAll,\n  Theme,\n  Gutter,\n}) => (\n  <SlideSectionStyle>\n    <SlideSectionStyle.Inner Gutter={Gutter}>\n      <SlideSectionStyle.Content SectionSize={SectionSize}>\n        <SlideSectionStyle.SectionHeader>\n          <SlideSectionStyle.Headline TextColor={Theme.TextColor}>\n            {Icon ? <i className={'fas fa-' + Icon} /> : null}\n            <h2>{Header}</h2>\n          </SlideSectionStyle.Headline>\n          {ViewAll ? (\n            <SlideSectionStyle.CallToAction>\n              <Btn\n                Destination={ViewAll[0]}\n                BgColor=\"inherit\"\n                Label={ViewAll[1]}\n                IconclassName=\"carat\"\n              />\n            </SlideSectionStyle.CallToAction>\n          ) : null}\n        </SlideSectionStyle.SectionHeader>\n\n        <SectionSlider\n          SliderSettings={SliderSettings}\n          ArrowColor={Theme.TextColr}\n        >\n          {/* Map our Widgets data. */}\n          {Widgets.map((Widget, index) => {\n            // Pass our Widgets data to our WidgetContainers\n            return (\n              <WidgetContainer\n                key={index}\n                WidgetContent={Widget.WidgetContent}\n                Flex={Widget.Flex ? Widget.Flex : null}\n              />\n            );\n          })}\n        </SectionSlider>\n      </SlideSectionStyle.Content>\n    </SlideSectionStyle.Inner>\n  </SlideSectionStyle>\n);\n\nexport default SlideSection;\n","// Layout Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Keyframe\nimport { FadeIn } from 'components/core/Transition/Keyframes';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst HorizontalContentStyle = styled.div`\n  width: 100%;\n  padding-left: 0;\n  padding-right: 0;\n  padding-bottom: ${Root.Footer.Size};\n  overflow: visible;\n\n  .slick-slider {\n    .slick-list {\n      overflow: visible;\n    }\n\n    .slick-track {\n      display: flex;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      background: rgba(0, 0, 0, 0);\n      z-index: 1500;\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc(\n          ((${Root.Size} * 0.75) + (${Root.Size} * 0.25)) +\n            ${Root.Grid.Gutter.Right}\n        );\n      }\n\n      &.slick-next {\n        right: calc(${Root.Grid.Gutter.Right});\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n  }\n`;\n\n// The Slide Group Wrapper\nHorizontalContentStyle.Inner = styled.div`\n  width: 100%;\n  padding: calc(${Root.Nav.Size} * 2) 0 0 0;\n\n  /* Padding on first slide */\n  .slick-slide {\n    padding: 0;\n    overflow: visible;\n    div {\n      outline: 0;\n      &:focus {\n        outline: 0;\n      }\n      .col {\n        &:first-child {\n          padding-left: ${Theme.Base.Size.Sm};\n        }\n      }\n    }\n    &:first-child {\n      padding: 0 0 0 ${Theme.Base.Size.Sm};\n      .col {\n        &:first-child {\n          padding-left: 0;\n        }\n      }\n    }\n  }\n\n  .widget {\n    ${FadeIn};\n  }\n`;\n\n// The Individual Slide Wrapper\nHorizontalContentStyle.SlideColumnContainer = styled.div`\n  width: 100%;\n  padding: 0;\n  overflow: visible;\n  height: calc(100vh - (${Root.Nav.Size} * 2 + ${Root.Footer.Size}));\n`;\n\n// The Individual Slide Inner\nHorizontalContentStyle.SlideColumnContainer.Inner = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  overflow: visible;\n  padding-bottom: ${Theme.Base.Size.Sm};\n  height: calc(100vh - (${Root.Nav.Size} * 2 + ${Root.Footer.Size}));\n`;\n\n// The Column Wrapper\nHorizontalContentStyle.Column = styled.div`\n  padding: ${Theme.Base.Size.Sm} ${Theme.Base.Size.Sm} ${Theme.Base.Size.Sm} 0;\n  height: calc(100vh - (${Root.Nav.Size} * 2 + ${Root.Footer.Size}));\n  display: flex;\n  flex-direction: column;\n  flex: ${props => (props.Divider ? 'unset' : '1')};\n  width: ${props =>\n    props.ColWidth\n      ? props.ColWidth\n      : props.Divider\n      ? Theme.Base.Size.Md\n      : 'auto'};\n\n    .col-inner {\n      min-width: 250px;\n    }\n`;\n\nHorizontalContentStyle.Column.Inner = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 100%;\n  max-width: 100%;\n  .widget {\n    &:first-child {\n      padding-top: 0;\n    }\n  }\n\n  ${props => {\n    if (props.Divider)\n      return `\n        width: ${Theme.Base.Size.Md};\n        &:before {\n          content: '';\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          // left: calc(50% - ${Base.Size.Sm / 2 + 'px'});\n          left: 50%;\n          width: 1px;\n          opacity: .05;\n          background-color: { Theme.Color.Indigo };\n        }\n    `;\n  }}\n`;\n\nexport default HorizontalContentStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// WrapperControl.js:\n// For controlling our `.wrapper` class app-wide.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Lock Wrapper Scroll\nexport const WrapperLock = createGlobalStyle`\n  html, body {\n    overflow: hidden;\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: visible !important; \n      overflow: visible;\n      \n      .wrapper {\n        overflow-y: hidden;\n      }\n    }\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow: hidden;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow: hidden; \n      overflow-y: hidden;\n    }\n  }\n\n  .slick-slider {\n    touch-action: none !important;\n  }\n`;\n\n// Release Wrapper Scroll\nexport const WrapperRelease = createGlobalStyle`\n  html, body {\n      overflow: auto;\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow-y: visible;\n      height: auto;\n      position: absolute;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: hidden;\n      position: absolute;\n    }\n  }\n`;\n\n// Wrapper Flex Reseet\nexport const WrapperFlexStart = createGlobalStyle`\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      justify-content: flex-start;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      justify-content: space-between;\n    }\n  }\n`;\n","// SimpleSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nSimpleSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n    .img {\n      height: 100%;\n    }\n  }\n`;\n\nSimpleSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n`;\n\nexport default SimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SimpleSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  FluidHeight,\n  Gutter,\n  Flex,\n  children,\n}) => (\n  <SimpleSectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <SimpleSectionStyle.Inner\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <SimpleSectionStyle.Content\n        FluidHeight={FluidHeight}\n        Flex={Flex}\n        className=\"simple-section\"\n      >\n        {children}\n      </SimpleSectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </SimpleSectionStyle.Inner>\n  </SimpleSectionStyle>\n);\n\nexport default SimpleSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MenuHero Styles:\n// These are nearly identical to the Section base styles.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInnerStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  position: relative;\n  overflow: hidden;\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : 'padding-top: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : 'padding-bottom: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ' * ' +\n        props.Padding[3] +\n        ')'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  .hero-img {\n    pointer-events: none;\n    ${props =>\n      props.imgRight || props.imgLeft || props.imgTop || props.imgBottom\n        ? 'position: absolute'\n        : null};\n    ${props => (props.imgRight ? 'right: ' + props.imgRight : null)};\n    ${props => (props.imgLeft ? 'left: ' + props.imgLeft : null)};\n    ${props => (props.imgBottom ? 'bottom: ' + props.imgBottom : null)};\n    ${props => (props.imgTop ? 'top: ' + props.imgTop : null)};\n    ${props => (props.imgWidth ? 'width: ' + props.imgWidth : null)};\n  }\n\n  .btn-secondary {\n    margin-left: calc(${Root.Size} / 4);\n  }\n`;\n\nexport const HeroContentStyle = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: ${props => (props.JustifyContent ? props.JustifyContent : 'flex-start')};\n  max-width: ${props => (props.FullWidth ? '100%' : Theme.Base.Grid.SiteWidth)};\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Hero Component:\n// This is a helper component containing base\n// Hero styles shared across all Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { HeroInnerStyle, HeroContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInner = ({\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  Size,\n  Flex,\n  Padding,\n  children,\n  JustifyContent,\n}) => (\n  <HeroInnerStyle\n    Size={Size ? Size : false}\n    Padding={Padding ? Padding : false}\n    imgRight={imgRight ? imgRight : false}\n    imgLeft={imgLeft ? imgLeft : false}\n    imgBottom={imgBottom ? imgBottom : false}\n    imgTop={imgTop ? imgTop : false}\n    imgWidth={imgWidth ? imgWidth : false}\n  >\n    <HeroContentStyle\n      className=\"hero-content\"\n      JustifyContent={JustifyContent}\n      Flex={Flex}\n    >\n      {children}\n    </HeroContentStyle>\n  </HeroInnerStyle>\n);\n\nexport const HeroContent = ({ children, Flex }) => (\n  <HeroContentStyle Flex={Flex} className=\"hero-content\">\n    {children}\n  </HeroContentStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SimpleHero Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHeroStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  z-index: 1;\n  position: relative;\n  /* margin-top: calc(${Root.Nav.Size} * -1); */\n  background: ${props => (props.Background ? props.Background : 'none')};\n  background-size: cover;\n  background-position: center center;\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n  align-self: flex-start;\n  justify-self: flex-start;\n\n  /* Background Tint */\n  ${props =>\n    props.Tint\n      ? `\n  &.tint {\n    &:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      top: 0;\n      background-color: rgba(0,0,0,` +\n        props.Tint +\n        `);\n    }\n    .inner {\n      z-index: 500;\n    }\n  }\n  `\n      : null}\n  \n  /* Background Tint */\n  ${props =>\n    props.TintBorder\n      ? `\n      &:after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;      \n      top: 0;\n      height: 1px;\n      z-index: 5;\n      background-color: rgba(0,0,0, 0.05);\n    }\n  `\n      : null}\n\n  /* Block Spacing */\n  .block {\n    &:first-child {\n      padding-right: calc(${Root.Size} / 2);\n    }\n    &:second-child {\n      padding-left: calc(${Root.Size} / 2);\n    }\n  }\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n    height: 100%;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img, .img {\n      height: 100%;\n    }\n    .hero-img, .gatsby-image-wrapper {\n      position: unset !important;\n    }\n  }\n`;\n\nexport default SimpleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Helpers\nimport { HeroInner } from './../../Hero';\n\n// Styles\nimport SimpleHeroStyle from './styles.scss';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHero = ({\n  Background,\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  TextColor,\n  Tint,\n  Padding,\n  Size,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  Flex,\n  JustifyContent,\n  TintBorder,\n  children,\n}) => (\n  <SimpleHeroStyle\n    Background={Background}\n    TextColor={TextColor}\n    Tint={Tint}\n    TintBorder={TintBorder}\n    className={Tint ? 'tint' : null}\n  >\n    <HeroInner\n      Size={Size ? Size : false}\n      Padding={Padding}\n      imgRight={imgRight ? imgRight : false}\n      imgLeft={imgLeft ? imgLeft : false}\n      imgBottom={imgBottom ? imgBottom : false}\n      imgTop={imgTop ? imgTop : false}\n      imgWidth={imgWidth ? imgWidth : false}\n      JustifyContent={JustifyContent}\n      className=\"inner\"\n      Flex={Flex}\n    >\n      {children}\n    </HeroInner>\n    {BgMatch ? (\n      <div className=\"section-img\">\n        <ImgMatch src={BgMatch} AltText={BgAlt} className=\"hero-img\" />\n      </div>\n    ) : null}\n    {BgQuery ? (\n      <div className=\"section-img\">\n        <ImgQuery src={BgQuery} AltText=\"Hero Alt\" className=\"hero-img\" />\n      </div>\n    ) : null}\n  </SimpleHeroStyle>\n);\n\nexport default SimpleHero;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Breadcrumb> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const BreadCrumb = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  width: 100%;\n  align-items: center;\n  transform: translateX(calc(1rem * -1.5));\n  text-decoration: none;\n`;\n\nBreadCrumb.Label = styled(Link)`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  margin-left: calc(${Theme.Base.Size.Sm});\n  position: relative;\n  text-transform: capitalize;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: calc((${Theme.Base.Size.Sm} / 2) * -1);\n    transform: translateY(-50%);\n    width: 2px;\n    height: 2px;\n    border-radius: 50%;\n    background-color: ${props =>\n      props.TextColor ? props.TextColor : Theme.Color.Black};\n  }\n\n  &:first-child {\n    margin-left: 0;\n    position: relative;\n\n    &:before {\n      display: none;\n    }\n  }\n\n  svg {\n    transform: rotate(180deg) translateX(0%);\n    transform-origin: center center;\n    width: 1rem;\n    height: 1rem;\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transition: all 0.25s ease;\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n\n  &:hover {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    svg {\n      transform: rotate(180deg) translateX(50%);\n    }\n  }\n`;\n\nexport default BreadCrumb;\n//////////////////////////////////////////////////////////////////////\n","// <Bread Crumbs=\"\"> Component:\n// The breadcrumb component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport BreadCrumbStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Bread = ({ Crumbs, TextColor }) => (\n  <BreadCrumbStyle>\n    {Crumbs.map((crumb, index) => {\n      return (\n        <BreadCrumbStyle.Label\n          to={crumb.Destination}\n          key={index}\n          TextColor={TextColor}\n        >\n          {/* // Hide back button if nested item. */}\n          {index == 0 ? (\n            <Icon className=\"svg-carat\" Name=\"carat\" TextColor={TextColor} />\n          ) : null}\n\n          {crumb.Label}\n        </BreadCrumbStyle.Label>\n      );\n    })}\n  </BreadCrumbStyle>\n);\n\nexport default Bread;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Section Component:\n// This is a helper component containing base\n// Section styles shared across all Section components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { SectionInnerStyle, SectionContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const SectionInner = ({ children }) => (\n  <SectionInnerStyle>\n    <SectionContentStyle>{children}</SectionContentStyle>\n  </SectionInnerStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// HorizontalContent.js:\n// For building out\n// Horizontally focused pages, like top-level\n// navigation pages.\n\n// Core\nimport React from 'react';\n\n// Styles\nimport HorizontalContentStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Horizontal Content Itself\nexport const HorizontalContent = ({ children }) => (\n  <HorizontalContentStyle>\n    <HorizontalContentStyle.Inner>{children}</HorizontalContentStyle.Inner>\n  </HorizontalContentStyle>\n);\n\nexport default HorizontalContent;\n","// <SocialStripStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SocialStripStyle = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Array-based margins utilizing root variable multiple. */\n  ${props =>\n    props.Margin\n      ? 'margin-top: calc(' + Root.Size + ' * ' + props.Margin[0] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-right: calc(' + Root.Size + ' * ' + props.Margin[1] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-bottom: calc(' + Root.Size + ' * ' + props.Margin[2] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-left: calc(' + Root.Size + ' * ' + props.Margin[3] + ')'\n      : null};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    margin-right: calc(${Theme.Base.Size.Md} * 0.8);\n    position: relative;\n    font-size: calc(${Root.Size} / 2);\n    width: calc(${Root.Size} / 2);\n    height: calc(${Root.Size} / 2);\n\n    span {\n      width: 100%;\n      height: auto;\n      font-size: calc(${Root.Size} / 2);\n      i {\n        font-size: calc(${Root.Size} / 2);\n      }\n    }\n\n    i {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%) scale(1.8);\n      transform-origin: center center;\n      opacity: 0;\n      border-radius: 50%;\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover {\n      &:before {\n        opacity: 0.1;\n      }\n    }\n  }\n`;\n\nSocialStripStyle.Label = styled.span`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  svg {\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nexport default SocialStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// SocialStrip Component:\n// The SocialStrip component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SocialStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SocialStrip = ({ TextColor, Location, Margin }) => (\n  <SocialStripStyle Margin={Margin} TextColor={TextColor}>\n    <a\n      href={'https://www.facebook.com/sharer.php?u=' + Location}\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"facebook\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://twitter.com/intent/tweet?url=' +\n        Location +\n        '&text=Test&via=Test&hashtags=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"twitter\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://www.linkedin.com/shareArticle?mini=true&url=' +\n        Location +\n        '&title=Test&summary=Test&source=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"linkedin\" Color={TextColor} />\n    </a>\n  </SocialStripStyle>\n);\n\nexport default SocialStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SlideColumn.js\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Componentss\nimport WidgetContainer from 'components/library/Widgets/Container/';\n\n// Styles\nimport HorizontalContentStyle from './../styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SlideColumn Itself\n// <SlideColumn Divider /> returns a Divider\nclass SlideColumn extends React.Component {\n  constructor(props) {\n    // Get our this.props\n    super(props);\n  }\n\n  render() {\n    const Divider = this.props.Divider;\n    const Widgets = this.props.Widgets;\n    const children = this.props.children;\n\n    // If it's a Divider:\n    if (Divider == true) {\n      return (\n        <HorizontalContentStyle.Column Divider className=\"divider\">\n          <HorizontalContentStyle.Column.Inner Divider />\n        </HorizontalContentStyle.Column>\n      );\n    }\n\n    // If it's not:\n    else {\n      return (\n        <HorizontalContentStyle.Column className=\"col\">\n          <HorizontalContentStyle.Column.Inner className=\"col-inner\">\n            {/* Map our Widgets data. */}\n            {Widgets.map((Widget, index) => {\n              // Pass our Widgets data to our WidgetContainers\n              return (\n                <WidgetContainer\n                  key={index}\n                  WidgetContent={Widget.WidgetContent}\n                  Flex={Widget.Flex}\n                  Width={Widget.Width}\n                >\n                </WidgetContainer>\n              );\n            })}\n          </HorizontalContentStyle.Column.Inner>\n        </HorizontalContentStyle.Column>\n      );\n    }\n  }\n}\n\nexport default SlideColumn;\n","// SlideGroup.js:\n// For displaying SlideGroups.\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Constants\n// import { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport HorizontalContentStyle from '../styles.scss';\n\n// Components\nimport SlideColumn from '../SlideColumn';\nimport SlideTransformer from '../SlideTransformer';\nimport { WrapperLock } from './../../WrapperControl';\nimport Icon from 'elements/Icons';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The SlideGroup Itself\nexport class SlideGroup extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleWheel = this.handleWheel.bind(this);\n  }\n\n  handleWheel(e) {\n    // Disable defaults:\n    // e.preventDefault();\n\n    // Previous / Next Slide based on mouse scroll\n    if (e.deltaY < 0 || e.deltaX < 0 || e.deltaX > 0) {\n      this.slider.slickPrev();\n    } else {\n      this.slider.slickNext();\n    }\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n    const settings = {\n      dots: false,\n      speed: 1200,\n      arrows: true,\n      slidesToShow: 3,\n      slidesToScroll: 2,\n      variableWidth: true,\n      infinite: false,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n    };\n\n    // Slides Data\n    const SlidesData = this.props.SlidesData;\n\n    // Return Slides\n    return (\n      <>\n        <WrapperLock />\n\n        {/* Helmet to initiate Slick Styles */}\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n\n        {/* Initiate our Previous / Next Slide based on mouses scroll */}\n        <div onWheel={e => this.handleWheel(e)}>\n          <Slider ref={c => (this.slider = c)} {...settings}>\n            {/* Loop through our Slide Data */}\n            {/* Pass our Slide Columns data to the Slide */}\n            {SlidesData[0].Columns.map((Column, index) => {\n              // If our Column isn't a Divider\n              if (Column.Type != 'divider') {\n                // Pass our Widgets data to our Columns\n                return <SlideColumn key={index} Widgets={Column.Widgets} />;\n              }\n\n              // If our Column is a Divider\n              else {\n                return <SlideColumn key={index} Divider />;\n              }\n            })}\n          </Slider>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default SlideGroup;\n","// SplitSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n`;\n\nSplitSectionStyle.Inner = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: center;\n  position: relative;\n\n  .block {\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n\n      /* Add left padding to first block if it's a text\n      block depending on it's flex property: */\n      ${props =>\n        props.Flex\n          ? null\n          : 'padding-left: calc(' +\n            Root.Grid.Gutter.Left +\n            ' + ' +\n            Root.Size +\n            ')'};\n    }\n\n    &:last-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n    }\n\n    .block-content {\n      max-width: calc(${Root.Site.Width} / 3);\n      width: 100%;\n    }\n\n    .block-img-wrap {\n      width: 100%;\n      padding-bottom: 80%;\n      overflow: hidden;\n      position: relative;\n\n      .block-img {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`;\n\nexport default SplitSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitSection Component:\n// This is a basic component for sections with.\n// fullwidth 50% areas compensating for the\n// left gutter sidebar.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SplitSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSection = ({ children, Flex }) => (\n  <SplitSectionStyle>\n    <SplitSectionStyle.Inner Flex={Flex}>{children}</SplitSectionStyle.Inner>\n  </SplitSectionStyle>\n);\n\nexport default SplitSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.6;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.15;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// HeroStrip Component:\n// The HeroStrip component, typically used in Hero components.\n// Example: https://www.dropbox.com/s/fkq5n663abznqpt/Screenshot%202019-04-19%2018.20.13.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\n\n// Styles\nimport HeroStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst HeroStrip = ({ Items, BgColor, TextColor }) => (\n  <HeroStripStyle BgColor={BgColor} TextColor={TextColor}>\n    <HeroStripStyle.Inner TextColor={TextColor}>\n      {Items.map((Item, index) => {\n        if (Item.Destination) {\n          return (\n            <div key={index} className=\"hero-strip-item focus\">\n              <Link to={Item.Destination}>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </Link>\n            </div>\n          );\n        } else {\n          return (\n            <div key={index} className=\"hero-strip-item\">\n              <div>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </div>\n            </div>\n          );\n        }\n      })}\n    </HeroStripStyle.Inner>\n  </HeroStripStyle>\n);\n\nexport default HeroStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// StickyScrollSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst StickyScrollSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nStickyScrollSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n  }\n`;\n\nStickyScrollSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n\n  .block {\n    .gallery-img {\n      padding: 0 0 calc(${Root.Size} / 2) 0;\n\n      &:last-child {\n        padding: 0;\n      }\n    }\n\n    &.sticky-block {\n      .block-content {\n        position: sticky;\n        top: calc(${Root.Nav.Size});\n        padding-bottom: ${Root.Size};\n        height: calc(100vh - ${Root.Nav.Size});\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n    }\n  }\n\n  .txt-caption {\n    font-size: 1.4rem;\n    font-weight: bold;\n    color: ${Theme.Color.Slate};\n    display: block;\n    margin-bottom: calc(${Theme.Base.Size.Sm});\n  }\n`;\n\nexport default StickyScrollSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyScrollSection Component:\n// Desired outcome: https://www.dropbox.com/s/brll80qg306ywmk/Screenshot%202019-05-06%2015.01.12.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\nimport Block from 'components/library/Block';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport StickyScrollSectionStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// Render Element\nconst StickyScrollSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  Content,\n  Gallery,\n  GalleryQueries,\n  Gutter,\n  Flex,\n  Button,\n}) => (\n  <StickyScrollSectionStyle\n    Style={Style}\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <ReleaseOverflow />\n    <StickyScrollSectionStyle.Inner Gutter={Gutter}>\n      <StickyScrollSectionStyle.Content Flex={Flex} className=\"sticky-section\">\n        <Block Padding={[0, 1, 0, 1]} className=\"sticky-block\">\n          <span className=\"txt-caption\">{Content.Subheadline}</span>\n          <h2>{Content.Headline}</h2>\n          <p className=\"p-md\">{Content.Body}</p>\n\n          {/* Check if a Btn exists, display if so. */}\n          {Button ? (\n            <Btn\n              Label={Button.Label}\n              BgColor={Button.BgColor}\n              TextColor={Button.TextColor}\n              Destination={Button.Destination}\n              IconPosition=\"left\"\n              IconClass={Button.IconClass ? Button.IconClass : null}\n              IconFas\n            />\n          ) : null}\n        </Block>\n        <Block Padding={[0, 1, 0, 1]}>\n          {Gallery\n            ? Gallery.map((Img, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgMatch src={Img.Src} AltText={Img.Alt} />\n                  </div>\n                );\n              })\n            : null}\n          {GalleryQueries\n            ? GalleryQueries.map((query, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgQuery src={query.Fluid} AltText={query.Alt} />\n                  </div>\n                );\n              })\n            : null}\n        </Block>\n      </StickyScrollSectionStyle.Content>\n    </StickyScrollSectionStyle.Inner>\n  </StickyScrollSectionStyle>\n);\n\nexport default StickyScrollSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Simple Hero component:\n// slice_type: hero\n// example: https://www.dropbox.com/s/vp50dnga8ix2n8t/Screenshot%202019-05-07%2018.37.41.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleHeroStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleHero Component\nconst CastleHero = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleHeroStyle>\n      <SimpleHero\n        Padding={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        Background={primaryData.background_color}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1 itemProp=\"name\">\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n\n          {/* Check if Social Sharing is enabled */}\n          {primaryData.social_sharing.toLowerCase() == 'yes' ? (\n            <SocialStrip\n              Margin={[0.35, 0, 0, 0]}\n              Location={location}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n        </Block>\n      </SimpleHero>\n    </CastleHeroStyle>\n  );\n};\n\nexport default CastleHero;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .block {\n    .block-content {\n      width: 100% !important;\n      align-items: stretch;\n    }\n  }\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Full Split Section component:\n// slice_type: full_split_section\n// example: https://www.dropbox.com/s/3s19gold67oyspe/Screenshot%202019-05-08%2017.00.10.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SplitSection from 'components/library/Section/SplitSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleFullSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleFullSplitSectionStyle>\n      <SplitSection\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Padding={[1, 1, 1, 2]}\n          Width={0.5}\n          BgColor={primaryData.background_color}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n      </SplitSection>\n    </CastleFullSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsFullSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .cta-wrap {\n    display: flex;\n    .btn {\n      margin-right: calc(${Root.Size} / 4);\n    }\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSimpleSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSimpleSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        BgMatch=\"placeholder_bg_4.jpg\"\n        BgTint={primaryData.tint_opacity}\n        BgAlt=\"Our Awesome Alt Tag\"\n        TextColor={primaryData.text_color}\n        Style={primaryData.text_alignment}\n      >\n        <Block\n          Style=\"centered\"\n          Padding={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          maxWidth={0.5}\n        >\n          {/* Check for Headline */}\n          <h2>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h2>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-md\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          <div className=\"cta-wrap\">\n            {repeatableData[0].cta_destination != null\n              ? repeatableData.map((item, index) => {\n                  return (\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  );\n                })\n              : null}\n          </div>\n        </Block>\n      </SimpleSection>\n    </CastleSimpleSectionStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSimpleSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Gutter={[1, 0, 1, 1]}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n\n        <Block\n          Padding={[3, 1, 3, 1]}\n          Width={0.5}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n      </SimpleSection>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitImageHero component:\n// slice_type: split_image_hero\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport Bread from 'components/library/Breadcrumb/';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleHero\n        imgLeft={primaryData.direction == 'normal' ? null : '0'}\n        imgRight={primaryData.direction == 'normal' ? '0' : null}\n        imgBottom=\"0\"\n        imgWidth=\"50%\"\n        Size={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        className=\"simple-hero\"\n        Background={primaryData.background_color}\n        JustifyContent={primaryData.direction == 'normal' ? null : 'flex-end'}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={0.5}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <Btn\n                    Label={item.cta_label}\n                    BgColor={item.cta_bg_color}\n                    TextColor={item.cta_text_color}\n                    Destination={item.cta_destination}\n                    IconPosition={item.cta_icon ? 'left' : null}\n                    IconClass={item.cta_icon ? item.cta_icon : null}\n                    IconFas\n                  />\n                );\n              })\n            : null}\n        </Block>\n        <Block className=\"hero-img\">\n          <ImgMatch src=\"hero-phone.png\" alt=\"100% Free Delivery\" />\n        </Block>\n      </SimpleHero>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitImageHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// PromotionalStrip component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport HeroStrip from 'components/library/HeroStrip';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleSplitSectionStyle>\n      <HeroStrip\n        BgColor={\n          primaryData.bg_color ? primaryData.bg_color : Theme.Color.White\n        }\n        TextColor={\n          primaryData.text_color ? primaryData.text_color : Theme.Color.Nightsky\n        }\n        Items={promotionalItemsTransformer(repeatableData)}\n      />\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsPromotionalStripData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyGallery component:\n// slice_type: sticky_gallery\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport StickyScrollSection from 'components/library/Section/StickyScrollSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleStickyGalleryStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our GalleryQueries map.\n  const galleryImgQueriesTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let queries = data.map((Query, index) => {\n        return {\n          Fluid: Query.src.localFile.childImageSharp.fluid\n            ? Query.src.localFile.childImageSharp.fluid\n            : false,\n          Alt: Query.src.alt,\n        };\n      });\n\n      // Return new map.\n      return queries;\n    } else {\n      // Else, return 0.\n      return 0;\n    }\n  };\n\n  return (\n    <CastleStickyGalleryStyle>\n      <StickyScrollSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Content={{\n          Subheadline: primaryData.subheadline,\n          Headline: primaryData.headline.text,\n          Body: primaryData.body_text,\n        }}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n        GalleryQueries={galleryImgQueriesTransformer(repeatableData)}\n        Button={{\n          Label: primaryData.cta_label,\n          BgColor: primaryData.cta_bg_color,\n          TextColor: primaryData.cta_text_color,\n          Destination: primaryData.cta_destination,\n          IconClass: primaryData.cta_icon,\n        }}\n      />\n    </CastleStickyGalleryStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsStickyGalleryData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// CastleWidgetRow component:\n// slice_type: widget_row\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SlideSection from 'components/library/Section/SlideSection';\n\n// Style Overrides\nimport CastleWidgetRowStyle from './styles.scss';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleWidgetRow Component\nconst CastleWidgetRow = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const widgetContentTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: item.widget_destination,\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: item.widget_bg_color,\n                  BgQuery: item.widget_background_image.localFile\n                    ? item.widget_background_image.localFile.childImageSharp\n                        .fluid\n                    : false,\n                  Subhead: item.widget_subheadline,\n                  Headline: item.widget_headline.text,\n                  TextColor: item.widget_text_color,\n                  IconColor: item.widget_text_color,\n                  IconName: item.widget_icon_class, // FontAwesome Icon Name\n                  TintColor: item.widget_tint_color\n                    ? item.widget_tint_color\n                    : Theme.Color.Black,\n                  TintOpacity: item.widget_tint_opacity,\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleWidgetRowStyle>\n      <Block maxWidth=\"100%\">\n        <SlideSection\n          Widgets={widgetContentTransformer(repeatableData)}\n          SectionSize={primaryData.section_size}\n          Header={\n            primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Keep Browsing'\n          }\n          Gutter={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          Theme={{\n            TextColor: primaryData.text_color,\n            BgColor: primaryData.bg_color,\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: primaryData.autoplay == 'On' ? true : false,\n            arrows: true,\n          }}\n        />\n      </Block>\n    </CastleWidgetRowStyle>\n  );\n};\n\nexport default CastleWidgetRow;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsWidgetRowData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle.js\n// This is the page builder for Elements.\n// Future regex for matching {{ variables }} https://regex101.com/r/xgOodL/1\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Styles\nimport CastleStyle from './styles.scss';\n\n// Components\nimport CastleHero from './components/CastleHero';\nimport CastleFullSplitSection from './components/CastleFullSplitSection';\nimport CastleSimpleSection from './components/CastleSimpleSection';\nimport CastleSplitSection from './components/CastleSplitSection';\nimport CastleSplitImageHero from './components/CastleSplitImageHero';\nimport CastlePromotionalStrip from './components/CastlePromotionalStrip';\nimport CastleStickyGallery from './components/CastleStickyGallery';\nimport CastleWidgetRow from './components/CastleWidgetRow';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Castle\nclass CastleBuilder extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  // Render\n  render() {\n    const bricks = this.props.Bricks;\n    const location = this.props.Location;\n\n    return (\n      <>\n        {bricks.map((brick, index) => {\n          switch (brick.slice_type) {\n            case 'hero':\n              return (\n                <CastleHero data={brick} location={location} key={index} />\n              );\n            case 'full_split_section':\n              return (\n                <CastleFullSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_section':\n              return (\n                <CastleSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_image_hero':\n              return (\n                <CastleSplitImageHero\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'promotional_strip':\n              return (\n                <CastlePromotionalStrip\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'sticky_gallery':\n              return (\n                <CastleStickyGallery\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'simple_section':\n              return (\n                <CastleSimpleSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'widget_row':\n              return (\n                <CastleWidgetRow data={brick} location={location} key={index} />\n              );\n          }\n        })}\n      </>\n    );\n  }\n}\n\nconst Castle = ({ Bricks, Location }) => (\n  <CastleStyle>\n    <CastleBuilder Bricks={Bricks} Location={Location} />\n  </CastleStyle>\n);\n\nexport default Castle;\n"],"sourceRoot":""}