{"version":3,"sources":["webpack:///./src/components/library/SpecialsListings/styles.scss.js","webpack:///./src/components/library/SpecialsListings/index.js","webpack:///./src/components/library/PageTabs/styles.scss.js","webpack:///./src/components/library/PageTabs/index.js","webpack:///./src/templates/Location/Components/LocationPageWrapper/index.js","webpack:///./src/templates/Location/Landing/layout.js","webpack:///./src/templates/Location/Landing/index.js","webpack:///./src/components/library/Block/styles.scss.js","webpack:///./src/components/library/Block/index.js","webpack:///./src/components/library/Section/SlideSection/styles.scss.js","webpack:///./src/components/library/Section/SlideSection/index.js","webpack:///./src/components/core/WrapperControl/index.js","webpack:///./src/components/library/Section/SimpleSection/styles.scss.js","webpack:///./src/components/library/Section/SimpleSection/index.js","webpack:///./src/components/library/Hero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/index.js","webpack:///./src/components/library/Breadcrumb/styles.scss.js","webpack:///./src/components/library/Breadcrumb/index.js","webpack:///./src/components/library/Hero/index.js","webpack:///./src/components/library/Widgets/Sidebar/Default/styles.scss.js","webpack:///./src/components/library/Widgets/Sidebar/Default/index.js","webpack:///./src/components/Library/Sidebar/styles.scss.js","webpack:///./src/components/Library/Sidebar/index.js","webpack:///./src/templates/SubLevelPage/styles.scss.js","webpack:///./src/templates/SubLevelPage/index.js","webpack:///./src/components/library/Section/WidgetSection/styles.scss.js","webpack:///./src/components/library/Section/WidgetSection/index.js","webpack:///./src/components/library/Section/MasonrySection/styles.scss.js","webpack:///./src/components/library/Section/MasonrySection/index.js","webpack:///./src/components/library/Section/index.js","webpack:///./src/components/library/SocialStrip/styles.scss.js","webpack:///./src/components/library/SocialStrip/index.js","webpack:///./src/components/library/QuestionListings/styles.scss.js","webpack:///./src/components/library/QuestionListings/index.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/components/library/Section/SplitSection/styles.scss.js","webpack:///./src/components/library/Section/SplitSection/index.js","webpack:///./src/components/library/QuestionFooter/styles.scss.js","webpack:///./src/components/library/QuestionFooter/index.js","webpack:///./src/components/library/HeroStrip/styles.scss.js","webpack:///./src/components/library/HeroStrip/index.js","webpack:///./src/components/library/Castle/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/index.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/index.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/styles.scss.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/index.js","webpack:///./src/components/library/Section/StickyScrollSection/styles.scss.js","webpack:///./src/components/library/Section/StickyScrollSection/index.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/index.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/index.js","webpack:///./src/components/library/Castle/index.js","webpack:///./src/helpers/hexToRGB.js","webpack:///./src/components/library/SimpleList/styles.scss.js","webpack:///./src/components/library/SimpleList/index.js","webpack:///./src/components/library/AwardBadge/styles.scss.js","webpack:///./src/components/library/AwardBadge/index.js","webpack:///./src/components/library/AwardHours/styles.scss.js","webpack:///./src/components/library/AwardHours/index.js","webpack:///./src/components/library/SuggestionList/styles.scss.js","webpack:///./src/components/library/SuggestionList/index.js","webpack:///./src/templates/Location/Transformer/index.js"],"names":["SpecialListingsStyle","styled","div","_templateObject","props","BgColor","Theme","Color","White","Black","Root","Size","Nav","TextColor","ReleaseOverflow","createGlobalStyle","SpecialsListings_templateObject","SpecialCards","_ref","PageLocation","react_default","a","createElement","gatsby_browser_entry","query","render","data","allPrismicSpecial","edges","map","Special","index","tagList","node","tags","replace","split","styledTagList","length","tag","className","Default","color_background","color_primary","Destination","pathname","uid","Subhead","Headline","title","text","IconName","icon","IconColor","BgQuery","cover_image","localFile","childImageSharp","fluid","BgImageAltText","alt","TintColor","TintOpacity","key","console","log","_2565930568","SpecialListings","_ref2","Gutter","LocationData","SpecialsListings_styles_scss","featuredSpecials","HeroStrip","Nightsky","Items","item","Caption","caption","Label","label","destination","MasonrySection","Columns","ColumnGap","SpecialsListings_SpecialCards","PageTabsStyle","styles_scss_templateObject","GradientColor","hexToRGB","Padding","Button","PageTabs","List","Location","BaseUrl","Affix","PageTabs_styles_scss","currentLocation","DestinationPath","slug","LocationPathWithSlash","Btn","AddClass","slice","name","LocationPageWrapper","children","SpecialsPage","LocationTheme","about","PageTheme","Layout","Background","PrimaryColor","Primary","SecondaryColor","Secondary","TertiaryColor","Tertiary","SubLevelPage","SimpleHero","Flex","Block","maxWidth","geography","city","state","headline","IconClass","toLowerCase","IconPosition","IconFas","contactDetails","location","address","meta","maps","External","AwardHours","Hours","hours","time","days","Data","start_time","library_PageTabs","Tint","TintBorder","SuggestionList","nearby","TemplateLayout","elements","SummaryHeadlineString","summary","Components_LocationPageWrapper","SpecialsListings","Castle","Bricks","href","LocationLandingTemplate","layout_TemplateLayout","__webpack_require__","d","__webpack_exports__","LocationLandingPage","layout","locationLandingTransformer","allPrismicLocation","pageContext","Specials","BlockStyle","flex","AlignItems","Style","css","_templateObject2","JustifyContent","BgTint","Width","Base","Grid","SiteWidth","BgMatch","BgAlt","styles_scss","ImgMatch","src","AltText","ImgQuery","SlideSectionStyle","Sm","Inner","SectionInnerStyle","Left","Content","SectionContentStyle","_templateObject3","SectionSize","Media","Md","SectionHeader","_templateObject4","_templateObject5","Transition","Duration","CssEase","CallToAction","_templateObject6","NextArrow","style","onClick","Object","assign","onKeyPress","role","tabIndex","Icons","Name","PrevArrow","SectionSlider","_React$Component","call","this","_settings","_this","slidesToShow","ArrowColor","SliderSettings","slidesToScroll","autoplay","arrows","settings","dots","speed","autoplaySpeed","infinite","draggable","nextArrow","prevArrow","responsive","breakpoint","Fragment","Helmet","rel","type","lib_default","ref","h","slider","React","Component","SlideSection","Widgets","Header","Icon","ViewAll","SlideSection_styles_scss","IconclassName","SlideSection_SectionSlider","TextColr","Widget","Container","WidgetContent","WrapperLock","WrapperRelease","SimpleSectionStyle","Right","FluidHeight","SimpleSection","SimpleSection_styles_scss","HeroInnerStyle","imgRight","imgLeft","imgTop","imgBottom","imgWidth","HeroContentStyle","FullWidth","SimpleHeroStyle","Hero","BreadCrumb","Link","Bread","Crumbs","crumb","to","HeroInner","HeroContent","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styles_scss__WEBPACK_IMPORTED_MODULE_2__","SidebarWidgetStyle","FadeIn","Radius","BgImage","i","SidebarWidget","SidebarStyle","styles_scss_templateObject2","Sidebar","Sidebar_styles_scss","SubLevelPageStyle","SubLevelPage_styles_scss_templateObject","SubLevelPage_styles_scss_templateObject2","styles_scss_templateObject3","SubLevelPage_SubLevelPage","SubLevelPage_SubLevelPageContent","SubLevelPage_styles_scss","WrapperControl","Library_Sidebar","SubLevelPageContent","ItemProp","itemProp","WidgetSection","Slider","WidgetSection_styles_scss","MasonrySectionStyle","PaddingY","MasonrySection_styles_scss","SocialStripStyle","Margin","span","SocialStrip","target","QuestionCards","CategoryFilter","TagFilter","CategorySlug","TagSlug","AllCategories","QuestionSlugString","categoryMatch","categoryData","categoryFilter","matchedCategory","filter","category","allQuestionsJson","Question","filteredCategory","allQuestionCategoriesJson","BgImageFile","coverImage","includes","Slug","_234893462","QuestionListings","QuestionListings_QuestionCards","dP","f","FProto","Function","prototype","nameRE","configurable","get","match","e","SplitSectionStyle","Site","SplitSection","SplitSection_styles_scss","HeroStripStyle","ViewWidthFontSize","BrowseCategories","categoryWidgets","widgetArray","Meta","Generic","IconSize","viewAll","unshift","Slate","_4273665236","QuestionFooter","HideCategories","QuestionFooter_BrowseCategories","HeroStrip_styles_scss","Item","CastleStyle","CastleHeroStyle","CastleHero","primaryData","primary","repeatableData","items","CastleHero_styles_scss","padding","background_color","background_image","text_color","tint_opacity","breadcrumb_url","Breadcrumb","breadcrumb_label","body_text","cta_destination","cta_label","cta_bg_color","cta_text_color","cta_icon","social_sharing","CastleFullSplitSection_styles_scss_templateObject","CastleSplitSection","CastleFullSplitSection_styles_scss","direction","image","CastleSimpleSectionStyle","CastleSimpleSection_styles_scss_templateObject","CastleSimpleSection","CastleSimpleSection_styles_scss","text_alignment","CastleSplitSection_styles_scss_templateObject","CastleSplitSection_styles_scss","CastleSplitImageHero_styles_scss_templateObject","CastleSplitImageHero_styles_scss","CastlePromotionalStrip_styles_scss_templateObject","CastlePromotionalStrip_styles_scss","bg_color","promotionalItemsTransformer","StickyScrollSectionStyle","StickyScrollSection_styles_scss_templateObject","StickyScrollSection_templateObject","StickyScrollSection","Gallery","GalleryQueries","StickyScrollSection_styles_scss","Subheadline","Body","Img","Src","Alt","Fluid","CastleStickyGallery_styles_scss_templateObject","CastleStickyGallery_styles_scss","Section_StickyScrollSection","subheadline","Query","galleryImgQueriesTransformer","CastleWidgetRow_styles_scss_templateObject","CastleWidgetRow","CastleWidgetRow_styles_scss","widget_destination","widget_bg_color","widget_background_image","widget_subheadline","widget_headline","widget_text_color","widget_icon_class","widget_tint_color","widget_tint_opacity","widgetContentTransformer","section_size","CastleBuilder","bricks","brick","slice_type","components_CastleHero","CastleFullSplitSection","components_CastleSplitSection","CastleSplitImageHero","CastlePromotionalStrip","CastleStickyGallery","components_CastleSimpleSection","components_CastleWidgetRow","Castle_CastleBuilder","hex","alpha","r","parseInt","g","b","SimpleListStyle","ul","li","SimpleList","AwardBadgeStyle","Text","AwardHoursStyle","AwardHours_styles_scss","AwardBadge","Logo","SuggestionListStyle","nearby_name","nearby_slug","id","geo_city","geo_state","country","geo_country","status","delivery","status_delivery","store","status_store","reserveSpot","meta_reserve_spot_link","menu","meta_menu","meta_google_maps_url","phone","geo_location_address","geo_location_state","nearby_locations","about_headline","color_secondary","color_tertiary","featured_specials"],"mappings":"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","file":"component---src-templates-location-landing-index-js-d4662724083fc66be662.js","sourcesContent":["// <SpecialListingsStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SpecialListingsStyle = styled.div`\n  appearance: none;\n  position: relative;\n  background-color: ${props =>\n    props.BgColor ? props.BgColor : Theme.Color.White}\n\n  &:before {\n    content: '';\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    top: 0;\n    background-color: ${Theme.Color.Black};\n    opacity: 0.1;\n  }\n\n  .masonry-section {\n    .widget-content {\n      z-index: 100;\n\n      &:first-child {\n        column-span: all !important;\n        display: block;\n      }\n\n      .tag {\n        text-transform: capitalize;\n        display: inline-block;\n        font-size: 1rem;\n        margin-right: calc(${Root.Size} / 6);\n        position: relative;\n\n        &:before {\n          content: '';\n          position: absolute;\n          right: calc(((${Root.Size} / 6) / 1.7) * -1);\n          top: 50%;\n          transform: translateY() (-50%);\n          width: 2px;\n          height: 2px;\n          border-radius: 50%;\n          background-color: ${Theme.Color.White};\n        }\n\n        &:last-child {\n          margin-right: 0;\n          &:before {\n            display: none;\n          }\n        }\n      }\n    }\n  }\n\n  .hero-strip {\n    position: sticky;\n    top: ${Root.Nav.Size};\n    z-index: 400;\n    /* background-color: rgba(255, 255, 255, 0.1) !important;\n    span {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.White} !important;      \n    } */\n  }\n`;\n\nexport default SpecialListingsStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionListings Component:\n// The QuestionListings component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport HeroStrip from 'components/library/HeroStrip';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport SpecialListingsStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// The Specials Cards.\nconst SpecialCards = ({ PageLocation }) => {\n  return (\n    // Run the StaticQuery to get the data we need.\n    <StaticQuery\n      query={graphql`\n        query {\n          allPrismicSpecial {\n            edges {\n              node {\n                id\n                uid\n                data {\n                  title {\n                    text\n                  }\n                  icon\n                  tags\n                  color_background\n                  color_primary\n                  color_secondary\n                  color_tertiary\n                  cover_image {\n                    alt\n                    localFile {\n                      id\n                      childImageSharp {\n                        fluid(maxWidth: 1200) {\n                          ...GatsbyImageSharpFluid\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data =>\n        // Create our PageTheme variables for each Widget.\n\n        // Map the Question data we got.\n        data.allPrismicSpecial.edges.map((Special, index) => {\n          let tagList = Special.node.data.tags.replace(/\\s/g, '').split(',');\n          let styledTagList =\n            tagList.length > 0\n              ? tagList.map((tag, index) => (\n                  <span className=\"tag\" index={index}>\n                    {tag}\n                  </span>\n                ))\n              : 'Specials';\n\n          return (\n            <DefaultWidget\n              BgColor={Special.node.data.color_background}\n              TextColor={Special.node.data.color_primary}\n              Destination={PageLocation.pathname + '/' + Special.node.uid}\n              Subhead={styledTagList}\n              Headline={Special.node.data.title.text}\n              IconName={Special.node.data.icon}\n              IconColor={Special.node.data.color_primary}\n              BgQuery={\n                Special.node.data.cover_image.localFile\n                  ? Special.node.data.cover_image.localFile.childImageSharp\n                      .fluid\n                  : false\n              }\n              // BgImageFile={Question.node.coverImage}\n              BgImageAltText={\n                Special.node.data.cover_image.localFile\n                  ? Special.node.data.cover_image.alt\n                  : null\n              }\n              TintColor={\n                Special.node.data.cover_image.localFile\n                  ? Theme.Color.Black\n                  : null\n              }\n              TintOpacity={Special.node.data.cover_image.localFile ? 0.6 : null}\n              key={index}\n            >\n              {console.log(tagList)}\n            </DefaultWidget>\n          );\n        })\n      }\n    />\n  );\n};\n\nconst SpecialListings = ({\n  Gutter,\n  BgColor,\n  TextColor,\n  LocationData,\n  PageLocation,\n}) => {\n  // Function to create our Promotional Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <SpecialListingsStyle BgColor={BgColor} TextColor={TextColor}>\n      {LocationData.featuredSpecials.length > 0 ? (\n        <HeroStrip\n          BgColor={Theme.Color.White}\n          TextColor={Theme.Color.Nightsky}\n          Items={promotionalItemsTransformer(LocationData.featuredSpecials)}\n        />\n      ) : null}\n\n      <ReleaseOverflow />\n      <MasonrySection\n        Columns={3}\n        ColumnGap={0.25}\n        BgColor={BgColor ? BgColor : Theme.Color.White}\n        TextColor={TextColor ? TextColor : Theme.Color.Nightsky}\n        Gutter={Gutter ? Gutter : [1, 1, 2, 1]}\n      >\n        {console.log(LocationData.featuredSpecials.length)}\n        <SpecialCards PageLocation={PageLocation} />\n      </MasonrySection>\n    </SpecialListingsStyle>\n  );\n};\n\nexport default SpecialListings;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <PageTabsStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Helpers\nimport hexToRGB from 'helpers/hexToRGB';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const PageTabsStyle = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: 100%;\n  overflow: hidden;\n  position: relative;\n\n  &:before {\n    content: '';\n    position: absolute;\n    pointer-events: none;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    width: calc(${Root.Size} / 2);\n    z-index: 3;\n    background-image: ${props =>\n      props.GradientColor\n        ? 'linear-gradient(-90deg, ' +\n          hexToRGB(props.GradientColor, 1) +\n          ',' +\n          hexToRGB(props.GradientColor, 0.000001) +\n          ')'\n        : 'pink'};\n\n    /* hexToRGB(props.GradientColor, 1) */\n\n    /* background-image: linear-gradient(\n      -90deg,\n      rgba(25d5,255,0, 1) 20%,\n      rgba(25d5,255,0, 0) 100%\n    ); */\n  }\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n\n  ul {\n    display: block;\n    width: 100%;\n    max-width: 100%;\n    word-wrap: none;\n    white-space: nowrap;\n    overflow-x: auto;\n    padding: calc(${Root.Size} / 4) 0;\n\n    li {\n      display: inline-block;\n      margin-right: calc(${Root.Size});\n      font-size: 1.5rem;\n\n      .btn {\n        position: relative;\n        left: 0;\n        .btn-inner {\n          height: calc(${Root.Button.Size} * 0.7);\n          font-size: 1.8rem;\n          font-weight: normal;\n          padding: 0;\n          box-shadow: none;\n          opacity: 0.6;\n\n          &:hover {\n            box-shadow: none;\n            opacity: 1;\n          }\n        }\n\n        &.active {\n          .btn-inner {\n            font-weight: bold;\n            opacity: 1;\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default PageTabsStyle;\n//////////////////////////////////////////////////////////////////////\n","// PageTabs Component:\n// This is for listing out suggestions with an optional label in the front.\n// Reference: https://www.dropbox.com/s/qvn6rohf52unkpv/Screenshot%202019-05-02%2017.19.11.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Styles\nimport PageTabsStyle from './styles.scss';\n\n// Components\nimport Btn from 'components/library/Btn/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Our nearby locations component\nconst PageTabs = ({\n  List,\n  Label,\n  Location,\n  BaseUrl,\n  TextColor,\n  Padding,\n  Affix,\n}) => {\n  return (\n    <PageTabsStyle className=\"page-tabs\" Padding={Padding}>\n      <ul>\n        {List.map((item, index) => {\n          // Creating slugs.\n          const DestinationPath = Affix\n            ? BaseUrl + item.slug + Affix\n            : BaseUrl + item.slug;\n          const LocationPath = Location.pathname;\n          const LocationPathWithSlash = Location.pathname + '/';\n\n          // Helper function to match our locations.\n          function matchPath(destination, currentLocation) {\n            // If location & destination match:\n            if (destination == currentLocation) {\n              let className = 'active';\n              return className;\n            } else {\n              // Check and see if our destination matches without the\n              // last `/` of the url. I.e. `locations/reno vs locations/reno/`\n              if (destination == currentLocation.slice(0, -1)) {\n                let className = 'active';\n                return className;\n              } else {\n                // Then inactive:\n                let className = 'inactive';\n                return 'inactive';\n              }\n            }\n          }\n\n          // Return PageTabs.\n          return (\n            <li key={index}>\n              <Btn\n                AddClass={matchPath(DestinationPath, LocationPathWithSlash)}\n                BgColor=\"none\"\n                Label={item.name}\n                Destination={DestinationPath}\n                TextColor={TextColor}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </PageTabsStyle>\n  );\n};\n\nexport default PageTabs;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// templates/Learn.js:\n// This is the template for Learn pages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Layout from 'components/core/Layout';\nimport { SubLevelPageContent, SubLevelPage } from 'templates/SubLevelPage';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport AwardHours from 'components/library/AwardHours';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport SimpleSection from 'components/library/Section/SimpleSection';\nimport SlideSection from 'components/library/Section/SlideSection';\nimport QuestionListings from 'components/library/QuestionListings';\n\n//// Misc. Components\nimport Bread from 'components/library/Breadcrumb';\nimport SocialStrip from 'components/library/SocialStrip';\nimport QuestionFooter from 'components/library/QuestionFooter';\nimport Btn from 'components/library/Btn/';\nimport SuggestionList from 'components/library/SuggestionList';\nimport PageTabs from 'components/library/PageTabs';\nimport SimpleList from 'components/library/SimpleList';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// LocationPageWrapper component for page theming.\nconst LocationPageWrapper = ({\n  children,\n  Headline,\n  SpecialsPage,\n  LocationData,\n  Location,\n}) => {\n  const LocationTheme = LocationData.about.PageTheme;\n\n  return (\n    <Layout\n      BgColor={LocationTheme.Color.Background}\n      PrimaryColor={LocationTheme.Color.Primary}\n      SecondaryColor={LocationTheme.Color.Secondary}\n      TertiaryColor={LocationTheme.Color.Tertiary}\n    >\n      <SubLevelPage\n        BgColor={LocationTheme.Color.Background}\n        PrimaryColor={LocationTheme.Color.Primary}\n        SecondaryColor={LocationTheme.Color.Secondary}\n        TertiaryColor={LocationTheme.Color.Tertiary}\n      >\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[3, 1, 1.45, 1]}\n          Flex=\"row\"\n          TextColor={LocationTheme.Color.Primary}\n        >\n          <Block maxWidth={0.5}>\n            {/* <Bread\n              Crumbs={[\n                {\n                  Destination: 'locations/',\n                  Label: 'Locations',\n                },\n                {\n                  Destination: 'locations/',\n                  Label: LocationData.geography.state,\n                },\n                {\n                  Destination:\n                    'locations/' +\n                    LocationData.geography.state.toLowerCase() +\n                    '/' +\n                    LocationData.slug,\n                  Label: LocationData.name,\n                },\n              ]}\n              TextColor={LocationTheme.Color.Primary}\n            /> */}\n            {SpecialsPage ? (\n              <h1 className=\"h2\">\n                Cannabis specials & deals in {LocationData.geography.city},{' '}\n                {LocationData.geography.state}.\n              </h1>\n            ) : (\n              <h1 className=\"h2\">{LocationData.about.headline}</h1>\n            )}\n            <Btn\n              IconClass=\"plus\"\n              Label=\"View Menu\"\n              BgColor={LocationTheme.Color.Primary}\n              TextColor={LocationTheme.Color.Tertiary}\n              Destination={\n                '/menu/' +\n                LocationData.geography.state.toLowerCase() +\n                '/' +\n                LocationData.slug\n              }\n              IconPosition=\"left\"\n              IconFas\n            />\n            <Btn\n              AddClass=\"btn-secondary\"\n              IconClass=\"map-marker-alt\"\n              Label={LocationData.contactDetails.location.address}\n              BgColor=\"none\"\n              TextColor={LocationTheme.Color.Tertiary}\n              Destination={LocationData.meta.maps}\n              IconPosition=\"left\"\n              External\n              IconFas\n            />\n            {/* <SocialStrip\n              Margin={[0.5, 0, 0, 0]}\n              Location={Location}\n              TextColor={LocationTheme.Color.Primary}\n            /> */}\n          </Block>\n          <Block Flex=\"row\" maxWidth={0.5}>\n            <AwardHours\n              TextColor={LocationTheme.Color.Primary}\n              Hours={LocationData.contactDetails.hours.map((time, index) => {\n                return {\n                  Label: time.days,\n                  Data: time.start_time,\n                };\n              })}\n            />\n          </Block>\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[0, 1, 0, 1]}\n          Flex=\"column\"\n          TextColor={LocationTheme.Color.Primary}\n        >\n          <PageTabs\n            Location={Location}\n            BaseUrl={\n              '/locations' +\n              '/' +\n              LocationData.geography.state.toLowerCase() +\n              '/' +\n              LocationData.slug +\n              '/'\n            }\n            List={[\n              { name: 'About', slug: '' },\n              { name: 'Specials', slug: 'specials' },\n              { name: 'Menu', slug: 'menu' },\n            ]}\n            TextColor={LocationTheme.Color.Primary}\n            Padding={[0, 0, 0, 0]}\n          />\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        <SimpleHero\n          Padding={[0, 1, 0, 1]}\n          Flex=\"column\"\n          TextColor={LocationTheme.Color.Primary}\n          Tint={0}\n          TintBorder\n        >\n          <SuggestionList\n            BaseUrl={\n              '/locations' +\n              '/' +\n              LocationData.geography.state.toLowerCase() +\n              '/' +\n              LocationData.slug +\n              '/'\n            }\n            List={LocationData.nearby}\n            Affix=\"/menu\"\n            Label=\"Nearby\"\n            TextColor={LocationTheme.Color.Primary}\n            GradientColor={LocationTheme.Color.Background}\n            Padding={[0, 0, 0, 0]}\n          />\n        </SimpleHero>\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n\n        {/* Begin page content. */}\n\n        {/* ///////////// */}\n\n        {/* ///////////// */}\n        <SubLevelPageContent\n          BgColor={Theme.Color.Background}\n          TextColor={Theme.Color.Nightsky}\n        >\n          {/* ///////////// */}\n\n          {/* ///////////// */}\n\n          {children}\n\n          {/* ///////////// */}\n\n          {/* ///////////// */}\n        </SubLevelPageContent>\n        {/* End page content. */}\n      </SubLevelPage>\n    </Layout>\n  );\n};\n\nexport default LocationPageWrapper;\n","// templates/Learn.js:\n// This is the template for Learn pages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport SpecialsListings from 'components/library/SpecialsListings';\n\n// Template Specific Components\nimport LocationPageWrapper from '../Components/LocationPageWrapper';\n\n// Castle.js by L&M\nimport Castle from 'components/library/Castle';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// TemplateLayout Component to pass data where it needs to go for\n// the theming of the hero as well as the LearnSection and what\n// to display in those cards.\nconst TemplateLayout = ({\n  LocationData,\n  Location,\n  Headline,\n  SpecialsPage,\n  elements,\n}) => {\n  // Build our automatic summary headline.\n  let SummaryHeadlineString =\n    LocationData.name +\n    // eslint-disable-next-line\n    \"'s leading cannabis dispensary — where humans come first.\";\n\n  // Check if a headline exists. If it does, display it. If it doesn't, use SummaryHeadlineString.\n  let SummaryHeadline =\n    LocationData.about.summary.headline != ''\n      ? LocationData.about.summary.headline\n      : SummaryHeadlineString;\n\n  if (SpecialsPage == true) {\n    return (\n      <LocationPageWrapper\n        Headline={Headline}\n        LocationData={LocationData}\n        Location={Location}\n        SpecialsPage={SpecialsPage}\n      >\n        <SpecialsListings\n          BgColor={LocationData.about.PageTheme.Color.Background}\n          TextColor={LocationData.about.PageTheme.Color.Primary}\n          LocationData={LocationData}\n          PageLocation={Location}\n        />\n        {/* ///////////// */}\n      </LocationPageWrapper>\n    );\n  } else {\n    return (\n      <LocationPageWrapper\n        Headline={Headline}\n        LocationData={LocationData}\n        Location={Location}\n        SpecialsPage={SpecialsPage}\n      >\n        {/* Check if elements exist. If so, run Castle. If not, display nothing. */}\n        {elements ? (\n          <Castle Bricks={elements} Location={Location.href} />\n        ) : null}\n\n        {/* ///////////// */}\n      </LocationPageWrapper>\n    );\n  }\n};\n\n// The Template itself. Where it all begins.\nconst LocationLandingTemplate = ({\n  LocationData,\n  Location,\n  elements,\n  SpecialsPage,\n}) => {\n  return (\n    <TemplateLayout\n      LocationData={LocationData}\n      Location={Location}\n      elements={elements}\n      SpecialsPage={SpecialsPage}\n    />\n  );\n};\n\nexport default LocationLandingTemplate;\n","// templates/Location/Landing/index.js:\n// This is the Location Landing page.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Templates\nimport LocationLandingTemplate from './layout';\n\n// Transformers\nimport { locationLandingTransformer } from 'templates/Location/Transformer';\n\n// Load Castle Fragments\nimport 'components/library/Castle';\n\n// Data\nimport { graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst LocationLandingPage = props => {\n  return (\n    <LocationLandingTemplate\n      LocationData={\n        locationLandingTransformer(props.data.allPrismicLocation.edges[0].node)\n          .edges.node\n      }\n      elements={props.data.allPrismicLocation.edges[0].node.data.elements}\n      Location={props.location}\n      SpecialsPage={props.pageContext.Specials}\n      Headline={\n        locationLandingTransformer(props.data.allPrismicLocation.edges[0].node)\n          .edges.node.about.headline\n      }\n    />\n  );\n};\n\nexport default LocationLandingPage;\n\n// GraphQL Queries\n/////////////////////////////////////////////////////////////////////\n\n// The post template's GraphQL query. Notice the slug\n// variable which is passed in. We set this on the page\n// context in gatsby-node.js.\n//\n// All GraphQL queries in Gatsby are run at build-time and\n// loaded as plain JSON files so have minimal client cost.\nexport const query = graphql`\n  query($Id: String!) {\n    allPrismicLocation(filter: { id: { eq: $Id } }) {\n      edges {\n        node {\n          id\n          tags\n          uid\n\n          # Load our Castle Component data.\n          ...PrismicLocationElementsHeroData\n          ...PrismicLocationElementsFullSplitSectionData\n          ...PrismicLocationElementsSimpleSectionData\n          ...PrismicLocationElementsSplitSectionData\n          ...PrismicLocationElementsStickyGalleryData\n          ...PrismicLocationElementsSplitImageHeroData\n          ...PrismicLocationElementsPromotionalStripData\n          ...PrismicLocationElementsWidgetRowData\n\n          data {\n            name {\n              text\n            }\n            status_delivery\n            status_store\n            geo_city\n            geo_state\n            geo_country\n            geo_location_address\n            geo_location_state\n            phone\n            featured_specials {\n              label\n              caption\n              destination\n            }\n            hours {\n              days\n              start_time\n              end_time\n            }\n            meta_reserve_spot_link {\n              url\n            }\n            meta_menu {\n              url\n            }\n            meta_google_maps_url {\n              url\n            }\n            nearby_locations {\n              nearby_name\n              nearby_slug\n              color_background\n              color_primary\n              color_secondary\n              color_tertiary\n            }\n            about_headline {\n              text\n            }\n            color_background\n            color_primary\n            color_secondary\n            color_tertiary\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Block> Styles:\n// This is the primary column component.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\nexport const BlockStyle = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.flex : 'column')};\n  position: relative;\n  flex-shrink: 1;\n  ${props => (props.BgColor ? 'background: ' + props.BgColor + ';' : null)}\n  ${props => (props.TextColor ? 'color: ' + props.TextColor + ';' : null)}\n  \n  /* Item Alignment. We are aligning items */\n  /* 'stretch' by default. */\n  ${props =>\n    props.AlignItems ? 'align-items: ' + props.AlignItems + ';' : null}\n\n  /* Centered Style */\n  ${props =>\n    props.Style == 'centered' &&\n    css`\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto;\n\n      p,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        text-align: center;\n        width: 100%;\n      }\n\n      .btn {\n        margin: 0 auto;\n      }\n\n      .block-content {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n      }\n    `}\n\n  /* The block content. */\n  .block-content {\n    z-index: 2;\n    margin: 0 auto;\n    width: 100%;\n    ${props => (props.JustifyContent ? 'display:flex' : null)};\n    ${props =>\n      props.JustifyContent\n        ? 'justify-content: ' + props.JustifyContent + ';'\n        : null}\n\n    p {\n      max-width: 80%;\n    }\n  }\n\n  /* Background images with Gatsby-Img */\n  .block-img {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n\n    .img {\n      flex: 1;\n    }\n  }\n\n  /* Width Multiple */\n    ${props =>\n      props.Width ? 'width: ' + props.Width * 100 + '%;' : 'flex: 1;'}\n  max-width: ${props =>\n    props.maxWidth\n      ? 'calc(' + Theme.Base.Grid.SiteWidth + ' * ' + props.maxWidth + ')'\n      : Theme.Base.Grid.SiteWidth};\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n`;\n\nexport default BlockStyle;\n//////////////////////////////////////////////////////////////////////\n","// <Block> Component:\n// This is the sitewide block style of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Styles\nimport BlockStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Block = ({\n  children,\n  className,\n  Style,\n  maxWidth,\n  Width,\n  Padding,\n  AlignItems,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  BgTint,\n  BgColor,\n  TextColor,\n  JustifyContent,\n  Flex,\n}) => (\n  <BlockStyle\n    className={className ? className + ' block' : 'block'}\n    Width={Width}\n    maxWidth={maxWidth}\n    Style={Style}\n    Padding={Padding}\n    AlignItems={AlignItems ? AlignItems : false}\n    JustifyContent={JustifyContent ? JustifyContent : false}\n    BgTint={BgTint}\n    BgColor={BgColor}\n    TextColor={TextColor}\n    Flex={Flex}\n  >\n    {/* Block Content */}\n    {children ? <div className=\"block-content\">{children}</div> : null}\n\n    {/* For Background Images */}\n    {BgMatch ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n\n    {/* For Background Images with ImgQuery */}\n    {BgQuery ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgQuery src={BgQuery} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n  </BlockStyle>\n);\n\nexport default Block;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SlideSectionStyle = styled.div`\n  width: 100%;\n  overflow: hidden;\n\n  /* Slick styles */\n  .slick-slider {\n    padding-bottom: ${Theme.Base.Size.Sm};\n    margin-bottom: ${Theme.Base.Size.Sm};\n\n    .slick-slide {\n      &:first-child {\n        .widget {\n          padding-left: 0;\n        }\n      }\n    }\n    .slick-list {\n      overflow: visible;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      z-index: 400;\n      background: rgba(0, 0, 0, 0);\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc((${Root.Size} * 0.75) + (${Root.Size} * 0.25));\n      }\n\n      &.slick-next {\n        right: 0;\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n\n    .slick-dots {\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: auto;\n      padding: 0;\n      margin: 0;\n\n      li {\n        margin: 0;\n        padding: 0;\n        width: 10px;\n        height: 10px;\n        margin-right: 5px;\n\n        button {\n          margin: 0;\n          padding: 0;\n          position: relative;\n          width: 10px;\n          height: 10px;\n          margin-right: 5px;\n\n          &:before {\n            content: '';\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            width: 7px;\n            height: 7px;\n            border: 1px solid ${Theme.Color.Black};\n            border-radius: 50%;\n          }\n        }\n      }\n    }\n  }\n`;\n\nSlideSectionStyle.Inner = styled(SectionInnerStyle)`\n  width: 100%;\n  padding-bottom: 0;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: 0'};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n`;\n\nSlideSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: column;\n\n  .widget {\n    padding: calc(${Root.Size} / 6);\n    height: ${props =>\n      props.SectionSize\n        ? 'calc(' + Root.Size + '*' + props.SectionSize + ')'\n        : 'calc(' + Root.Size + '* 3)'};\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      padding: calc(${Root.Size}) calc(${Root.Size} / 4);\n      height: ${props =>\n        props.SectionSize\n          ? 'calc((' + Root.Size + '* 3) * ' + props.SectionSize + ')'\n          : 'calc((' + Root.Size + '* 3) * 3)'};\n    }\n  }\n`;\n\nSlideSectionStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n`;\n\nSlideSectionStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : null)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  i {\n    margin-right: ${Theme.Base.Size.Sm};\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n`;\n\nSlideSectionStyle.CallToAction = styled.div`\n  display: flex;\n\n  .btn {\n    background-color: rgba(0, 0, 0, 0);\n    color: ${Theme.Color.Black};\n\n    svg {\n      fill: ${Theme.Color.Black};\n      border: ${Theme.Color.Black};\n    }\n\n    i {\n      color: ${Theme.Color.Black};\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nexport default SlideSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SlideSection.js:\n//\n// Usage:\n// <SlideSection\n// Widgets={Widgets}\n// SectionSize=\"Large\"\n// SlidesToShow={4}\n// Header=\"Headline\"\n// ViewAll={['/', 'View All']}\n// />\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\nimport { Link } from 'gatsby';\n\n// Components\nimport WidgetContainer from 'components/library/Widgets/Container/';\nimport Btn from 'components/library/Btn';\nimport Icon from 'elements/Icons';\n\n// Constants\nimport { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport SlideSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Section Slider:\n// For displaying widgets within a SlideSection.\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The Slider itself.\nclass SectionSlider extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n\n    // Get any theming.\n    const ArrowColor = this.props.ArrowColor;\n\n    // Get any custom Slider Settings we want to pass.\n    const slidesToShow = this.props.SliderSettings.slidesToShow\n      ? this.props.SliderSettings.slidesToShow\n      : 1;\n    const slidesToScroll = this.props.SliderSettings.slidesToScroll\n      ? this.props.SliderSettings.slidesToScroll\n      : 1;\n    const autoplay = this.props.SliderSettings.autoplay\n      ? this.props.SliderSettings.autoplay\n      : false;\n    const arrows = this.props.SliderSettings.arrows\n      ? this.props.SliderSettings.arrows\n      : false;\n\n    // Pass into Slick Settings.\n    const settings = {\n      dots: true,\n      speed: 550,\n      arrows: false,\n      autoplaySpeed: 4000,\n      slidesToShow: slidesToShow,\n      slidesToScroll: slidesToScroll,\n      autoplay: autoplay,\n      infinite: false,\n      draggable: true,\n      arrows: arrows,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n      responsive: [\n        {\n          breakpoint: Base.Media.Width.Md + 'px',\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n          },\n        },\n      ],\n    };\n\n    return (\n      <>\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n        <Slider ref={h => (this.slider = h)} {...settings}>\n          {this.props.children}\n        </Slider>\n      </>\n    );\n  }\n}\n\n// The SubLevel Page Itself\nconst SlideSection = ({\n  Widgets,\n  SectionSize,\n  SliderSettings,\n  Header,\n  Icon,\n  ViewAll,\n  Theme,\n  Gutter,\n}) => (\n  <SlideSectionStyle>\n    <SlideSectionStyle.Inner Gutter={Gutter}>\n      <SlideSectionStyle.Content SectionSize={SectionSize}>\n        <SlideSectionStyle.SectionHeader>\n          <SlideSectionStyle.Headline TextColor={Theme.TextColor}>\n            {Icon ? <i className={'fas fa-' + Icon} /> : null}\n            <h2>{Header}</h2>\n          </SlideSectionStyle.Headline>\n          {ViewAll ? (\n            <SlideSectionStyle.CallToAction>\n              <Btn\n                Destination={ViewAll[0]}\n                BgColor=\"inherit\"\n                Label={ViewAll[1]}\n                IconclassName=\"carat\"\n              />\n            </SlideSectionStyle.CallToAction>\n          ) : null}\n        </SlideSectionStyle.SectionHeader>\n\n        <SectionSlider\n          SliderSettings={SliderSettings}\n          ArrowColor={Theme.TextColr}\n        >\n          {/* Map our Widgets data. */}\n          {Widgets.map((Widget, index) => {\n            // Pass our Widgets data to our WidgetContainers\n            return (\n              <WidgetContainer\n                key={index}\n                WidgetContent={Widget.WidgetContent}\n                Flex={Widget.Flex ? Widget.Flex : null}\n              />\n            );\n          })}\n        </SectionSlider>\n      </SlideSectionStyle.Content>\n    </SlideSectionStyle.Inner>\n  </SlideSectionStyle>\n);\n\nexport default SlideSection;\n","// WrapperControl.js:\n// For controlling our `.wrapper` class app-wide.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Lock Wrapper Scroll\nexport const WrapperLock = createGlobalStyle`\n  html, body {\n    overflow: hidden;\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: visible !important; \n      overflow: visible;\n      \n      .wrapper {\n        overflow-y: hidden;\n      }\n    }\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow: hidden;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow: hidden; \n      overflow-y: hidden;\n    }\n  }\n\n  .slick-slider {\n    touch-action: none !important;\n  }\n`;\n\n// Release Wrapper Scroll\nexport const WrapperRelease = createGlobalStyle`\n  html, body {\n      overflow: auto;\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow-y: visible;\n      height: auto;\n      position: absolute;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: hidden;\n      position: absolute;\n    }\n  }\n`;\n\n// Wrapper Flex Reseet\nexport const WrapperFlexStart = createGlobalStyle`\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      justify-content: flex-start;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      justify-content: space-between;\n    }\n  }\n`;\n","// SimpleSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nSimpleSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n    .img {\n      height: 100%;\n    }\n  }\n`;\n\nSimpleSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n`;\n\nexport default SimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SimpleSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  FluidHeight,\n  Gutter,\n  Flex,\n  children,\n}) => (\n  <SimpleSectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <SimpleSectionStyle.Inner\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <SimpleSectionStyle.Content\n        FluidHeight={FluidHeight}\n        Flex={Flex}\n        className=\"simple-section\"\n      >\n        {children}\n      </SimpleSectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </SimpleSectionStyle.Inner>\n  </SimpleSectionStyle>\n);\n\nexport default SimpleSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MenuHero Styles:\n// These are nearly identical to the Section base styles.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInnerStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  position: relative;\n  overflow: hidden;\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : 'padding-top: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : 'padding-bottom: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ' * ' +\n        props.Padding[3] +\n        ')'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  .hero-img {\n    pointer-events: none;\n    ${props =>\n      props.imgRight || props.imgLeft || props.imgTop || props.imgBottom\n        ? 'position: absolute'\n        : null};\n    ${props => (props.imgRight ? 'right: ' + props.imgRight : null)};\n    ${props => (props.imgLeft ? 'left: ' + props.imgLeft : null)};\n    ${props => (props.imgBottom ? 'bottom: ' + props.imgBottom : null)};\n    ${props => (props.imgTop ? 'top: ' + props.imgTop : null)};\n    ${props => (props.imgWidth ? 'width: ' + props.imgWidth : null)};\n  }\n\n  .btn-secondary {\n    margin-left: calc(${Root.Size} / 4);\n  }\n`;\n\nexport const HeroContentStyle = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: ${props =>\n    props.JustifyContent ? props.JustifyContent : 'flex-start'};\n  max-width: ${props => (props.FullWidth ? '100%' : Theme.Base.Grid.SiteWidth)};\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHeroStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  z-index: 1;\n  position: relative;\n  /* margin-top: calc(${Root.Nav.Size} * -1); */\n  background: ${props => (props.Background ? props.Background : 'none')};\n  background-size: cover;\n  background-position: center center;\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n  align-self: flex-start;\n  justify-self: flex-start;\n\n  /* Background Tint */\n  ${props =>\n    props.Tint\n      ? `\n  &.tint {\n    &:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      top: 0;\n      background-color: rgba(0,0,0,` +\n        props.Tint +\n        `);\n    }\n    .inner {\n      z-index: 500;\n    }\n  }\n  `\n      : null}\n  \n  /* Background Tint */\n  ${props =>\n    props.TintBorder\n      ? `\n      &:after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;      \n      top: 0;\n      height: 1px;\n      z-index: 5;\n      background-color: rgba(0,0,0, 0.05);\n    }\n  `\n      : null}\n\n  /* Block Spacing */\n  .block {\n    &:first-child {\n      padding-right: calc(${Root.Size} / 2);\n    }\n    &:second-child {\n      padding-left: calc(${Root.Size} / 2);\n    }\n  }\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n    height: 100%;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img, .img {\n      height: 100%;\n    }\n    .hero-img, .gatsby-image-wrapper {\n      position: unset !important;\n    }\n  }\n`;\n\nexport default SimpleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Helpers\nimport { HeroInner } from './../../Hero';\n\n// Styles\nimport SimpleHeroStyle from './styles.scss';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHero = ({\n  Background,\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  TextColor,\n  Tint,\n  Padding,\n  Size,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  Flex,\n  JustifyContent,\n  TintBorder,\n  children,\n}) => (\n  <SimpleHeroStyle\n    Background={Background}\n    TextColor={TextColor}\n    Tint={Tint}\n    TintBorder={TintBorder}\n    className={Tint ? 'tint' : null}\n  >\n    <HeroInner\n      Size={Size ? Size : false}\n      Padding={Padding}\n      imgRight={imgRight ? imgRight : false}\n      imgLeft={imgLeft ? imgLeft : false}\n      imgBottom={imgBottom ? imgBottom : false}\n      imgTop={imgTop ? imgTop : false}\n      imgWidth={imgWidth ? imgWidth : false}\n      JustifyContent={JustifyContent}\n      className=\"inner\"\n      Flex={Flex}\n    >\n      {children}\n    </HeroInner>\n    {BgMatch ? (\n      <div className=\"section-img\">\n        <ImgMatch src={BgMatch} AltText={BgAlt} className=\"hero-img\" />\n      </div>\n    ) : null}\n    {BgQuery ? (\n      <div className=\"section-img\">\n        <ImgQuery src={BgQuery} AltText=\"Hero Alt\" className=\"hero-img\" />\n      </div>\n    ) : null}\n  </SimpleHeroStyle>\n);\n\nexport default SimpleHero;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Breadcrumb> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const BreadCrumb = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  width: 100%;\n  align-items: center;\n  transform: translateX(calc(1rem * -1.5));\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 50%;\n      left: calc((${Theme.Base.Size.Sm} / 2) * -1);\n      transform: translateY(-50%);\n      width: 2px;\n      height: 2px;\n      border-radius: 50%;\n      background-color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    svg {\n      transform: rotate(180deg) translateX(0%);\n      transform-origin: center center;\n      width: 1rem;\n      height: 1rem;\n      fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n      transition: all 0.25s ease;\n      fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    }\n\n    &:hover {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      text-decoration: none;\n      svg {\n        transform: rotate(180deg) translateX(50%);\n      }\n    }\n  }\n`;\n\nBreadCrumb.Label = styled(Link)`\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  margin-left: calc(${Theme.Base.Size.Sm});\n  position: relative;\n  text-transform: capitalize;\n\n  &:first-child {\n    margin-left: 0;\n    position: relative;\n\n    &:before {\n      display: none;\n    }\n  }\n`;\n\nexport default BreadCrumb;\n//////////////////////////////////////////////////////////////////////\n","// <Bread Crumbs=\"\"> Component:\n// The breadcrumb component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport BreadCrumbStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Bread = ({ Crumbs, TextColor }) => (\n  <BreadCrumbStyle TextColor={TextColor}>\n    {Crumbs.map((crumb, index) => {\n      return (\n        <BreadCrumbStyle.Label\n          to={crumb.Destination}\n          key={index}\n        >\n          {/* // Hide back button if nested item. */}\n          {index == 0 ? (\n            <Icon className=\"svg-carat\" Name=\"carat\" TextColor={TextColor} />\n          ) : null}\n          {crumb.Label}\n        </BreadCrumbStyle.Label>\n      );\n    })}\n  </BreadCrumbStyle>\n);\n\nexport default Bread;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Hero Component:\n// This is a helper component containing base\n// Hero styles shared across all Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { HeroInnerStyle, HeroContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInner = ({\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  Size,\n  Flex,\n  Padding,\n  children,\n  JustifyContent,\n}) => (\n  <HeroInnerStyle\n    Size={Size ? Size : false}\n    Padding={Padding ? Padding : false}\n    imgRight={imgRight ? imgRight : false}\n    imgLeft={imgLeft ? imgLeft : false}\n    imgBottom={imgBottom ? imgBottom : false}\n    imgTop={imgTop ? imgTop : false}\n    imgWidth={imgWidth ? imgWidth : false}\n  >\n    <HeroContentStyle\n      className=\"hero-content\"\n      JustifyContent={JustifyContent}\n      Flex={Flex}\n    >\n      {children}\n    </HeroContentStyle>\n  </HeroInnerStyle>\n);\n\nexport const HeroContent = ({ children, Flex }) => (\n  <HeroContentStyle Flex={Flex} className=\"hero-content\">\n    {children}\n  </HeroContentStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Widget Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Keyframes\nimport { FadeIn } from 'components/core/Transition/Keyframes';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidgetStyle = styled.div`\n  width: 100%;\n  padding-bottom: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  opacity: 0;\n  margin-top: ${Theme.Base.Size.Sm};\n  animation-fill-mode: forwards;\n  ${FadeIn};\n`;\n\nSidebarWidgetStyle.Inner = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: ${props =>\n    props.BgColor ? props.BgColor : Theme.Color.White};\n  border-radius: ${Root.Radius};\n  box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n  overflow: hidden;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  cursor: pointer;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Background Images */\n\n  ${props => {\n    if (props.BgImage)\n      return (\n        `\n        background-image: url(` +\n        props.BgImage +\n        `);\n        background-size: cover;\n        background-position: center center;\n        background-repeat: no-repeat;\n        `\n      );\n  }};\n\n  /* Tint */\n\n  ${props => {\n    if (props.TintColor || props.TintOpacity)\n      return (\n        `\n        &:before {\n          content: '';\n          position: absolute;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          right: 0;\n          background-color:` +\n        props.TintColor +\n        `;\n          opacity:` +\n        props.TintOpacity +\n        `;\n          transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n        }\n    `\n      );\n  }};\n\n  /* Links */\n  a {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    flex: 1;\n    width: 100%;\n    color: white;\n    transform: scale(1.000000001);\n    position: relative;\n    padding: ${Theme.Base.Size.Sm};\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* The Carat Icon */\n  svg {\n    position: absolute;\n    right: ${Theme.Base.Size.Sm};\n    top: ${Theme.Base.Size.Sm};\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transform: translateX(0%);\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* Hover Styles */\n  &:hover {\n    background-color: ${Theme.Color.Black};\n    color: ${Theme.Color.White};\n    box-shadow: 0 20px 30px 0 rgba(6, 10, 92, 0.21);\n\n    a {\n      text-decoration: none;\n      color: ${Theme.Color.White};\n    }\n\n    /* The Carat Icon */\n    svg {\n      transform: translateX(50%);\n      fill: ${Theme.Color.White};\n      height: 1.2rem;\n      width: 1.2rem;\n    }\n\n    /* The Widget Icon */\n    .fas {\n      color: ${Theme.Color.White};\n    }\n\n    /* Tint */\n    ${props => {\n      if (props.TintColor || props.TintOpacity)\n        return `\n        &:before {\n          opacity: 1\n        }\n    `;\n    }};\n  }\n`;\n\nSidebarWidgetStyle.Subhead = styled.div`\n  font-size: 1rem;\n  line-height: 1.2;\n`;\n\nSidebarWidgetStyle.Headline = styled.div`\n  font-size: 1.1rem;\n  line-height: 1.2;\n  font-weight: bold;\n`;\n\nSidebarWidgetStyle.Icon = styled.i`\n  position: absolute;\n  right: ${Theme.Base.Size.Sm};\n  top: ${Theme.Base.Size.Sm};\n  font-size: 1.2rem;\n  transform: scale(1.4);\n  transform-origin: top right;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  color: ${props => (props.Color ? props.Color : Theme.Color.Black)};\n`;\n\nexport default SidebarWidgetStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Default Widget.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport SidebarWidgetStyle from './styles.scss';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidget = ({\n  BgColor,\n  BgImage,\n  Headline,\n  TextColor,\n  IconName,\n  IconColor,\n  Destination,\n  TintColor,\n  TintOpacity,\n}) => (\n  <SidebarWidgetStyle className=\"widget\">\n    <SidebarWidgetStyle.Inner\n      BgColor={BgColor}\n      BgImage={BgImage}\n      TextColor={TextColor}\n      TintColor={TintColor}\n      TintOpacity={TintOpacity}\n    >\n      <Link to={Destination}>\n        <SidebarWidgetStyle.Headline>{Headline}</SidebarWidgetStyle.Headline>\n\n        {/* Pass Icon value using FontAwesome */}\n        {/* Read more: https://fontawesome.com/how-to-use/on-the-web/setup/getting-started */}\n        <SidebarWidgetStyle.Icon\n          className={'fas fa-' + IconName}\n          Color={IconColor}\n        />\n      </Link>\n    </SidebarWidgetStyle.Inner>\n  </SidebarWidgetStyle>\n);\n\nexport default SidebarWidget;\n","// Sidebar Component Styles\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SidebarStyle = styled.div`\n  position: fixed;\n  top: ${Root.Nav.Size};\n  bottom: 0;\n  height: calc(100vh - ${Root.Nav.Size});\n  display: flex;\n  z-index: 555;\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nSidebarStyle.Inner = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  padding: ${Theme.Base.Size.Sm};\n  width: ${Root.Grid.Gutter.Left};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nexport default SidebarStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Sidebar.js:\n// This is the sitewide sidebar component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport SidebarWidget from 'components/library/Widgets/Sidebar/Default';\n\n// Styles\nimport SidebarStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nconst Sidebar = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SidebarStyle>\n    <SidebarStyle.Inner>\n      <SidebarWidget\n        BgColor={Theme.Color.Primary}\n        BgImage=\"none\"\n        Headline=\"Delivery Available\"\n        TextColor={Theme.Color.White}\n        IconColor={Theme.Color.White}\n        IconName=\"car\"\n        Destination=\"/menu/delivery/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Reserve Spot\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"users\"\n        Destination=\"/menu/pick-up/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Visit\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"map-marker-alt\"\n        Destination=\"/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Chat\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"comment-alt\"\n        Destination=\"/culture\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Phone\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"phone\"\n        Destination=\"/contact\"\n      />\n    </SidebarStyle.Inner>\n  </SidebarStyle>\n);\n\nexport default Sidebar;\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SubLevelPageStyle = styled.div`\n  width: 100%;\n  flex: 1;\n  display: flex;\n  flex-wrap: nowrap;\n  color: ${Theme.Color.Background};\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n`;\n\nSubLevelPageStyle.Inner = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n\nSubLevelPageStyle.Content = styled.div`\n  width: 100%;\n  flex: 1;\n  background: ${props => (props.BgColor ? props.BgColor : 'none')};\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n`;\n\nexport default SubLevelPageStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SubLevelPage.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport Sidebar from 'components/Library/Sidebar/';\nimport { WrapperRelease } from 'components/core/WrapperControl';\n\n// Styles\nimport SubLevelPageStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nexport const SubLevelPage = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SubLevelPageStyle className=\"sub\">\n    <WrapperRelease />\n    <Sidebar\n      BgColor={BgColor}\n      PrimaryColor={PrimaryColor}\n      SecondaryColor={SecondaryColor}\n      TertiaryColor={TertiaryColor}\n    />\n    <SubLevelPageStyle.Inner className=\"sublevel-inner\">\n      {children}\n    </SubLevelPageStyle.Inner>\n  </SubLevelPageStyle>\n);\n\n// The SubLevel Page Content\nexport const SubLevelPageContent = ({\n  BgColor,\n  TextColor,\n  ItemProp,\n  children,\n}) => (\n  <SubLevelPageStyle.Content\n    TextColor={TextColor}\n    BgColor={BgColor}\n    itemProp={ItemProp}\n  >\n    {children}\n  </SubLevelPageStyle.Content>\n);\n","// WidgetSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nWidgetSection.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  height: 400px;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n`;\n\nWidgetSection.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-wrap: wrap;\n\n  .widget {\n    width: 25%;\n    padding: calc(${Root.Size} / 6);\n    &:first-child {\n      padding-left: 0;\n    }\n    &:last-child {\n      padding-right: 0;\n    }\n\n    @media (max-width: calc(${Theme.Base.Media.Width.Md} * 1.5)) {\n      width: 50%;\n      flex: unset;\n      &:nth-child(odd) {\n        padding-left: 0;\n      }\n      &:nth-child(even) {\n        padding-right: 0;\n      }\n    }\n  }\n`;\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// WidgetSection Component:\n// For displaying inline Widgets on Subpages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Widgets Container\nimport WidgetContainer from 'components/library/Widgets/Container/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport WidgetSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = ({ BgColor, Widgets, Slider, Gutter }) => (\n  <WidgetSectionStyle BgColor={BgColor}>\n    <WidgetSectionStyle.Inner Gutter={Gutter}>\n      <WidgetSectionStyle.Content className=\"widget-section\">\n        {/* Map our Widgets data. */}\n        {Widgets.map((Widget, index) => {\n          // Pass our Widgets data to our WidgetContainers\n          return (\n            <WidgetContainer\n              key={index}\n              WidgetContent={Widget.WidgetContent}\n              Flex={Widget.Flex ? Widget.Flex : null}\n            />\n          );\n        })}\n      </WidgetSectionStyle.Content>\n    </WidgetSectionStyle.Inner>\n  </WidgetSectionStyle>\n);\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// MasonrySecction Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst MasonrySectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n  overflow: visible;\n`;\n\nMasonrySectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n  overflow: visible;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n`;\n\nMasonrySectionStyle.Content = styled.div`\n  width: 100%;\n  position: relative;\n  margin: 0 auto;\n  overflow: visible;\n  max-width: ${Theme.Base.Grid.SiteWidth};\n\n  /* Performance fixes on Chrome & Safari */\n  -webkit-backface-visibility: hidden;\n  -moz-backface-visibility: hidden;\n  -ms-backface-visibility: hidden;\n  backface-visibility: hidden;\n\n  /* Performance fixes on Chrome & Safari */\n  -webkit-perspective: 1000;\n  -moz-perspective: 1000;\n  -ms-perspective: 1000;\n  perspective: 1000;\n\n  /* CSS Masonry */\n  /* Read more: https://w3bits.com/css-masonry/ */\n  column-width: 33%;\n  column-count: ${props => (props.Columns ? props.Columns : 3)};\n  column-gap: ${props =>\n    props.ColumnGap\n      ? ' calc(' + Root.Size + ' * ' + props.ColumnGap + ')'\n      : 'calc(' + Root.Size + '* .25)'};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    column-width: 100%;\n    column-count: 1;\n  }\n\n  .widget-content {\n    border-radius: ${Root.Radius};\n    box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n    position: relative;\n    overflow: hidden;\n    width: 100%;\n    display: inline-block;\n    margin-bottom: ${props =>\n      props.ColumnGap\n        ? ' calc(' + Root.Size + ' * ' + props.ColumnGap + ')'\n        : 'calc(' + Root.Size + '* .25)'};\n\n    .widget-headline {\n      margin-bottom: calc(${Root.Size} * 2);\n    }\n  }\n`;\n\nexport default MasonrySectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// MasonrySection Component:\n// This is a component for a MasonryGrid of Widgets.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport MasonrySectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst MasonrySection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  PaddingY,\n  FluidHeight,\n  Gutter,\n  Columns,\n  ColumnGap,\n  children,\n}) => (\n  <MasonrySectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <MasonrySectionStyle.Inner\n      Size={PaddingY}\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <MasonrySectionStyle.Content\n        FluidHeight={FluidHeight}\n        className=\"masonry-section\"\n        Columns={Columns}\n        ColumnGap={ColumnGap}\n      >\n        {children}\n      </MasonrySectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </MasonrySectionStyle.Inner>\n  </MasonrySectionStyle>\n);\n\nexport default MasonrySection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Section Component:\n// This is a helper component containing base\n// Section styles shared across all Section components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { SectionInnerStyle, SectionContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const SectionInner = ({ children }) => (\n  <SectionInnerStyle>\n    <SectionContentStyle>{children}</SectionContentStyle>\n  </SectionInnerStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SocialStripStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SocialStripStyle = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Array-based margins utilizing root variable multiple. */\n  ${props =>\n    props.Margin\n      ? 'margin-top: calc(' + Root.Size + ' * ' + props.Margin[0] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-right: calc(' + Root.Size + ' * ' + props.Margin[1] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-bottom: calc(' + Root.Size + ' * ' + props.Margin[2] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-left: calc(' + Root.Size + ' * ' + props.Margin[3] + ')'\n      : null};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    margin-right: calc(${Theme.Base.Size.Md} * 0.8);\n    position: relative;\n    font-size: calc(${Root.Size} / 2);\n    width: calc(${Root.Size} / 2);\n    height: calc(${Root.Size} / 2);\n\n    span {\n      width: 100%;\n      height: auto;\n      font-size: calc(${Root.Size} / 2);\n      i {\n        font-size: calc(${Root.Size} / 2);\n      }\n    }\n\n    i {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%) scale(1.8);\n      transform-origin: center center;\n      opacity: 0;\n      border-radius: 50%;\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover {\n      &:before {\n        opacity: 0.1;\n      }\n    }\n  }\n`;\n\nSocialStripStyle.Label = styled.span`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  svg {\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nexport default SocialStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// SocialStrip Component:\n// The SocialStrip component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SocialStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SocialStrip = ({ TextColor, Location, Margin }) => (\n  <SocialStripStyle Margin={Margin} TextColor={TextColor}>\n    <a\n      href={'https://www.facebook.com/sharer.php?u=' + Location}\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"facebook\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://twitter.com/intent/tweet?url=' +\n        Location +\n        '&text=Test&via=Test&hashtags=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"twitter\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://www.linkedin.com/shareArticle?mini=true&url=' +\n        Location +\n        '&title=Test&summary=Test&source=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"linkedin\" Color={TextColor} />\n    </a>\n  </SocialStripStyle>\n);\n\nexport default SocialStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SpecialsListings> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SpecialsListingsStyle = styled.div`\n  appearance: none;\n`;\n\nexport default SpecialsListingsStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionListings Component:\n// The QuestionListings component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport QuestionListingsStyle from './styles.scss';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst QuestionCards = ({\n  CategoryFilter,\n  TagFilter,\n  CategorySlug,\n  AllCategories,\n  TagSlug,\n}) => {\n  // Assign our strings to build our slugs.\n  const CategorySlugString = CategorySlug ? '/' + CategorySlug : '';\n  const TagSlugString = TagSlug ? '/' + TagSlug : '';\n  const QuestionSlugString = CategorySlugString + TagSlugString;\n\n  // Helper Function to match the CategoryFilter to the right Category\n  function categoryMatch(categoryData, categoryFilter) {\n    // See  if our categoryData matches our supplied categoryFilter:\n    let matchedCategory = categoryData.filter(\n      category => category.node.Name === categoryFilter\n    );\n\n    // If it does, return the matched Category.\n    if (matchedCategory) {\n      return matchedCategory[0].node;\n    }\n  }\n\n  return (\n    // Run the StaticQuery to get the data we need.\n    <StaticQuery\n      query={graphql`\n        query {\n          allQuestionsJson {\n            edges {\n              node {\n                id\n                slug\n                date\n                author\n                title\n                category\n                tags\n                shortAnswer\n                longAnswer\n                coverImage\n              }\n            }\n          }\n\n          allQuestionCategoriesJson {\n            edges {\n              node {\n                Name\n                Icon\n                Slug\n                Tags {\n                  Name\n                  Icon\n                  Slug\n                }\n                PageTheme {\n                  Color {\n                    Background\n                    Primary\n                    Secondary\n                    Tertiary\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data =>\n        // Create our PageTheme variables for each Widget.\n\n        // Map the Question data we got.\n        data.allQuestionsJson.edges.map((Question, index) => {\n          // If the Question's Category is the same as the Filter supplied:\n          if (Question.node.category == CategoryFilter) {\n            // If there isn't a TagFilter applied:\n            if (TagFilter == 'all') {\n              // Use our helper function above to find the right Category's Data.\n              let filteredCategory = categoryMatch(\n                data.allQuestionCategoriesJson.edges,\n                CategoryFilter\n              );\n\n              return (\n                <DefaultWidget\n                  BgColor={filteredCategory.PageTheme.Color.Background}\n                  TextColor={filteredCategory.PageTheme.Color.Primary}\n                  Destination={\n                    '/learn' + QuestionSlugString + '/' + Question.node.slug\n                  }\n                  Subhead={Question.node.category}\n                  Headline={Question.node.title}\n                  IconName={filteredCategory.Icon}\n                  IconColor={filteredCategory.PageTheme.Color.Primary}\n                  BgImageFile={Question.node.coverImage}\n                  BgImageAltText={\n                    Question.node.category +\n                    ' & Cannabis | ' +\n                    Question.node.title\n                  }\n                  TintColor={Theme.Color.Black}\n                  TintOpacity={0.6}\n                  key={index}\n                />\n              );\n            } else {\n              // If there is a TagFilter applied, check the Tags Array\n              // to see if it includes our filter:\n              if (Question.node.tags.includes(TagFilter.toLowerCase())) {\n                // Use our helper function above to find the right Category's Data.\n                let filteredCategory = categoryMatch(\n                  data.allQuestionCategoriesJson.edges,\n                  CategoryFilter\n                );\n\n                return (\n                  <DefaultWidget\n                    BgColor={filteredCategory.PageTheme.Color.Background}\n                    TextColor={filteredCategory.PageTheme.Color.Primary}\n                    Destination={\n                      '/learn' + QuestionSlugString + '/' + Question.node.slug\n                    }\n                    Subhead={Question.node.category}\n                    Headline={Question.node.title}\n                    IconName={filteredCategory.Icon}\n                    IconColor={filteredCategory.PageTheme.Color.Primary}\n                    BgImageFile={Question.node.coverImage}\n                    BgImageAltText={\n                      Question.node.category +\n                      ' & Cannabis | ' +\n                      Question.node.title\n                    }\n                    TintColor={Theme.Color.Black}\n                    TintOpacity={0.6}\n                    key={index}\n                  />\n                );\n              } else {\n                // If it doesn't match anything, return false. And cry.\n                return false;\n              }\n            }\n          } else {\n            // If we want to display all the Questions, let's make their\n            // slug their root category.\n            if (CategoryFilter == 'all') {\n              // Use our helper function to match the Category data.\n              let filteredCategory = categoryMatch(\n                data.allQuestionCategoriesJson.edges,\n                Question.node.category\n              );\n\n              return (\n                <DefaultWidget\n                  BgColor={filteredCategory.PageTheme.Color.Background}\n                  TextColor={filteredCategory.PageTheme.Color.Primary}\n                  Destination={\n                    '/learn/' + filteredCategory.Slug + '/' + Question.node.slug\n                  }\n                  Subhead={Question.node.category}\n                  Headline={Question.node.title}\n                  IconName={filteredCategory.Icon}\n                  IconColor={filteredCategory.PageTheme.Color.Primary}\n                  BgImageFile={Question.node.coverImage}\n                  BgImageAltText={\n                    Question.node.category +\n                    ' & Cannabis | ' +\n                    Question.node.title\n                  }\n                  TintColor={Theme.Color.Black}\n                  TintOpacity={0.6}\n                  key={index}\n                />\n              );\n            } else {\n              // If nothing is supplied, don't return anything. Also, cry.\n              return null;\n            }\n          }\n        })\n      }\n    />\n  );\n};\n\nconst QuestionListings = ({\n  Gutter,\n  CategorySlug,\n  AllCategories,\n  TagSlug,\n  BgColor,\n  CategoryFilter,\n  TagFilter,\n}) => (\n  <MasonrySection\n    Columns={3}\n    ColumnGap={0.25}\n    BgColor={BgColor ? BgColor : Theme.Color.White}\n    TextColor={Theme.Color.Nightsky}\n    Gutter={Gutter ? Gutter : [0, 1, 2, 1]}\n  >\n    {/* If the CategoryFilter is supplied */}\n    {CategoryFilter ? (\n      <QuestionCards\n        CategorySlug={CategorySlug}\n        TagSlug={TagSlug ? TagSlug : null}\n        CategoryFilter={CategoryFilter}\n        TagFilter={TagFilter ? TagFilter : 'all'}\n        AllCategories={AllCategories}\n      />\n    ) : (\n      // If it isn't, revert to 'all'\n      <QuestionCards\n        CategorySlug={CategorySlug}\n        TagSlug={TagSlug ? TagSlug : null}\n        CategoryFilter=\"all\"\n        TagFilter={TagFilter}\n        AllCategories={AllCategories}\n      />\n    )}\n  </MasonrySection>\n);\n\nexport default QuestionListings;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","// SplitSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n`;\n\nSplitSectionStyle.Inner = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: center;\n  position: relative;\n\n  .block {\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n\n      /* Add left padding to first block if it's a text\n      block depending on it's flex property: */\n      ${props =>\n        props.Flex\n          ? null\n          : 'padding-left: calc(' +\n            Root.Grid.Gutter.Left +\n            ' + ' +\n            Root.Size +\n            ')'};\n    }\n\n    &:last-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n    }\n\n    .block-content {\n      max-width: calc(${Root.Site.Width} / 3);\n      width: 100%;\n    }\n\n    .block-img-wrap {\n      width: 100%;\n      padding-bottom: 80%;\n      overflow: hidden;\n      position: relative;\n\n      .block-img {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`;\n\nexport default SplitSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitSection Component:\n// This is a basic component for sections with.\n// fullwidth 50% areas compensating for the\n// left gutter sidebar.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SplitSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSection = ({ children, Flex }) => (\n  <SplitSectionStyle>\n    <SplitSectionStyle.Inner Flex={Flex}>{children}</SplitSectionStyle.Inner>\n  </SplitSectionStyle>\n);\n\nexport default SplitSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) ${Root.Size};\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.4;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.09;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// QuestionFooter Component:\n// The QuestionFooter component.\n// Example:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Data\nimport { StaticQuery, graphql } from 'gatsby';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\nimport SimpleSection from 'components/library/Section/SimpleSection';\nimport MasonrySection from 'components/library/Section/MasonrySection';\nimport Block from 'components/library/Block';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport DefaultWidget from 'components/library/Widgets/Library/Default/';\nimport QuestionListings from 'components/library/QuestionListings';\nimport SlideSection from 'components/library/Section/SlideSection';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Styles\nimport QuestionFooterStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Create our Categories array.\nconst BrowseCategories = () => {\n  // Helper function to dissect the data into a usable map\n  function categoryWidgets(data) {\n    let widgetArray = data.map((category, index) => {\n      return {\n        Flex: 1,\n        WidgetContent: [\n          {\n            Destination: '/learn/' + category.node.Slug,\n            Style: 'Generic',\n            Meta: {\n              Generic: {\n                BgColor: category.node.PageTheme.Color.Background,\n                BgImage: '',\n                Subhead: '',\n                Headline: category.node.Name,\n                TextColor: category.node.PageTheme.Color.Primary,\n                IconColor: category.node.PageTheme.Color.Primary,\n                IconName: category.node.Icon, // FontAwesome Icon Name\n                TintColor: '',\n                TintOpacity: '',\n                IconSize: '',\n              },\n            },\n          },\n        ],\n      };\n    });\n\n    // Define our 'View All Widget'\n    let viewAll = {\n      Flex: 1,\n      WidgetContent: [\n        {\n          Destination: '/learn/all',\n          Style: 'Generic',\n          Meta: {\n            Generic: {\n              BgColor: Theme.Color.Nightsky,\n              BgImage: '',\n              Subhead: '',\n              Headline: 'All Categories',\n              TextColor: Theme.Color.White,\n              IconColor: Theme.Color.White,\n              IconName: 'question', // FontAwesome Icon Name\n              TintColor: '',\n              TintOpacity: '',\n              IconSize: '',\n            },\n          },\n        },\n      ],\n    };\n\n    // Add our 'View All Widget' to the beginning of the array with unshift().\n    widgetArray.unshift(viewAll);\n\n    // Return our new array.\n    return widgetArray;\n  }\n\n  // Return Slider with Categories\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          allQuestionCategoriesJson {\n            edges {\n              node {\n                id\n                Name\n                Icon\n                Headline\n                Slug\n                Tags {\n                  Name\n                  Icon\n                  Slug\n                }\n                Breadcrumb {\n                  Destination\n                  Label\n                }\n                PageTheme {\n                  Color {\n                    Background\n                    Primary\n                    Secondary\n                    Tertiary\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <SlideSection\n          Widgets={categoryWidgets(data.allQuestionCategoriesJson.edges)}\n          SectionSize={6}\n          Header=\"Browse Categories\"\n          Gutter={[0, 1, 1, 1]}\n          Theme={{\n            TextColor: Theme.Color.Slate,\n            BgColor: 'none',\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: false,\n            arrows: true,\n          }}\n        />\n      )}\n    />\n  );\n};\n\n// Return our footer.\nconst QuestionFooter = ({ CategoryFilter, TagFilter, HideCategories }) => (\n  <>\n    {/* ///////////// */}\n\n    <SimpleSection\n      BgColor={Theme.Color.White}\n      TextColor={Theme.Color.Nightsky}\n      Style=\"centered\"\n    >\n      <Block Style=\"centered\" Padding={[1, 0, 0, 0]} maxWidth={0.5}>\n        <h2>Not seeing your question?</h2>\n        <p className=\"p-md\">\n          Chat with an expert now or sumbit your own question\n        </p>\n        <Btn\n          IconClass=\"intercom\"\n          Label=\"Ask a question\"\n          BgColor={Theme.Color.Primary}\n          TextColor={Theme.Color.White}\n          Destination=\"/learn/all\"\n          IconPosition=\"left\"\n        />\n      </Block>\n    </SimpleSection>\n\n    {/* ///////////// */}\n\n    {HideCategories ? null : <BrowseCategories />}\n\n    {/* ///////////// */}\n\n    {/* ///////////// */}\n\n    <QuestionListings TagFilter={TagFilter} CategoryFilter={CategoryFilter} />\n\n    {/* ///////////// */}\n  </>\n);\n\nexport default QuestionFooter;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) calc(${Root.Size} / 2);\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.6;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.15;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// HeroStrip Component:\n// The HeroStrip component, typically used in Hero components.\n// Example: https://www.dropbox.com/s/fkq5n663abznqpt/Screenshot%202019-04-19%2018.20.13.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\n\n// Styles\nimport HeroStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst HeroStrip = ({ Items, BgColor, TextColor }) => (\n  <HeroStripStyle\n    className=\"hero-strip\"\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <HeroStripStyle.Inner TextColor={TextColor}>\n      {Items.map((Item, index) => {\n        if (Item.Destination) {\n          return (\n            <div key={index} className=\"hero-strip-item focus\">\n              <Link to={Item.Destination}>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </Link>\n            </div>\n          );\n        } else {\n          return (\n            <div key={index} className=\"hero-strip-item\">\n              <div>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </div>\n            </div>\n          );\n        }\n      })}\n    </HeroStripStyle.Inner>\n  </HeroStripStyle>\n);\n\nexport default HeroStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Simple Hero component:\n// slice_type: hero\n// example: https://www.dropbox.com/s/vp50dnga8ix2n8t/Screenshot%202019-05-07%2018.37.41.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleHeroStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleHero Component\nconst CastleHero = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleHeroStyle>\n      <SimpleHero\n        Padding={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        Background={primaryData.background_color}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1 itemProp=\"name\">\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n\n          {/* Check if Social Sharing is enabled */}\n          {primaryData.social_sharing.toLowerCase() == 'yes' ? (\n            <SocialStrip\n              Margin={[0.35, 0, 0, 0]}\n              Location={location}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n        </Block>\n      </SimpleHero>\n    </CastleHeroStyle>\n  );\n};\n\nexport default CastleHero;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .block {\n    .block-content {\n      width: 100% !important;\n      align-items: stretch;\n    }\n  }\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Full Split Section component:\n// slice_type: full_split_section\n// example: https://www.dropbox.com/s/3s19gold67oyspe/Screenshot%202019-05-08%2017.00.10.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SplitSection from 'components/library/Section/SplitSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleFullSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleFullSplitSectionStyle>\n      <SplitSection\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Padding={[1, 1, 1, 2]}\n          Width={0.5}\n          BgColor={primaryData.background_color}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n      </SplitSection>\n    </CastleFullSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsFullSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsFullSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .cta-wrap {\n    display: flex;\n    .btn {\n      margin-right: calc(${Root.Size} / 4);\n    }\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSimpleSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSimpleSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        BgMatch=\"placeholder_bg_4.jpg\"\n        BgTint={primaryData.tint_opacity}\n        BgAlt=\"Our Awesome Alt Tag\"\n        TextColor={primaryData.text_color}\n        Style={primaryData.text_alignment}\n      >\n        <Block\n          Style=\"centered\"\n          Padding={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          maxWidth={0.5}\n        >\n          {/* Check for Headline */}\n          <h2>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h2>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-md\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          <div className=\"cta-wrap\">\n            {repeatableData[0].cta_destination != null\n              ? repeatableData.map((item, index) => {\n                  return (\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  );\n                })\n              : null}\n          </div>\n        </Block>\n      </SimpleSection>\n    </CastleSimpleSectionStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSimpleSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSimpleSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Gutter={[1, 0, 1, 1]}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n\n        <Block\n          Padding={[3, 1, 3, 1]}\n          Width={0.5}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n      </SimpleSection>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitImageHero component:\n// slice_type: split_image_hero\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport Bread from 'components/library/Breadcrumb/';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleHero\n        imgLeft={primaryData.direction == 'normal' ? null : '0'}\n        imgRight={primaryData.direction == 'normal' ? '0' : null}\n        imgBottom=\"0\"\n        imgWidth=\"50%\"\n        Size={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        className=\"simple-hero\"\n        Background={primaryData.background_color}\n        JustifyContent={primaryData.direction == 'normal' ? null : 'flex-end'}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={0.5}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <Btn\n                    Label={item.cta_label}\n                    BgColor={item.cta_bg_color}\n                    TextColor={item.cta_text_color}\n                    Destination={item.cta_destination}\n                    IconPosition={item.cta_icon ? 'left' : null}\n                    IconClass={item.cta_icon ? item.cta_icon : null}\n                    IconFas\n                  />\n                );\n              })\n            : null}\n        </Block>\n        <Block className=\"hero-img\">\n          <ImgMatch src=\"hero-phone.png\" alt=\"100% Free Delivery\" />\n        </Block>\n      </SimpleHero>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitImageHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitImageHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// PromotionalStrip component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport HeroStrip from 'components/library/HeroStrip';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleSplitSectionStyle>\n      <HeroStrip\n        BgColor={\n          primaryData.bg_color ? primaryData.bg_color : Theme.Color.White\n        }\n        TextColor={\n          primaryData.text_color ? primaryData.text_color : Theme.Color.Nightsky\n        }\n        Items={promotionalItemsTransformer(repeatableData)}\n      />\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsPromotionalStripData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsPromotionalStripData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// StickyScrollSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst StickyScrollSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nStickyScrollSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n  }\n`;\n\nStickyScrollSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n\n  .block {\n    .gallery-img {\n      padding: 0 0 calc(${Root.Size} / 2) 0;\n\n      &:last-child {\n        padding: 0;\n      }\n    }\n\n    &.sticky-block {\n      .block-content {\n        position: sticky;\n        top: calc(${Root.Nav.Size});\n        padding-bottom: ${Root.Size};\n        height: calc(100vh - ${Root.Nav.Size});\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n    }\n  }\n\n  .txt-caption {\n    font-size: 1.4rem;\n    font-weight: bold;\n    color: ${Theme.Color.Slate};\n    display: block;\n    margin-bottom: calc(${Theme.Base.Size.Sm});\n  }\n`;\n\nexport default StickyScrollSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyScrollSection Component:\n// Desired outcome: https://www.dropbox.com/s/brll80qg306ywmk/Screenshot%202019-05-06%2015.01.12.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\nimport Block from 'components/library/Block';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport StickyScrollSectionStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// Render Element\nconst StickyScrollSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  Content,\n  Gallery,\n  GalleryQueries,\n  Gutter,\n  Flex,\n  Button,\n}) => (\n  <StickyScrollSectionStyle\n    Style={Style}\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <ReleaseOverflow />\n    <StickyScrollSectionStyle.Inner Gutter={Gutter}>\n      <StickyScrollSectionStyle.Content Flex={Flex} className=\"sticky-section\">\n        <Block Padding={[0, 1, 0, 1]} className=\"sticky-block\">\n          <span className=\"txt-caption\">{Content.Subheadline}</span>\n          <h2>{Content.Headline}</h2>\n          <p className=\"p-md\">{Content.Body}</p>\n\n          {/* Check if a Btn exists, display if so. */}\n          {Button ? (\n            <Btn\n              Label={Button.Label}\n              BgColor={Button.BgColor}\n              TextColor={Button.TextColor}\n              Destination={Button.Destination}\n              IconPosition=\"left\"\n              IconClass={Button.IconClass ? Button.IconClass : null}\n              IconFas\n            />\n          ) : null}\n        </Block>\n        <Block Padding={[0, 1, 0, 1]}>\n          {Gallery\n            ? Gallery.map((Img, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgMatch src={Img.Src} AltText={Img.Alt} />\n                  </div>\n                );\n              })\n            : null}\n          {GalleryQueries\n            ? GalleryQueries.map((query, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgQuery src={query.Fluid} AltText={query.Alt} />\n                  </div>\n                );\n              })\n            : null}\n        </Block>\n      </StickyScrollSectionStyle.Content>\n    </StickyScrollSectionStyle.Inner>\n  </StickyScrollSectionStyle>\n);\n\nexport default StickyScrollSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyGallery component:\n// slice_type: sticky_gallery\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport StickyScrollSection from 'components/library/Section/StickyScrollSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleStickyGalleryStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our GalleryQueries map.\n  const galleryImgQueriesTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let queries = data.map((Query, index) => {\n        return {\n          Fluid: Query.src.localFile.childImageSharp.fluid\n            ? Query.src.localFile.childImageSharp.fluid\n            : false,\n          Alt: Query.src.alt,\n        };\n      });\n\n      // Return new map.\n      return queries;\n    } else {\n      // Else, return 0.\n      return 0;\n    }\n  };\n\n  return (\n    <CastleStickyGalleryStyle>\n      <StickyScrollSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Content={{\n          Subheadline: primaryData.subheadline,\n          Headline: primaryData.headline.text,\n          Body: primaryData.body_text,\n        }}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n        GalleryQueries={galleryImgQueriesTransformer(repeatableData)}\n        Button={{\n          Label: primaryData.cta_label,\n          BgColor: primaryData.cta_bg_color,\n          TextColor: primaryData.cta_text_color,\n          Destination: primaryData.cta_destination,\n          IconClass: primaryData.cta_icon,\n        }}\n      />\n    </CastleStickyGalleryStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsStickyGalleryData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsStickyGalleryData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// CastleWidgetRow component:\n// slice_type: widget_row\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SlideSection from 'components/library/Section/SlideSection';\n\n// Style Overrides\nimport CastleWidgetRowStyle from './styles.scss';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleWidgetRow Component\nconst CastleWidgetRow = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const widgetContentTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: item.widget_destination,\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: item.widget_bg_color,\n                  BgQuery: item.widget_background_image.localFile\n                    ? item.widget_background_image.localFile.childImageSharp\n                        .fluid\n                    : false,\n                  Subhead: item.widget_subheadline,\n                  Headline: item.widget_headline.text,\n                  TextColor: item.widget_text_color,\n                  IconColor: item.widget_text_color,\n                  IconName: item.widget_icon_class, // FontAwesome Icon Name\n                  TintColor: item.widget_tint_color\n                    ? item.widget_tint_color\n                    : Theme.Color.Black,\n                  TintOpacity: item.widget_tint_opacity,\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleWidgetRowStyle>\n      <Block maxWidth=\"100%\">\n        <SlideSection\n          Widgets={widgetContentTransformer(repeatableData)}\n          SectionSize={primaryData.section_size}\n          Header={\n            primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Keep Browsing'\n          }\n          Gutter={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          Theme={{\n            TextColor: primaryData.text_color,\n            BgColor: primaryData.bg_color,\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: primaryData.autoplay == 'On' ? true : false,\n            arrows: true,\n          }}\n        />\n      </Block>\n    </CastleWidgetRowStyle>\n  );\n};\n\nexport default CastleWidgetRow;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsWidgetRowData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsWidgetRowData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// ::::::::      :::      ::::::::  ::::::::::: :::        ::::::::::\n// :+:    :+:   :+: :+:   :+:    :+:     :+:     :+:        :+:\n// +:+         +:+   +:+  +:+            +:+     +:+        +:+\n// +#+        +#++:++#++: +#++:++#++     +#+     +#+        +#++:++#\n// +#+        +#+     +#+        +#+     +#+     +#+        +#+\n// #+#    #+# #+#     #+# #+#    #+#     #+#     #+#        #+#\n//  ########  ###     ###  ########      ###     ########## ##########\n//\n// Castle.js // By Peter Laxalt // www.laxaltandmciver.co\n// This is the page builder for Elements.\n// Future regex for matching {{ variables }} https://regex101.com/r/xgOodL/1\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Styles\nimport CastleStyle from './styles.scss';\n\n// Components\nimport CastleHero from './components/CastleHero';\nimport CastleFullSplitSection from './components/CastleFullSplitSection';\nimport CastleSimpleSection from './components/CastleSimpleSection';\nimport CastleSplitSection from './components/CastleSplitSection';\nimport CastleSplitImageHero from './components/CastleSplitImageHero';\nimport CastlePromotionalStrip from './components/CastlePromotionalStrip';\nimport CastleStickyGallery from './components/CastleStickyGallery';\nimport CastleWidgetRow from './components/CastleWidgetRow';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Castle\nclass CastleBuilder extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  // Render\n  render() {\n    const bricks = this.props.Bricks;\n    const location = this.props.Location;\n\n    return (\n      <>\n        {bricks.map((brick, index) => {\n          switch (brick.slice_type) {\n            case 'hero':\n              return (\n                <CastleHero data={brick} location={location} key={index} />\n              );\n            case 'full_split_section':\n              return (\n                <CastleFullSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_section':\n              return (\n                <CastleSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_image_hero':\n              return (\n                <CastleSplitImageHero\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'promotional_strip':\n              return (\n                <CastlePromotionalStrip\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'sticky_gallery':\n              return (\n                <CastleStickyGallery\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'simple_section':\n              return (\n                <CastleSimpleSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'widget_row':\n              return (\n                <CastleWidgetRow data={brick} location={location} key={index} />\n              );\n          }\n        })}\n      </>\n    );\n  }\n}\n\nconst Castle = ({ Bricks, Location }) => (\n  <CastleStyle>\n    <CastleBuilder Bricks={Bricks} Location={Location} />\n  </CastleStyle>\n);\n\nexport default Castle;\n","// Convert #HEXCODES to RGBA\n// hexToRGB('#FF0000', 0.5);\n\nconst hexToRGB = (hex, alpha) => {\n  var r = parseInt(hex.slice(1, 3), 16),\n    g = parseInt(hex.slice(3, 5), 16),\n    b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha) {\n    return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')';\n  } else {\n    return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n  }\n};\n\nexport default hexToRGB;\n","// <SimpleListStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SimpleListStyle = styled.div`\n  display: flex;\n`;\n\nSimpleListStyle.List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n`;\n\nSimpleListStyle.Item = styled.li`\n  display: block;\n  position: relative;\n  text-transform: capitalize;\n  margin-bottom: calc(${Root.Size} / 2);\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  span {\n    display: block;\n    &:first-child {\n      opacity: 0.6;\n      font-size: 1.2rem;\n      padding-bottom: calc(${Theme.Base.Size.Sm} / 2);\n    }\n    &:last-child {\n      font-weight: bold;\n      font-size: 1.5rem;\n    }\n  }\n`;\n\nexport default SimpleListStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SimpleListStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleList = ({ List, TextColor }) => (\n  <SimpleListStyle className=\"simple-list\" TextColor={TextColor}>\n    <SimpleListStyle.List TextColor={TextColor}>\n      {List.map((item, index) => {\n        return (\n          <SimpleListStyle.Item key={index}>\n            <span>{item.Label}</span>\n            <span>{item.Data}</span>\n          </SimpleListStyle.Item>\n        );\n      })}\n    </SimpleListStyle.List>\n  </SimpleListStyle>\n);\n\nexport default SimpleList;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <AwardBadgeStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const AwardBadgeStyle = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: calc(${Root.Size} * 3);\n  height: calc(${Root.Size} * 3);\n  background: ${Theme.Color.Primary};\n  color: ${Theme.Color.White};\n  border-radius: 50%;\n  box-shadow: 0 0px 8px 0 rgba(6, 10, 92, 0.12);\n  position: relative;\n  text-align: center;\n  padding: ${Theme.Base.Size.Sm};\n\n  .img {\n    width: 50%;\n  }\n\n  span {\n    margin-top: calc(${Theme.Base.Size.Sm} * 0.75);\n    padding-top: calc(${Theme.Base.Size.Sm} * 0.75);\n    text-align: center;\n    width: 100%;\n    position: relative;\n    font-weight: bold;\n    font-size: 0.9rem;\n    line-height: 1.3;\n\n    &:before {\n      content: '';\n      position: absolute;\n      left: 50%;\n      top: 0;\n      transform: translateX(-50%);\n      height: 1px;\n      width: ${Theme.Base.Size.Md};\n      background: ${Theme.Color.White};\n    }\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 3%;\n    right: 3%;\n    top: 3%;\n    bottom: 3%;\n    border: 1px solid ${Theme.Color.White};\n    border-radius: 50%;\n  }\n`;\n\nexport default AwardBadgeStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Styles\nimport AwardBadgeStyle from './styles.scss';\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst AwardHours = ({ Text, TextColor, BgColor }) => (\n  <AwardBadgeStyle TextColor={TextColor} BgColor={BgColor}>\n    <ImgMatch src=\"logos/leafly.png\" AltText=\"Leafly\" />\n    <span>{Text}</span>\n  </AwardBadgeStyle>\n);\n\nexport default AwardHours;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <AwardHoursStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const AwardHoursStyle = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: stretch;\n  flex: 1;\n\n  .simple-list {\n    padding-left: calc(${Root.Size} / 2);\n    margin-left: calc(${Root.Size} / 2);\n    border-left: 1px solid\n      ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    display: flex;\n    align-items: center;\n    ul {\n      justify-content: center;\n    }\n  }\n`;\n\nAwardHoursStyle.List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n`;\n\nAwardHoursStyle.Item = styled.li`\n  display: block;\n  position: relative;\n  text-transform: capitalize;\n  margin-bottom: calc(${Root.Size} / 2);\n\n  span {\n    display: block;\n    &:first-child {\n      opacity: 0.6;\n      font-size: 1.2rem;\n      padding-bottom: calc(${Theme.Base.Size.Sm} / 2);\n    }\n    &:last-child {\n      font-weight: bold;\n      font-size: 1.5rem;\n    }\n  }\n`;\n\nexport default AwardHoursStyle;\n//////////////////////////////////////////////////////////////////////\n","// SimpleListComponent:\n// The SimpleList component.\n// Example: https://www.dropbox.com/s/620exg22uz5bkyy/Screenshot%202019-05-06%2016.24.58.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport AwardBadge from 'components/library/AwardBadge';\nimport SimpleList from 'components/library/SimpleList';\n\n// Styles\nimport AwardHoursStyle from './styles.scss';\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst AwardHours = ({ Hours, TextColor }) => (\n  <AwardHoursStyle TextColor={TextColor}>\n    <AwardBadge\n      Logo=\"leafly\"\n      Text=\"2018 Voted Best Boutique Dispensary\"\n      BgColor={Theme.Color.Primary}\n      TextColor={Theme.Color.White}\n    />\n    <SimpleList TextColor={TextColor} List={Hours} />\n  </AwardHoursStyle>\n);\n\nexport default AwardHours;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SuggestionListStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Helpers\nimport hexToRGB from 'helpers/hexToRGB';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SuggestionListStyle = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: 100%;\n  overflow: hidden;\n  position: relative;\n\n  &:before {\n    content: '';\n    position: absolute;\n    pointer-events: none;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    width: calc(${Root.Size} / 2);\n    z-index: 3;\n    background-image: ${props =>\n      props.GradientColor\n        ? 'linear-gradient(-90deg, ' +\n          hexToRGB(props.GradientColor, 1) +\n          ',' +\n          hexToRGB(props.GradientColor, 0.000001) +\n          ')'\n        : 'pink'};\n\n    /* hexToRGB(props.GradientColor, 1) */\n\n    /* background-image: linear-gradient(\n      -90deg,\n      rgba(25d5,255,0, 1) 20%,\n      rgba(25d5,255,0, 0) 100%\n    ); */\n  }\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n\n  ul {\n    display: block;\n    width: 100%;\n    max-width: 100%;\n    word-wrap: none;\n    white-space: nowrap;\n    overflow-x: auto;\n    padding: calc(${Root.Size} / 4) 0;\n\n    li {\n      display: inline-block;\n      margin-right: calc(${Root.Size} / 4);\n      font-size: 0.8rem;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n\n      &:first-child {\n        opacity: 0.3;\n      }\n\n      .btn {\n        position: relative;\n        left: 0;\n        .btn-inner {\n          height: calc(${Root.Button.Size} * 0.7);\n          font-size: 0.8rem;\n          text-transform: uppercase;\n          letter-spacing: 1px;\n          font-weight: normal;\n          padding: 0 calc(${Root.Size} / 4);\n        }\n      }\n    }\n  }\n`;\n\nexport default SuggestionListStyle;\n//////////////////////////////////////////////////////////////////////\n","// SuggestionList Component:\n// This is for listing out suggestions with an optional label in the front.\n// Reference: https://www.dropbox.com/s/qvn6rohf52unkpv/Screenshot%202019-05-02%2017.19.11.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Styles\nimport SuggestionListStyle from './styles.scss';\n\n// Components\nimport Btn from 'components/library/Btn/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Our nearby locations component\nconst SuggestionList = ({\n  List,\n  Label,\n  BaseUrl,\n  TextColor,\n  GradientColor,\n  Padding,\n  Affix,\n}) => (\n  <SuggestionListStyle\n    className=\"suggestion-list\"\n    GradientColor={GradientColor}\n    Padding={Padding}\n  >\n    <ul>\n      {Label ? <li>{Label}</li> : null}\n      {List.map((item, index) => (\n        <li key={index}>\n          <Btn\n            BgColor=\"none\"\n            Label={item.nearby_name}\n            Destination={\n              Affix ? BaseUrl + item.nearby_slug + Affix : BaseUrl + item.nearby_slug\n            }\n            TextColor={TextColor}\n          />\n        </li>\n      ))}\n    </ul>\n  </SuggestionListStyle>\n);\n\nexport default SuggestionList;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Transformer:\n// This is for taking Prismic location.data and transforming it into something that\n// this component would like to handle. The Transformer is typically used\n// in /template/ pages where a GraphQL query from Prismic (or any location.data) source\n// is involved.\n//////////////////////////////////////////////////////////////////////\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Function to create our Columns Map\nexport const locationLandingTransformer = location => {\n  if (location) {\n    let locationMap = {\n      edges: {\n        node: {\n          id: location.id,\n          slug: location.uid,\n          name: location.data.name.text,\n          geography: {\n            city: location.data.geo_city,\n            state: location.data.geo_state,\n            country: location.data.geo_country,\n          },\n          status: {\n            delivery: location.data.status_delivery,\n            store: location.data.status_store,\n          },\n          meta: {\n            reserveSpot: location.data.meta_reserve_spot_link,\n            menu: location.data.meta_menu,\n            maps: location.data.meta_google_maps_url,\n          },\n          contactDetails: {\n            phone: location.data,\n            location: {\n              address: location.data.geo_location_address,\n              state: location.data.geo_location_state,\n            },\n            hours: location.data.hours,\n          },\n          nearby: location.data.nearby_locations,\n          about: {\n            headline: location.data.about_headline.text,\n            PageTheme: {\n              Color: {\n                Background: location.data.color_background,\n                Primary: location.data.color_primary,\n                Secondary: location.data.color_secondary,\n                Tertiary: location.data.color_tertiary,\n              },\n            },\n            summary: {\n              headline: location.data.about_headline.text,\n            },\n          },\n          featuredSpecials: location.data.featured_specials,\n        },\n      },\n    };\n\n    return locationMap;\n  } else {\n    return 'null';\n  }\n};\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n"],"sourceRoot":""}