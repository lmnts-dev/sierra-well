{"version":3,"sources":["webpack:///./src/templates/Special/layout.js","webpack:///./src/templates/Special/index.js","webpack:///./src/components/library/Block/styles.scss.js","webpack:///./src/components/library/Block/index.js","webpack:///./src/components/library/Section/SlideSection/styles.scss.js","webpack:///./src/components/library/Section/SlideSection/index.js","webpack:///./src/components/core/WrapperControl/index.js","webpack:///./src/components/library/Hero/styles.scss.js","webpack:///./src/components/library/Section/SimpleSection/styles.scss.js","webpack:///./src/components/library/Section/SimpleSection/index.js","webpack:///./src/components/library/Hero/index.js","webpack:///./src/components/library/Hero/SimpleHero/styles.scss.js","webpack:///./src/components/library/Hero/SimpleHero/index.js","webpack:///./src/components/library/Breadcrumb/styles.scss.js","webpack:///./src/components/library/Breadcrumb/index.js","webpack:///./src/components/library/Section/WidgetSection/styles.scss.js","webpack:///./src/components/library/Section/WidgetSection/index.js","webpack:///./src/components/library/Widgets/Sidebar/Default/styles.scss.js","webpack:///./src/components/library/Widgets/Sidebar/Default/index.js","webpack:///./src/components/Library/Sidebar/styles.scss.js","webpack:///./src/components/Library/Sidebar/index.js","webpack:///./src/templates/SubLevelPage/styles.scss.js","webpack:///./src/templates/SubLevelPage/index.js","webpack:///./src/components/library/Section/index.js","webpack:///./src/components/library/SocialStrip/styles.scss.js","webpack:///./src/components/library/SocialStrip/index.js","webpack:///./src/components/library/Section/SplitSection/styles.scss.js","webpack:///./src/components/library/Section/SplitSection/index.js","webpack:///./src/components/library/HeroStrip/styles.scss.js","webpack:///./src/components/library/HeroStrip/index.js","webpack:///./src/components/library/Castle/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleHero/index.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleFullSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSimpleSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitSection/index.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleSplitImageHero/index.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/styles.scss.js","webpack:///./src/components/library/Castle/components/CastlePromotionalStrip/index.js","webpack:///./src/components/library/Section/StickyScrollSection/styles.scss.js","webpack:///./src/components/library/Section/StickyScrollSection/index.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleStickyGallery/index.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/styles.scss.js","webpack:///./src/components/library/Castle/components/CastleWidgetRow/index.js","webpack:///./src/components/library/Castle/index.js"],"names":["DefaultTemplate","_ref","node","data","react_default","a","createElement","Fragment","SimpleHero","Padding","BgQuery","cover_image","localFile","childImageSharp","fluid","Background","color_background","Theme","Color","BgAlt","title","text","TextColor","color_primary","White","Tint","Block","AlignItems","Width","maxWidth","Breadcrumb","Crumbs","Destination","Label","description","className","SocialStrip","Margin","Location","location","href","WidgetSection","BgColor","Widgets","Flex","WidgetContent","Style","Meta","Generic","Nightsky","BgImage","Subhead","Headline","IconColor","Primary","IconName","TintColor","TintOpacity","IconSize","Tahoe","Mint","SpecialArticleTemplate","_ref2","elements","Layout","PrimaryColor","SecondaryColor","color_secondary","TertiaryColor","color_tertiary","SubLevelPage","ItemProp","Castle","Bricks","layout_DefaultTemplate","__webpack_require__","d","__webpack_exports__","query","SpecialsArticlePage","props","allPrismicSpecial","edges","layout","BlockStyle","styled","div","_templateObject","flex","css","_templateObject2","JustifyContent","BgTint","Base","Grid","SiteWidth","Root","Size","children","BgMatch","styles_scss","ImgMatch","src","AltText","ImgQuery","SlideSectionStyle","Sm","Black","Inner","SectionInnerStyle","Gutter","Left","Content","SectionContentStyle","_templateObject3","SectionSize","Media","Md","SectionHeader","_templateObject4","_templateObject5","Transition","Duration","CssEase","CallToAction","_templateObject6","NextArrow","style","onClick","Object","assign","onKeyPress","role","tabIndex","Icons","Name","PrevArrow","SectionSlider","_React$Component","call","this","render","_settings","_this","slidesToShow","ArrowColor","SliderSettings","slidesToScroll","autoplay","arrows","settings","dots","speed","autoplaySpeed","infinite","draggable","nextArrow","prevArrow","responsive","breakpoint","Helmet","rel","type","lib_default","ref","h","slider","React","Component","SlideSection","Header","Icon","ViewAll","SlideSection_styles_scss","Btn","IconclassName","SlideSection_SectionSlider","TextColr","map","Widget","index","Container","key","WrapperLock","createGlobalStyle","WrapperRelease","HeroInnerStyle","imgRight","imgLeft","imgTop","imgBottom","imgWidth","HeroContentStyle","FullWidth","SimpleSectionStyle","Right","FluidHeight","SimpleSection","SimpleSection_styles_scss","HeroInner","HeroContent","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styles_scss__WEBPACK_IMPORTED_MODULE_2__","SimpleHeroStyle","Nav","TintBorder","Hero","BreadCrumb","Link","Bread","crumb","to","Slider","WidgetSection_styles_scss","SidebarWidgetStyle","FadeIn","Radius","i","SidebarWidget","gatsby_browser_entry","SidebarStyle","styles_scss_templateObject","styles_scss_templateObject2","Sidebar","Sidebar_styles_scss","Default","SubLevelPageStyle","SubLevelPage_styles_scss_templateObject","SubLevelPage_styles_scss_templateObject2","styles_scss_templateObject3","SubLevelPage_SubLevelPage","SubLevelPage_SubLevelPageContent","SubLevelPage_styles_scss","WrapperControl","Library_Sidebar","SubLevelPageContent","itemProp","SocialStripStyle","span","target","SplitSectionStyle","Site","SplitSection","SplitSection_styles_scss","HeroStripStyle","ViewWidthFontSize","HeroStrip","Items","HeroStrip_styles_scss","Item","Caption","CastleStyle","CastleHeroStyle","CastleHero","primaryData","primary","repeatableData","items","CastleHero_styles_scss","padding","replace","split","background_color","background_image","text_color","tint_opacity","breadcrumb_url","breadcrumb_label","headline","body_text","cta_destination","item","cta_label","cta_bg_color","cta_text_color","IconPosition","cta_icon","IconClass","IconFas","social_sharing","toLowerCase","CastleFullSplitSection_styles_scss_templateObject","CastleSplitSection","CastleFullSplitSection_styles_scss","direction","image","alt","CastleSimpleSectionStyle","CastleSimpleSection_styles_scss_templateObject","CastleSimpleSection","CastleSimpleSection_styles_scss","text_alignment","CastleSplitSection_styles_scss_templateObject","CastleSplitSection_styles_scss","CastleSplitImageHero_styles_scss_templateObject","CastleSplitImageHero_styles_scss","CastlePromotionalStrip_styles_scss_templateObject","length","CastlePromotionalStrip_styles_scss","bg_color","caption","label","destination","promotionalItemsTransformer","StickyScrollSectionStyle","StickyScrollSection_styles_scss_templateObject","Slate","ReleaseOverflow","StickyScrollSection_templateObject","StickyScrollSection","Gallery","GalleryQueries","Button","StickyScrollSection_styles_scss","Subheadline","Body","Img","Src","Alt","Fluid","CastleStickyGallery_styles_scss_templateObject","CastleStickyGallery_styles_scss","Section_StickyScrollSection","subheadline","Query","galleryImgQueriesTransformer","CastleWidgetRow_styles_scss_templateObject","CastleWidgetRow","CastleWidgetRow_styles_scss","widget_destination","widget_bg_color","widget_background_image","widget_subheadline","widget_headline","widget_text_color","widget_icon_class","widget_tint_color","widget_tint_opacity","widgetContentTransformer","section_size","CastleBuilder","bricks","brick","slice_type","components_CastleHero","CastleFullSplitSection","components_CastleSplitSection","CastleSplitImageHero","CastlePromotionalStrip","CastleStickyGallery","components_CastleSimpleSection","components_CastleWidgetRow","Castle_CastleBuilder"],"mappings":"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","file":"component---src-templates-special-index-js-3b123e3871da76048de6.js","sourcesContent":["// templates/Question.js:\n// This is the Question template of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from 'components/core/Layout';\n\n// Components\nimport { SubLevelPageContent, SubLevelPage } from 'templates/SubLevelPage';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport WidgetSection from 'components/library/Section/WidgetSection';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Castle.js by L&M\nimport Castle from 'components/library/Castle';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst DefaultTemplate = ({ node, data }) => (\n  <>\n    <SimpleHero\n      Padding={[4, 1, 4, 1]}\n      BgQuery={\n        node.cover_image.localFile\n          ? node.cover_image.localFile.childImageSharp.fluid\n          : false\n      }\n      Background={\n        node.color_background ? node.color_background : Theme.Color.Background\n      }\n      BgAlt={node.title.text ? node.title.text : 'Hero Image'}\n      TextColor={node.color_primary ? node.color_primary : Theme.Color.White}\n      Tint=\"0.5\"\n    >\n      <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n        <Bread\n          Crumbs={[{ Destination: '/specials', Label: 'Specials' }]}\n          TextColor={node.color_primary}\n        />\n        <h1>{node.title.text}</h1>\n        {/* {console.log(node.title.text)} */}\n        {node.description ? <p className=\"p-lg\">{node.description} </p> : null}\n        <SocialStrip\n          Margin={[0.45, 0, 0, 0]}\n          Location={data.location.href}\n          TextColor={\n            node.color_primary ? node.color_primary : Theme.Color.White\n          }\n        />\n      </Block>\n    </SimpleHero>\n\n    {/* ///////////// */}\n\n    <WidgetSection\n      BgColor={Theme.Color.White}\n      Widgets={[\n        {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: '/menu',\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: Theme.Color.Nightsky,\n                  BgImage: '',\n                  Subhead: '',\n                  Headline: 'Menu',\n                  TextColor: Theme.Color.White,\n                  IconColor: Theme.Color.Primary,\n                  IconName: 'plus', // FontAwesome Icon Name\n                  TintColor: '',\n                  TintOpacity: '',\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        },\n        {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: '/locations',\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: Theme.Color.Tahoe,\n                  BgImage: '',\n                  Subhead: '',\n                  Headline: 'Locations',\n                  TextColor: Theme.Color.White,\n                  IconColor: Theme.Color.White,\n                  IconName: 'map-marker-alt', // FontAwesome Icon Name\n                  TintColor: '',\n                  TintOpacity: '',\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        },\n        {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: '/learn',\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: Theme.Color.Mint,\n                  BgImage: '',\n                  Subhead: '',\n                  Headline: 'Q&A',\n                  TextColor: Theme.Color.Nightsky,\n                  IconColor: Theme.Color.Nightsky,\n                  IconName: 'book-open', // FontAwesome Icon Name\n                  TintColor: '',\n                  TintOpacity: '',\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        },\n        {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: '/specials',\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: Theme.Color.Primary,\n                  BgImage: '',\n                  Subhead: '',\n                  Headline: 'Specials',\n                  TextColor: Theme.Color.White,\n                  IconColor: Theme.Color.White,\n                  IconName: 'star', // FontAwesome Icon Name\n                  TintColor: '',\n                  TintOpacity: '',\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        },\n      ]}\n    />\n\n    {/* ///////////// */}\n  </>\n);\n\n// The Question Template\nconst SpecialArticleTemplate = ({ data, node, elements }) => (\n  <Layout\n    BgColor={\n      node.color_background ? node.color_background : Theme.Color.Background\n    }\n    PrimaryColor={\n      node.color_primary ? node.color_primary : Theme.Color.Nightsky\n    }\n    SecondaryColor={\n      node.color_secondary ? node.color_secondary : Theme.Color.Nightsky\n    }\n    TertiaryColor={\n      node.color_tertiary ? node.color_tertiary : Theme.Color.White\n    }\n  >\n    <SubLevelPage\n      BgColor={\n        node.color_background ? node.color_background : Theme.Color.Background\n      }\n      PrimaryColor={\n        node.color_primary ? node.color_primary : Theme.Color.Nightsky\n      }\n      SecondaryColor={\n        node.color_secondary ? node.color_secondary : Theme.Color.Nightsky\n      }\n      TertiaryColor={\n        node.color_tertiary ? node.color_tertiary : Theme.Color.White\n      }\n    >\n      {/* Schema.org BlogPosting */}\n      {/* Read more: https://schema.org/BlogPosting */}\n\n      {/* ///////////// */}\n      {/* Begin page content. */}\n      {/* ///////////// */}\n      <SubLevelPageContent\n        BgColor={node.color_background}\n        TextColor={node.color_primary}\n        ItemProp=\"articleBody\"\n      >\n        {/* ///////////// */}\n\n        {/* Check if elements exist. If so, run Castle. If not, display the default layout. */}\n        {elements ? (\n          <Castle Bricks={elements} Location={data.location.href} />\n        ) : (\n          <DefaultTemplate data={data} node={node} />\n        )}\n\n        {/* {console.log(elements)} */}\n\n        {/* ///////////// */}\n      </SubLevelPageContent>\n      {/* End page content. */}\n      {/* ///////////// */}\n    </SubLevelPage>\n  </Layout>\n);\n\nexport default SpecialArticleTemplate;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Index.js:\n// This is the home page of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Templates\nimport SpecialArticleTemplate from './layout';\n\n// Load Castle Fragments\nimport 'components/library/Castle';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Question Template\nconst SpecialsArticlePage = props => {\n  const node = props.data.allPrismicSpecial.edges[0].node;\n\n  return (\n    <>\n      <SpecialArticleTemplate\n        node={node.data}\n        data={props}\n        elements={node.data.elements}\n      />\n    </>\n  );\n};\n\nexport default SpecialsArticlePage;\n\n// GraphQL Queries\n// ///////////////////////////////////////////////////////////////////\nexport const query = graphql`\n  query($Id: String!) {\n    allPrismicSpecial(filter: { id: { eq: $Id } }) {\n      edges {\n        node {\n          id\n\n          # Load our Castle Component data.\n          ...PrismicSpecialElementsHeroData\n          ...PrismicSpecialElementsFullSplitSectionData\n          ...PrismicSpecialElementsSimpleSectionData\n          ...PrismicSpecialElementsSplitSectionData\n          ...PrismicSpecialElementsStickyGalleryData\n          ...PrismicSpecialElementsSplitImageHeroData\n          ...PrismicSpecialElementsPromotionalStripData\n          ...PrismicSpecialElementsWidgetRowData\n\n          # Load additional page data.\n          data {\n            title {\n              text\n            }\n            description\n            tags\n            color_background\n            color_primary\n            color_secondary\n            color_tertiary\n            cover_image {\n              dimensions {\n                width\n                height\n              }\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// ////////////////////////////////////////////////////////////////////\n// End Component\n","// <Block> Styles:\n// This is the primary column component.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\nexport const BlockStyle = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.flex : 'column')};\n  position: relative;\n  flex-shrink: 1;\n  ${props => (props.BgColor ? 'background: ' + props.BgColor + ';' : null)}\n  ${props => (props.TextColor ? 'color: ' + props.TextColor + ';' : null)}\n  \n  /* Item Alignment. We are aligning items */\n  /* 'stretch' by default. */\n  ${props =>\n    props.AlignItems ? 'align-items: ' + props.AlignItems + ';' : null}\n\n  /* Centered Style */\n  ${props =>\n    props.Style == 'centered' &&\n    css`\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto;\n\n      p,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        text-align: center;\n        width: 100%;\n      }\n\n      .btn {\n        margin: 0 auto;\n      }\n\n      .block-content {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n      }\n    `}\n\n  /* The block content. */\n  .block-content {\n    z-index: 2;\n    margin: 0 auto;\n    width: 100%;\n    ${props => (props.JustifyContent ? 'display:flex' : null)};\n    ${props =>\n      props.JustifyContent\n        ? 'justify-content: ' + props.JustifyContent + ';'\n        : null}\n\n    p {\n      max-width: 80%;\n    }\n  }\n\n  /* Background images with Gatsby-Img */\n  .block-img {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n\n    .img {\n      flex: 1;\n    }\n  }\n\n  /* Width Multiple */\n    ${props =>\n      props.Width ? 'width: ' + props.Width * 100 + '%;' : 'flex: 1;'}\n  max-width: ${props =>\n    props.maxWidth\n      ? 'calc(' + Theme.Base.Grid.SiteWidth + ' * ' + props.maxWidth + ')'\n      : Theme.Base.Grid.SiteWidth};\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : null};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' + Root.Size + ' * ' + props.Padding[3] + ')'\n      : null};\n`;\n\nexport default BlockStyle;\n//////////////////////////////////////////////////////////////////////\n","// <Block> Component:\n// This is the sitewide block style of the website.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Styles\nimport BlockStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Block = ({\n  children,\n  className,\n  Style,\n  maxWidth,\n  Width,\n  Padding,\n  AlignItems,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  BgTint,\n  BgColor,\n  TextColor,\n  JustifyContent,\n  Flex,\n}) => (\n  <BlockStyle\n    className={className ? className + ' block' : 'block'}\n    Width={Width}\n    maxWidth={maxWidth}\n    Style={Style}\n    Padding={Padding}\n    AlignItems={AlignItems ? AlignItems : false}\n    JustifyContent={JustifyContent ? JustifyContent : false}\n    BgTint={BgTint}\n    BgColor={BgColor}\n    TextColor={TextColor}\n    Flex={Flex}\n  >\n    {/* Block Content */}\n    {children ? <div className=\"block-content\">{children}</div> : null}\n\n    {/* For Background Images */}\n    {BgMatch ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n\n    {/* For Background Images with ImgQuery */}\n    {BgQuery ? (\n      <div className=\"block-img-wrap\">\n        <div className=\"block-img\">\n          <ImgQuery src={BgQuery} AltText={BgAlt} />\n        </div>\n      </div>\n    ) : null}\n  </BlockStyle>\n);\n\nexport default Block;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SlideSectionStyle = styled.div`\n  width: 100%;\n  overflow: hidden;\n\n  /* Slick styles */\n  .slick-slider {\n    padding-bottom: ${Theme.Base.Size.Sm};\n    margin-bottom: ${Theme.Base.Size.Sm};\n\n    .slick-slide {\n      &:first-child {\n        .widget {\n          padding-left: 0;\n        }\n      }\n    }\n    .slick-list {\n      overflow: visible;\n    }\n\n    /* Arrows */\n    .slick-arrow {\n      top: calc((${Root.Size}) * -1);\n      transform: none;\n      right: 0;\n      left: unset;\n      width: calc(${Root.Size} * 0.75);\n      height: calc(${Root.Size} * 0.75);\n      border-radius: 50%;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      z-index: 400;\n      background: rgba(0, 0, 0, 0);\n\n      &.slick-prev {\n        transform: rotate(180deg);\n        right: calc((${Root.Size} * 0.75) + (${Root.Size} * 0.25));\n      }\n\n      &.slick-next {\n        right: 0;\n      }\n\n      &.slick-disabled {\n        opacity: 0.4;\n        .ico {\n          opacity: 0.5;\n        }\n        &:hover {\n          background: rgba(0, 0, 0, 0);\n          border: 1px solid rgba(0, 0, 0, 0.1);\n        }\n      }\n\n      &:hover {\n        background: rgba(0, 0, 0, 0.03);\n        border: 1px solid rgba(0, 0, 0, 0.03);\n      }\n\n      .ico {\n        position: absolute;\n        left: 54%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n      }\n\n      &:before {\n        content: '';\n      }\n    }\n\n    .slick-dots {\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: auto;\n      padding: 0;\n      margin: 0;\n\n      li {\n        margin: 0;\n        padding: 0;\n        width: 10px;\n        height: 10px;\n        margin-right: 5px;\n\n        button {\n          margin: 0;\n          padding: 0;\n          position: relative;\n          width: 10px;\n          height: 10px;\n          margin-right: 5px;\n\n          &:before {\n            content: '';\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            width: 7px;\n            height: 7px;\n            border: 1px solid ${Theme.Color.Black};\n            border-radius: 50%;\n          }\n        }\n      }\n    }\n  }\n`;\n\nSlideSectionStyle.Inner = styled(SectionInnerStyle)`\n  width: 100%;\n  padding-bottom: 0;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: 0'};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n`;\n\nSlideSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: column;\n\n  .widget {\n    padding: calc(${Root.Size} / 6);\n    height: ${props =>\n      props.SectionSize\n        ? 'calc(' + Root.Size + '*' + props.SectionSize + ')'\n        : 'calc(' + Root.Size + '* 3)'};\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      padding: calc(${Root.Size}) calc(${Root.Size} / 4);\n      height: ${props =>\n        props.SectionSize\n          ? 'calc((' + Root.Size + '* 3) * ' + props.SectionSize + ')'\n          : 'calc((' + Root.Size + '* 3) * 3)'};\n    }\n  }\n`;\n\nSlideSectionStyle.SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: calc(${Root.Size} / 6);\n`;\n\nSlideSectionStyle.Headline = styled.div`\n  display: flex;\n  font-weight: 800;\n  font-size: 1.5rem;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Nightsky)}\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  i {\n    margin-right: ${Theme.Base.Size.Sm};\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n`;\n\nSlideSectionStyle.CallToAction = styled.div`\n  display: flex;\n\n  .btn {\n    background-color: rgba(0, 0, 0, 0);\n    color: ${Theme.Color.Black};\n\n    svg {\n      fill: ${Theme.Color.Black};\n      border: ${Theme.Color.Black};\n    }\n\n    i {\n      color: ${Theme.Color.Black};\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nexport default SlideSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SlideSection.js:\n//\n// Usage:\n// <SlideSection\n// Widgets={Widgets}\n// SectionSize=\"Large\"\n// SlidesToShow={4}\n// Header=\"Headline\"\n// ViewAll={['/', 'View All']}\n// />\n\n// Core\nimport React from 'react';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\nimport { Link } from 'gatsby';\n\n// Components\nimport WidgetContainer from 'components/library/Widgets/Container/';\nimport Btn from 'components/library/Btn';\nimport Icon from 'elements/Icons';\n\n// Constants\nimport { Theme } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport SlideSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The Section Slider:\n// For displaying widgets within a SlideSection.\n\n// The Slider Arrows\nfunction NextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\nfunction PrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style }}\n      onClick={onClick}\n      // These are eslint errors for accessibility below.\n      onKeyPress={onClick}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <Icon className=\"svg-carat\" Name=\"carat\" />\n    </div>\n  );\n}\n\n// The Slider itself.\nclass SectionSlider extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  render() {\n    // React-Slick Settings\n    // Read more: https://react-slick.neostack.com/\n\n    // Get any theming.\n    const ArrowColor = this.props.ArrowColor;\n\n    // Get any custom Slider Settings we want to pass.\n    const slidesToShow = this.props.SliderSettings.slidesToShow\n      ? this.props.SliderSettings.slidesToShow\n      : 1;\n    const slidesToScroll = this.props.SliderSettings.slidesToScroll\n      ? this.props.SliderSettings.slidesToScroll\n      : 1;\n    const autoplay = this.props.SliderSettings.autoplay\n      ? this.props.SliderSettings.autoplay\n      : false;\n    const arrows = this.props.SliderSettings.arrows\n      ? this.props.SliderSettings.arrows\n      : false;\n\n    // Pass into Slick Settings.\n    const settings = {\n      dots: true,\n      speed: 550,\n      arrows: false,\n      autoplaySpeed: 4000,\n      slidesToShow: slidesToShow,\n      slidesToScroll: slidesToScroll,\n      autoplay: autoplay,\n      infinite: false,\n      draggable: true,\n      arrows: arrows,\n      nextArrow: <NextArrow />,\n      prevArrow: <PrevArrow />,\n      responsive: [\n        {\n          breakpoint: Base.Media.Width.Md + 'px',\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n          },\n        },\n      ],\n    };\n\n    return (\n      <>\n        <Helmet>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"/vendor/slick.min.css\" />\n          <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"/vendor/slick-theme.min.css\"\n          />\n        </Helmet>\n        <Slider ref={h => (this.slider = h)} {...settings}>\n          {this.props.children}\n        </Slider>\n      </>\n    );\n  }\n}\n\n// The SubLevel Page Itself\nconst SlideSection = ({\n  Widgets,\n  SectionSize,\n  SliderSettings,\n  Header,\n  Icon,\n  ViewAll,\n  Theme,\n  Gutter,\n}) => (\n  <SlideSectionStyle className=\"slide-section\">\n    <SlideSectionStyle.Inner Gutter={Gutter} className=\"slide-section-inner\">\n      <SlideSectionStyle.Content SectionSize={SectionSize}>\n        <SlideSectionStyle.SectionHeader>\n          <SlideSectionStyle.Headline TextColor={Theme.TextColor}>\n            {Icon ? <i className={'fas fa-' + Icon} /> : null}\n            {Header ? <h2>{Header}</h2> : null}\n          </SlideSectionStyle.Headline>\n          {ViewAll ? (\n            <SlideSectionStyle.CallToAction>\n              <Btn\n                Destination={ViewAll[0]}\n                BgColor=\"inherit\"\n                Label={ViewAll[1]}\n                IconclassName=\"carat\"\n              />\n            </SlideSectionStyle.CallToAction>\n          ) : null}\n        </SlideSectionStyle.SectionHeader>\n\n        <SectionSlider\n          SliderSettings={SliderSettings}\n          ArrowColor={Theme.TextColr}\n        >\n          {/* Map our Widgets data. */}\n          {Widgets.map((Widget, index) => {\n            // Pass our Widgets data to our WidgetContainers\n            return (\n              <WidgetContainer\n                key={index}\n                WidgetContent={Widget.WidgetContent}\n                Flex={Widget.Flex ? Widget.Flex : null}\n              />\n            );\n          })}\n        </SectionSlider>\n      </SlideSectionStyle.Content>\n    </SlideSectionStyle.Inner>\n  </SlideSectionStyle>\n);\n\nexport default SlideSection;\n","// WrapperControl.js:\n// For controlling our `.wrapper` class app-wide.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Base } from 'constants/styles/Base';\n\n// Styles\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Lock Wrapper Scroll\nexport const WrapperLock = createGlobalStyle`\n  html, body {\n    overflow: hidden;\n\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: visible !important; \n      overflow: visible;\n      \n      .wrapper {\n        overflow-y: hidden;\n      }\n    }\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow: hidden;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow: hidden; \n      overflow-y: hidden;\n    }\n  }\n\n  .slick-slider {\n    touch-action: none !important;\n  }\n`;\n\n// Release Wrapper Scroll\nexport const WrapperRelease = createGlobalStyle`\n  html, body {\n      overflow: auto;\n  }\n\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      overflow-y: visible;\n      height: auto;\n      position: absolute;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      overflow-y: hidden;\n      position: absolute;\n    }\n  }\n`;\n\n// Wrapper Flex Reseet\nexport const WrapperFlexStart = createGlobalStyle`\n  .wrapper {\n    @media (min-width: ${Base.Media.Width.Md + 1 + 'px'}) {\n      justify-content: flex-start;\n    }\n    @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n      justify-content: space-between;\n    }\n  }\n`;\n","// MenuHero Styles:\n// These are nearly identical to the Section base styles.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInnerStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  position: relative;\n  overflow: hidden;\n\n  /* Array-based Padding utilizing Css Variable Multiples. */\n  ${props =>\n    props.Padding\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Padding[0] + ')'\n      : 'padding-top: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Padding[1] + ')'\n      : 'padding-right: ' + Root.Size};\n  ${props =>\n    props.Padding\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Padding[2] + ')'\n      : 'padding-bottom: calc(' + Root.Size + ' * ' + '2)'};\n  ${props =>\n    props.Padding\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ' * ' +\n        props.Padding[3] +\n        ')'\n      : 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + ' +\n        Root.Size +\n        ')'};\n\n  .hero-img {\n    pointer-events: none;\n    ${props =>\n      props.imgRight || props.imgLeft || props.imgTop || props.imgBottom\n        ? 'position: absolute'\n        : null};\n    ${props => (props.imgRight ? 'right: ' + props.imgRight : null)};\n    ${props => (props.imgLeft ? 'left: ' + props.imgLeft : null)};\n    ${props => (props.imgBottom ? 'bottom: ' + props.imgBottom : null)};\n    ${props => (props.imgTop ? 'top: ' + props.imgTop : null)};\n    ${props => (props.imgWidth ? 'width: ' + props.imgWidth : null)};\n  }\n\n  .btn-secondary {\n    margin-left: calc(${Root.Size} / 4);\n  }\n`;\n\nexport const HeroContentStyle = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: ${props =>\n    props.JustifyContent ? props.JustifyContent : 'flex-start'};\n  max-width: ${props => (props.FullWidth ? '100%' : Theme.Base.Grid.SiteWidth)};\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nSimpleSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n    .img {\n      height: 100%;\n    }\n  }\n`;\n\nSimpleSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n`;\n\nexport default SimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SimpleSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  BgMatch,\n  BgAlt,\n  BgTint,\n  FluidHeight,\n  Gutter,\n  Flex,\n  children,\n}) => (\n  <SimpleSectionStyle Style={Style} BgColor={BgColor} TextColor={TextColor}>\n    <SimpleSectionStyle.Inner\n      BgTint={BgTint}\n      FluidHeight={FluidHeight}\n      Gutter={Gutter}\n    >\n      <SimpleSectionStyle.Content\n        FluidHeight={FluidHeight}\n        Flex={Flex}\n        className=\"simple-section\"\n      >\n        {children}\n      </SimpleSectionStyle.Content>\n      {BgMatch ? (\n        <div className=\"section-img\">\n          <ImgMatch src={BgMatch} AltText={BgAlt} />\n        </div>\n      ) : null}\n    </SimpleSectionStyle.Inner>\n  </SimpleSectionStyle>\n);\n\nexport default SimpleSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Hero Component:\n// This is a helper component containing base\n// Hero styles shared across all Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { HeroInnerStyle, HeroContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroInner = ({\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  Size,\n  Flex,\n  Padding,\n  children,\n  JustifyContent,\n}) => (\n  <HeroInnerStyle\n    Size={Size ? Size : false}\n    Padding={Padding ? Padding : false}\n    imgRight={imgRight ? imgRight : false}\n    imgLeft={imgLeft ? imgLeft : false}\n    imgBottom={imgBottom ? imgBottom : false}\n    imgTop={imgTop ? imgTop : false}\n    imgWidth={imgWidth ? imgWidth : false}\n  >\n    <HeroContentStyle\n      className=\"hero-content\"\n      JustifyContent={JustifyContent}\n      Flex={Flex}\n    >\n      {children}\n    </HeroContentStyle>\n  </HeroInnerStyle>\n);\n\nexport const HeroContent = ({ children, Flex }) => (\n  <HeroContentStyle Flex={Flex} className=\"hero-content\">\n    {children}\n  </HeroContentStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SimpleHero Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHeroStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  z-index: 1;\n  position: relative;\n  /* margin-top: calc(${Root.Nav.Size} * -1); */\n  background: ${props => (props.Background ? props.Background : 'none')};\n  background-size: cover;\n  background-position: center center;\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n  align-self: flex-start;\n  justify-self: flex-start;\n\n  /* Background Tint */\n  ${props =>\n    props.Tint\n      ? `\n  &.tint {\n    &:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      top: 0;\n      background-color: rgba(0,0,0,` +\n        props.Tint +\n        `);\n    }\n    .inner {\n      z-index: 500;\n    }\n  }\n  `\n      : null}\n  \n  /* Background Tint */\n  ${props =>\n    props.TintBorder\n      ? `\n      &:after {\n      content: '';\n      position: absolute;\n      left: 0;\n      right: 0;      \n      top: 0;\n      height: 1px;\n      z-index: 5;\n      background-color: rgba(0,0,0, 0.05);\n    }\n  `\n      : null}\n\n  /* Block Spacing */\n  .block {\n    &:first-child {\n      padding-right: calc(${Root.Size} / 2);\n    }\n    &:second-child {\n      padding-left: calc(${Root.Size} / 2);\n    }\n  }\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n    height: 100%;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img, .img {\n      height: 100%;\n    }\n    .hero-img, .gatsby-image-wrapper {\n      position: unset !important;\n    }\n  }\n`;\n\nexport default SimpleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleHero Component:\n// This is a basic hero component for a hero\n// and a background image.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Helpers\nimport { HeroInner } from './../../Hero';\n\n// Styles\nimport SimpleHeroStyle from './styles.scss';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SimpleHero = ({\n  Background,\n  imgRight,\n  imgLeft,\n  imgBottom,\n  imgTop,\n  imgWidth,\n  TextColor,\n  Tint,\n  Padding,\n  Size,\n  BgMatch,\n  BgQuery,\n  BgAlt,\n  Flex,\n  JustifyContent,\n  TintBorder,\n  children,\n}) => (\n  <SimpleHeroStyle\n    Background={Background}\n    TextColor={TextColor}\n    Tint={Tint}\n    TintBorder={TintBorder}\n    className={Tint ? 'tint' : null}\n  >\n    <HeroInner\n      Size={Size ? Size : false}\n      Padding={Padding}\n      imgRight={imgRight ? imgRight : false}\n      imgLeft={imgLeft ? imgLeft : false}\n      imgBottom={imgBottom ? imgBottom : false}\n      imgTop={imgTop ? imgTop : false}\n      imgWidth={imgWidth ? imgWidth : false}\n      JustifyContent={JustifyContent}\n      className=\"inner\"\n      Flex={Flex}\n    >\n      {children}\n    </HeroInner>\n    {BgMatch ? (\n      <div className=\"section-img\">\n        <ImgMatch src={BgMatch} AltText={BgAlt} className=\"hero-img\" />\n      </div>\n    ) : null}\n    {BgQuery ? (\n      <div className=\"section-img\">\n        <ImgQuery src={BgQuery} AltText=\"Hero Alt\" className=\"hero-img\" />\n      </div>\n    ) : null}\n  </SimpleHeroStyle>\n);\n\nexport default SimpleHero;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <Breadcrumb> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const BreadCrumb = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n  width: 100%;\n  align-items: center;\n  transform: translateX(calc(1rem * -1.5));\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 50%;\n      left: calc((${Theme.Base.Size.Sm}) * -1);\n      transform: translateY(-50%);\n      width: 2px;\n      height: 2px;\n      border-radius: 50%;\n      background-color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    svg {\n      transform: rotate(180deg) translateX(0%);\n      transform-origin: center center;\n      width: 1rem;\n      height: 1rem;\n      fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n      transition: all 0.25s ease;\n      fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    }\n\n    &:hover {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      text-decoration: none;\n      svg {\n        transform: rotate(180deg) translateX(50%);\n      }\n    }\n  }\n`;\n\nBreadCrumb.Label = styled(Link)`\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  margin-left: calc(${Theme.Base.Size.Sm} * 1.75);\n  position: relative;\n  text-transform: capitalize;\n\n  &:first-child {\n    margin-left: 0;\n    position: relative;\n\n    &:before {\n      display: none;\n    }\n  }\n`;\n\nexport default BreadCrumb;\n//////////////////////////////////////////////////////////////////////\n","// <Bread Crumbs=\"\"> Component:\n// The breadcrumb component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport BreadCrumbStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst Bread = ({ Crumbs, TextColor }) => (\n  <BreadCrumbStyle TextColor={TextColor}>\n    {Crumbs.map((crumb, index) => {\n      return (\n        <BreadCrumbStyle.Label\n          to={crumb.Destination}\n          key={index}\n        >\n          {/* // Hide back button if nested item. */}\n          {index == 0 ? (\n            <Icon className=\"svg-carat\" Name=\"carat\" TextColor={TextColor} />\n          ) : null}\n          {crumb.Label}\n        </BreadCrumbStyle.Label>\n      );\n    })}\n  </BreadCrumbStyle>\n);\n\nexport default Bread;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// WidgetSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nWidgetSection.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  height: 400px;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' + Root.Size + ' * ' + props.Gutter[1] + ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' + (' +\n        Root.Size +\n        ' * ' +\n        props.Gutter[3] +\n        '))'\n      : null};\n`;\n\nWidgetSection.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: stretch;\n  flex-wrap: wrap;\n\n  .widget {\n    width: 25%;\n    padding: calc(${Root.Size} / 6);\n    &:first-child {\n      padding-left: 0;\n    }\n    &:last-child {\n      padding-right: 0;\n    }\n\n    @media (max-width: calc(${Theme.Base.Media.Width.Md} * 1.5)) {\n      width: 50%;\n      flex: unset;\n      &:nth-child(odd) {\n        padding-left: 0;\n      }\n      &:nth-child(even) {\n        padding-right: 0;\n      }\n    }\n  }\n`;\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// WidgetSection Component:\n// For displaying inline Widgets on Subpages.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Widgets Container\nimport WidgetContainer from 'components/library/Widgets/Container/';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport WidgetSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst WidgetSection = ({ BgColor, Widgets, Slider, Gutter }) => (\n  <WidgetSectionStyle BgColor={BgColor}>\n    <WidgetSectionStyle.Inner Gutter={Gutter}>\n      <WidgetSectionStyle.Content className=\"widget-section\">\n        {/* Map our Widgets data. */}\n        {Widgets.map((Widget, index) => {\n          // Pass our Widgets data to our WidgetContainers\n          return (\n            <WidgetContainer\n              key={index}\n              WidgetContent={Widget.WidgetContent}\n              Flex={Widget.Flex ? Widget.Flex : null}\n            />\n          );\n        })}\n      </WidgetSectionStyle.Content>\n    </WidgetSectionStyle.Inner>\n  </WidgetSectionStyle>\n);\n\nexport default WidgetSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Widget Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Keyframes\nimport { FadeIn } from 'components/core/Transition/Keyframes';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidgetStyle = styled.div`\n  width: 100%;\n  padding-bottom: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  opacity: 0;\n  margin-top: ${Theme.Base.Size.Sm};\n  animation-fill-mode: forwards;\n  ${FadeIn};\n`;\n\nSidebarWidgetStyle.Inner = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: ${props =>\n    props.BgColor ? props.BgColor : Theme.Color.White};\n  border-radius: ${Root.Radius};\n  box-shadow: 0 10px 17px 0 rgba(6, 10, 92, 0.12);\n  overflow: hidden;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  cursor: pointer;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Background Images */\n\n  ${props => {\n    if (props.BgImage)\n      return (\n        `\n        background-image: url(` +\n        props.BgImage +\n        `);\n        background-size: cover;\n        background-position: center center;\n        background-repeat: no-repeat;\n        `\n      );\n  }};\n\n  /* Tint */\n\n  ${props => {\n    if (props.TintColor || props.TintOpacity)\n      return (\n        `\n        &:before {\n          content: '';\n          position: absolute;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          right: 0;\n          background-color:` +\n        props.TintColor +\n        `;\n          opacity:` +\n        props.TintOpacity +\n        `;\n          transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n        }\n    `\n      );\n  }};\n\n  /* Links */\n  a {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    flex: 1;\n    width: 100%;\n    color: white;\n    transform: scale(1.000000001);\n    position: relative;\n    padding: ${Theme.Base.Size.Sm};\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* The Carat Icon */\n  svg {\n    position: absolute;\n    right: ${Theme.Base.Size.Sm};\n    top: ${Theme.Base.Size.Sm};\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    transform: translateX(0%);\n    transition: all ${Theme.Base.Transition.Duration}\n      ${Theme.Base.Transition.CssEase};\n  }\n\n  /* Hover Styles */\n  &:hover {\n    background-color: ${Theme.Color.Black};\n    color: ${Theme.Color.White};\n    box-shadow: 0 20px 30px 0 rgba(6, 10, 92, 0.21);\n\n    a {\n      text-decoration: none;\n      color: ${Theme.Color.White};\n    }\n\n    /* The Carat Icon */\n    svg {\n      transform: translateX(50%);\n      fill: ${Theme.Color.White};\n      height: 1.2rem;\n      width: 1.2rem;\n    }\n\n    /* The Widget Icon */\n    .fas {\n      color: ${Theme.Color.White};\n    }\n\n    /* Tint */\n    ${props => {\n      if (props.TintColor || props.TintOpacity)\n        return `\n        &:before {\n          opacity: 1\n        }\n    `;\n    }};\n  }\n`;\n\nSidebarWidgetStyle.Subhead = styled.div`\n  font-size: 1rem;\n  line-height: 1.2;\n`;\n\nSidebarWidgetStyle.Headline = styled.div`\n  font-size: 1.1rem;\n  line-height: 1.2;\n  font-weight: bold;\n`;\n\nSidebarWidgetStyle.Icon = styled.i`\n  position: absolute;\n  right: ${Theme.Base.Size.Sm};\n  top: ${Theme.Base.Size.Sm};\n  font-size: 1.2rem;\n  transform: scale(1.4);\n  transform-origin: top right;\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n  color: ${props => (props.Color ? props.Color : Theme.Color.Black)};\n`;\n\nexport default SidebarWidgetStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Default Widget.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport SidebarWidgetStyle from './styles.scss';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SidebarWidget = ({\n  BgColor,\n  BgImage,\n  Headline,\n  TextColor,\n  IconName,\n  IconColor,\n  Destination,\n  TintColor,\n  TintOpacity,\n}) => (\n  <SidebarWidgetStyle className=\"widget\">\n    <SidebarWidgetStyle.Inner\n      BgColor={BgColor}\n      BgImage={BgImage}\n      TextColor={TextColor}\n      TintColor={TintColor}\n      TintOpacity={TintOpacity}\n    >\n      <Link to={Destination}>\n        <SidebarWidgetStyle.Headline>{Headline}</SidebarWidgetStyle.Headline>\n\n        {/* Pass Icon value using FontAwesome */}\n        {/* Read more: https://fontawesome.com/how-to-use/on-the-web/setup/getting-started */}\n        <SidebarWidgetStyle.Icon\n          className={'fas fa-' + IconName}\n          Color={IconColor}\n        />\n      </Link>\n    </SidebarWidgetStyle.Inner>\n  </SidebarWidgetStyle>\n);\n\nexport default SidebarWidget;\n","// Sidebar Component Styles\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SidebarStyle = styled.div`\n  position: fixed;\n  top: ${Root.Nav.Size};\n  bottom: 0;\n  height: calc(100vh - ${Root.Nav.Size});\n  display: flex;\n  z-index: 555;\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nSidebarStyle.Inner = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  padding: ${Theme.Base.Size.Sm};\n  width: ${Root.Grid.Gutter.Left};\n\n  @media (max-width: ${Base.Media.Width.Md + 'px'}) {\n    display: none;\n  }\n`;\n\nexport default SidebarStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Sidebar.js:\n// This is the sitewide sidebar component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport SidebarWidget from 'components/library/Widgets/Sidebar/Default';\n\n// Styles\nimport SidebarStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nconst Sidebar = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SidebarStyle>\n    <SidebarStyle.Inner>\n      <SidebarWidget\n        BgColor={Theme.Color.Primary}\n        BgImage=\"none\"\n        Headline=\"Delivery Available\"\n        TextColor={Theme.Color.White}\n        IconColor={Theme.Color.White}\n        IconName=\"car\"\n        Destination=\"/menu/delivery/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Reserve Spot\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"users\"\n        Destination=\"/menu/pick-up/nevada/reno/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Visit\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"map-marker-alt\"\n        Destination=\"/\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Chat\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"comment-alt\"\n        Destination=\"/culture\"\n      />\n      <SidebarWidget\n        BgColor={SecondaryColor}\n        BgImage=\"none\"\n        Headline=\"Phone\"\n        TextColor={TertiaryColor}\n        IconColor={TertiaryColor}\n        IconName=\"phone\"\n        Destination=\"/contact\"\n      />\n    </SidebarStyle.Inner>\n  </SidebarStyle>\n);\n\nexport default Sidebar;\n","// SubLevelPage Component Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { Base } from 'constants/styles/Base';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\n// The Content Wrapper\nconst SubLevelPageStyle = styled.div`\n  width: 100%;\n  flex: 1;\n  display: flex;\n  flex-wrap: nowrap;\n  color: ${Theme.Color.Background};\n  transition: all ${Theme.Base.Transition.Duration}\n    ${Theme.Base.Transition.CssEase};\n`;\n\nSubLevelPageStyle.Inner = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n\nSubLevelPageStyle.Content = styled.div`\n  width: 100%;\n  flex: 1;\n  background: ${props => (props.BgColor ? props.BgColor : 'none')};\n  color: ${props => (props.TextColor ? props.TextColor : 'inherit')};\n\n  .post-details  {\n    opacity: .4;\n    display: block;\n    margin-bottom: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default SubLevelPageStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SubLevelPage.js:\n// This is prevent page jumping of page transitions.\n// The concept is to replicate a 'body' tag so it's scroll\n// position isn't reset for a simple and smooth page\n// transition without jumping to the top of the page.\n\n// It's used in the wrapPageElement component.\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Components\nimport Sidebar from 'components/Library/Sidebar/';\nimport { WrapperRelease } from 'components/core/WrapperControl';\n\n// Styles\nimport SubLevelPageStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The SubLevel Page Itself\nexport const SubLevelPage = ({\n  children,\n  BgColor,\n  PrimaryColor,\n  SecondaryColor,\n  TertiaryColor,\n}) => (\n  <SubLevelPageStyle className=\"sub\">\n    <WrapperRelease />\n    <Sidebar\n      BgColor={BgColor}\n      PrimaryColor={PrimaryColor}\n      SecondaryColor={SecondaryColor}\n      TertiaryColor={TertiaryColor}\n    />\n    <SubLevelPageStyle.Inner className=\"sublevel-inner\">\n      {children}\n    </SubLevelPageStyle.Inner>\n  </SubLevelPageStyle>\n);\n\n// The SubLevel Page Content\nexport const SubLevelPageContent = ({\n  BgColor,\n  TextColor,\n  ItemProp,\n  children,\n}) => (\n  <SubLevelPageStyle.Content\n    TextColor={TextColor}\n    BgColor={BgColor}\n    itemProp={ItemProp}\n  >\n    {children}\n  </SubLevelPageStyle.Content>\n);\n","// Section Component:\n// This is a helper component containing base\n// Section styles shared across all Section components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\n\n// Styles\nimport { SectionInnerStyle, SectionContentStyle } from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nexport const SectionInner = ({ children }) => (\n  <SectionInnerStyle>\n    <SectionContentStyle>{children}</SectionContentStyle>\n  </SectionInnerStyle>\n);\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <SocialStripStyle> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const SocialStripStyle = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  text-decoration: none;\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  /* Array-based margins utilizing root variable multiple. */\n  ${props =>\n    props.Margin\n      ? 'margin-top: calc(' + Root.Size + ' * ' + props.Margin[0] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-right: calc(' + Root.Size + ' * ' + props.Margin[1] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-bottom: calc(' + Root.Size + ' * ' + props.Margin[2] + ')'\n      : null};\n  ${props =>\n    props.Margin\n      ? 'margin-left: calc(' + Root.Size + ' * ' + props.Margin[3] + ')'\n      : null};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n    text-decoration: none;\n    margin-right: calc(${Theme.Base.Size.Md} * 0.8);\n    position: relative;\n    font-size: calc(${Root.Size} / 2);\n    width: calc(${Root.Size} / 2);\n    height: calc(${Root.Size} / 2);\n\n    span {\n      width: 100%;\n      height: auto;\n      font-size: calc(${Root.Size} / 2);\n      i {\n        font-size: calc(${Root.Size} / 2);\n      }\n    }\n\n    i {\n      color: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%) scale(1.8);\n      transform-origin: center center;\n      opacity: 0;\n      border-radius: 50%;\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover {\n      &:before {\n        opacity: 0.1;\n      }\n    }\n  }\n`;\n\nSocialStripStyle.Label = styled.span`\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  display: inline-flex;\n  width: auto;\n  align-items: center;\n  svg {\n    fill: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nexport default SocialStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// SocialStrip Component:\n// The SocialStrip component, typically used in Hero components.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\n\n// Styles\nimport SocialStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SocialStrip = ({ TextColor, Location, Margin }) => (\n  <SocialStripStyle Margin={Margin} TextColor={TextColor}>\n    <a\n      href={'https://www.facebook.com/sharer.php?u=' + Location}\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"facebook\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://twitter.com/intent/tweet?url=' +\n        Location +\n        '&text=Test&via=Test&hashtags=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"twitter\" Color={TextColor} />\n    </a>\n    <a\n      href={\n        'https://www.linkedin.com/shareArticle?mini=true&url=' +\n        Location +\n        '&title=Test&summary=Test&source=Test'\n      }\n      target=\"_blank\"\n      rel=\"nofollow noopener noreferrer\"\n    >\n      <Icon Name=\"linkedin\" Color={TextColor} />\n    </a>\n  </SocialStripStyle>\n);\n\nexport default SocialStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// SplitSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n`;\n\nSplitSectionStyle.Inner = styled.div`\n  display: flex;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: center;\n  position: relative;\n\n  .block {\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n\n      /* Add left padding to first block if it's a text\n      block depending on it's flex property: */\n      ${props =>\n        props.Flex\n          ? null\n          : 'padding-left: calc(' +\n            Root.Grid.Gutter.Left +\n            ' + ' +\n            Root.Size +\n            ')'};\n    }\n\n    &:last-child {\n      /* Change width of each block based on which \n      block is first depending on it's flex property: */\n      width: ${props =>\n        props.Flex\n          ? 'calc(50% + (' + Root.Grid.Gutter.Left + '/ 2))'\n          : 'calc(50% - (' + Root.Grid.Gutter.Left + '/ 2))'};\n    }\n\n    .block-content {\n      max-width: calc(${Root.Site.Width} / 3);\n      width: 100%;\n    }\n\n    .block-img-wrap {\n      width: 100%;\n      padding-bottom: 80%;\n      overflow: hidden;\n      position: relative;\n\n      .block-img {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`;\n\nexport default SplitSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitSection Component:\n// This is a basic component for sections with.\n// fullwidth 50% areas compensating for the\n// left gutter sidebar.\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Styles\nimport SplitSectionStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst SplitSection = ({ children, Flex }) => (\n  <SplitSectionStyle>\n    <SplitSectionStyle.Inner Flex={Flex}>{children}</SplitSectionStyle.Inner>\n  </SplitSectionStyle>\n);\n\nexport default SplitSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// <HeroStrip> Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled, { css } from 'styled-components';\nimport { Link } from 'gatsby';\n\n// Helpers\nimport { SectionContentStyle } from './../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nexport const HeroStripStyle = styled.div`\n  padding-top: calc(${Root.Size} / 4);\n  padding-bottom: calc(${Root.Size} / 4);\n  padding-left: calc(${Root.Grid.Gutter.Left});\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.White)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n\n  a {\n    color: ${props => (props.TextColor ? props.TextColor : Theme.Color.Black)};\n  }\n`;\n\nHeroStripStyle.Inner = styled(SectionContentStyle)`\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n\n  .hero-strip-item {\n    position: relative;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    padding: calc(${Root.Size} / 4) calc(${Root.Size} / 2);\n\n    span {\n      display: block;\n      padding-bottom: 3px;\n      &:first-child {\n        opacity: 0.6;\n        font-size: calc(${Root.ViewWidthFontSize} * 1);\n      }\n      &:last-child {\n        font-weight: bold;\n        font-size: calc(${Root.ViewWidthFontSize} * 1.3);\n      }\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      opacity: 0.15;\n      background: ${props =>\n        props.TextColor ? props.TextColor : Theme.Color.Black};\n    }\n\n    &:first-child {\n      padding-left: 0;\n    }\n\n    &:last-child {\n      padding-right: 0;\n      padding-left: ${Root.Size};\n\n      &:before {\n        display: none;\n      }\n    }\n\n    &.focus {\n      a {\n        &:hover {\n          text-decoration: none;\n        }\n        span {\n          &:last-child {\n            color: ${Theme.Color.Primary};\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default HeroStripStyle;\n//////////////////////////////////////////////////////////////////////\n","// HeroStrip Component:\n// The HeroStrip component, typically used in Hero components.\n// Example: https://www.dropbox.com/s/fkq5n663abznqpt/Screenshot%202019-04-19%2018.20.13.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\n\n// Components\nimport Icon from 'elements/Icons';\nimport { Link } from 'gatsby';\n\n// Styles\nimport HeroStripStyle from './styles.scss';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\nconst HeroStrip = ({ Items, BgColor, TextColor }) => (\n  <HeroStripStyle\n    className=\"hero-strip\"\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <HeroStripStyle.Inner TextColor={TextColor}>\n      {Items.map((Item, index) => {\n        if (Item.Destination) {\n          return (\n            <div key={index} className=\"hero-strip-item focus\">\n              <Link to={Item.Destination}>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </Link>\n            </div>\n          );\n        } else {\n          return (\n            <div key={index} className=\"hero-strip-item\">\n              <div>\n                <span>{Item.Caption}</span>\n                <span>{Item.Label}</span>\n              </div>\n            </div>\n          );\n        }\n      })}\n    </HeroStripStyle.Inner>\n  </HeroStripStyle>\n);\n\nexport default HeroStrip;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Simple Hero component:\n// slice_type: hero\n// example: https://www.dropbox.com/s/vp50dnga8ix2n8t/Screenshot%202019-05-07%2018.37.41.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport SocialStrip from 'components/library/SocialStrip';\nimport Bread from 'components/library/Breadcrumb';\nimport Btn from 'components/library/Btn/';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleHeroStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleHero Component\nconst CastleHero = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleHeroStyle>\n      <SimpleHero\n        Padding={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        Background={primaryData.background_color}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={1} maxWidth={0.75}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1 itemProp=\"name\">\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n\n          {/* Check if Social Sharing is enabled */}\n          {primaryData.social_sharing.toLowerCase() == 'yes' ? (\n            <SocialStrip\n              Margin={[0.35, 0, 0, 0]}\n              Location={location}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n        </Block>\n      </SimpleHero>\n    </CastleHeroStyle>\n  );\n};\n\nexport default CastleHero;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            text_alignment\n            background_color\n            text_color\n            tint_color\n            tint_opacity\n            padding\n            social_sharing\n            breadcrumb_url\n            breadcrumb_label\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleHeroStyle = styled.div`\n  appearance: none;\n\n  .block {\n    .block-content {\n      width: 100% !important;\n      align-items: stretch;\n    }\n  }\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleHeroStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// Full Split Section component:\n// slice_type: full_split_section\n// example: https://www.dropbox.com/s/3s19gold67oyspe/Screenshot%202019-05-08%2017.00.10.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SplitSection from 'components/library/Section/SplitSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleFullSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleFullSplitSectionStyle>\n      <SplitSection\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Padding={[1, 1, 1, 2]}\n          Width={0.5}\n          BgColor={primaryData.background_color}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n      </SplitSection>\n    </CastleFullSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsFullSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsFullSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsFullSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .cta-wrap {\n    display: flex;\n    .btn {\n      margin-right: calc(${Root.Size} / 4);\n    }\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSimpleSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSimpleSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        BgMatch=\"placeholder_bg_4.jpg\"\n        BgTint={primaryData.tint_opacity}\n        BgAlt=\"Our Awesome Alt Tag\"\n        TextColor={primaryData.text_color}\n        Style={primaryData.text_alignment}\n      >\n        <Block\n          Style=\"centered\"\n          Padding={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          maxWidth={0.5}\n        >\n          {/* Check for Headline */}\n          <h2>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h2>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-md\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          <div className=\"cta-wrap\">\n            {repeatableData[0].cta_destination != null\n              ? repeatableData.map((item, index) => {\n                  return (\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  );\n                })\n              : null}\n          </div>\n        </Block>\n      </SimpleSection>\n    </CastleSimpleSectionStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSimpleSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSimpleSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSimpleSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            subheadline\n            text_color\n            background_color\n            text_alignment\n            padding\n            tint_color\n            tint_opacity\n            bg_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n\n  .btn {\n    margin-right: calc(${Root.Size} / 4);\n  }\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SimpleSection component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport SimpleSection from 'components/library/Section/SimpleSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Gutter={[1, 0, 1, 1]}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n      >\n        <Block\n          Style=\"centered\"\n          BgColor={primaryData.background_color}\n          BgQuery={\n            primaryData.image.localFile\n              ? primaryData.image.localFile.childImageSharp.fluid\n              : null\n          }\n          BgAlt={primaryData.image.alt}\n          Width={0.5}\n        />\n\n        <Block\n          Padding={[3, 1, 3, 1]}\n          Width={0.5}\n          TextColor={primaryData.text_color}\n        >\n          <h2>{primaryData.headline.text}</h2>\n          <p className=\"p-md\">{primaryData.body_text}</p>\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <>\n                    <Btn\n                      Label={item.cta_label}\n                      BgColor={item.cta_bg_color}\n                      TextColor={item.cta_text_color}\n                      Destination={item.cta_destination}\n                      IconPosition={item.cta_icon ? 'left' : null}\n                      IconClass={item.cta_icon ? item.cta_icon : null}\n                      IconFas\n                      key={index}\n                    />\n                  </>\n                );\n              })\n            : null}\n        </Block>\n      </SimpleSection>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitSectionData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitSectionData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitSection {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// SplitImageHero component:\n// slice_type: split_image_hero\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport Bread from 'components/library/Breadcrumb/';\nimport SimpleHero from 'components/library/Hero/SimpleHero';\nimport ImgMatch from 'components/core/ImgMatch';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items;\n\n  return (\n    <CastleSplitSectionStyle>\n      <SimpleHero\n        imgLeft={primaryData.direction == 'normal' ? null : '0'}\n        imgRight={primaryData.direction == 'normal' ? '0' : null}\n        imgBottom=\"0\"\n        imgWidth=\"50%\"\n        Size={\n          primaryData.padding\n            ? primaryData.padding.replace(/\\s/g, '').split(',')\n            : null\n        }\n        className=\"simple-hero\"\n        Background={primaryData.background_color}\n        JustifyContent={primaryData.direction == 'normal' ? null : 'flex-end'}\n        BgQuery={\n          primaryData.background_image.localFile\n            ? primaryData.background_image.localFile.childImageSharp.fluid\n            : false\n        }\n        TextColor={primaryData.text_color}\n        Tint={primaryData.tint_opacity}\n      >\n        <Block AlignItems=\"flex-start\" Width={0.5}>\n          {/* Check for Breadcrumbs */}\n          {primaryData.breadcrumb_url ? (\n            <Bread\n              Crumbs={[\n                {\n                  Destination: primaryData.breadcrumb_url,\n                  Label: primaryData.breadcrumb_label,\n                },\n              ]}\n              TextColor={primaryData.text_color}\n            />\n          ) : null}\n\n          {/* Check for Headline */}\n          <h1>\n            {primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Enter a headline...'}\n          </h1>\n\n          {/* Check for Body Text */}\n          {primaryData.body_text ? (\n            <p className=\"p-lg\">{primaryData.body_text} </p>\n          ) : null}\n\n          {/* Check for CTA */}\n          {repeatableData[0].cta_destination != null\n            ? repeatableData.map((item, index) => {\n                return (\n                  <Btn\n                    Label={item.cta_label}\n                    BgColor={item.cta_bg_color}\n                    TextColor={item.cta_text_color}\n                    Destination={item.cta_destination}\n                    IconPosition={item.cta_icon ? 'left' : null}\n                    IconClass={item.cta_icon ? item.cta_icon : null}\n                    IconFas\n                  />\n                );\n              })\n            : null}\n        </Block>\n        <Block className=\"hero-img\">\n          <ImgMatch src=\"hero-phone.png\" alt=\"100% Free Delivery\" />\n        </Block>\n      </SimpleHero>\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsSplitImageHeroData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsSplitImageHeroData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsSplitImageHero {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            background_image {\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            body_text\n            background_color\n            text_color\n            direction\n            breadcrumb_label\n            breadcrumb_url\n            social_sharing\n            tint_color\n            tint_opacity\n            padding\n          }\n          items {\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// PromotionalStrip component:\n// slice_type: simple_section\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport HeroStrip from 'components/library/HeroStrip';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleSplitSectionStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSplitSection Component\nconst CastleSplitSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const promotionalItemsTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          Caption: item.caption,\n          Label: item.label,\n          Destination: item.destination ? item.destination : null,\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleSplitSectionStyle>\n      <HeroStrip\n        BgColor={\n          primaryData.bg_color ? primaryData.bg_color : Theme.Color.White\n        }\n        TextColor={\n          primaryData.text_color ? primaryData.text_color : Theme.Color.Nightsky\n        }\n        Items={promotionalItemsTransformer(repeatableData)}\n      />\n    </CastleSplitSectionStyle>\n  );\n};\n\nexport default CastleSplitSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n\n///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsPromotionalStripData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsPromotionalStripData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsPromotionalStrip {\n          slice_type\n          primary {\n            bg_color\n            text_color\n          }\n          items {\n            caption\n            label\n            destination\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// StickyScrollSection Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Helpers\nimport {\n  SectionInnerStyle,\n  SectionContentStyle,\n} from './../../Section/styles.scss';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst StickyScrollSectionStyle = styled.div`\n  width: 100%;\n  margin: 0;\n  background: ${props => (props.BgColor ? props.BgColor : Theme.Color.Primary)};\n  color: ${props => (props.TextColor ? props.TextColor : Theme.Color.White)};\n`;\n\nStickyScrollSectionStyle.Inner = styled(SectionInnerStyle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n\n  /* Array-based gutters utilizing root variable multiple. */\n  ${props =>\n    props.Gutter\n      ? 'padding-top: calc(' + Root.Size + ' * ' + props.Gutter[0] + ')'\n      : 'padding-top: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-right: calc(' +\n        Root.Grid.Gutter.Right +\n        ' * ' +\n        props.Gutter[1] +\n        ')'\n      : null};\n  ${props =>\n    props.Gutter\n      ? 'padding-bottom: calc(' + Root.Size + ' * ' + props.Gutter[2] + ')'\n      : 'padding-bottom: ' + Root.Size};\n  ${props =>\n    props.Gutter\n      ? 'padding-left: calc(' +\n        Root.Grid.Gutter.Left +\n        ' * ' +\n        props.Gutter[3] +\n        ')'\n      : null};\n\n  /* Gatsby-image based background images. */\n  .section-img {\n    position: ${props => (props.FluidHeight ? 'relative' : 'absolute')};\n    width: ${props => (props.FluidHeight ? '100%' : 'auto')};\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    overflow: hidden;\n    ${props => (props.BgTint ? 'opacity: ' + props.BgTint + ';' : null)}\n    img {\n      height: 100%;\n    }\n  }\n`;\n\nStickyScrollSectionStyle.Content = styled(SectionContentStyle)`\n  margin: 0 auto;\n  flex-direction: ${props => (props.Flex ? props.Flex : 'row')};\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 2;\n  width: 100%;\n\n  /* Hide this section for fluid height of image. */\n  display: ${props => (props.FluidHeight ? 'none' : 'flex')};\n\n  .block {\n    .gallery-img {\n      padding: 0 0 calc(${Root.Size} / 2) 0;\n\n      &:last-child {\n        padding: 0;\n      }\n    }\n\n    &.sticky-block {\n      .block-content {\n        position: sticky;\n        top: calc(${Root.Nav.Size});\n        padding-bottom: ${Root.Size};\n        height: calc(100vh - ${Root.Nav.Size});\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n    }\n  }\n\n  .txt-caption {\n    font-size: 1.4rem;\n    font-weight: bold;\n    color: ${Theme.Color.Slate};\n    display: block;\n    margin-bottom: calc(${Theme.Base.Size.Sm});\n  }\n`;\n\nexport default StickyScrollSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyScrollSection Component:\n// Desired outcome: https://www.dropbox.com/s/brll80qg306ywmk/Screenshot%202019-05-06%2015.01.12.png?dl=0\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// Components\nimport ImgMatch from 'components/core/ImgMatch';\nimport ImgQuery from 'components/core/ImgQuery';\nimport Block from 'components/library/Block';\nimport Btn from 'components/library/Btn';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\nimport { SectionContent } from './../../Section';\n\n// Styles\nimport StickyScrollSectionStyle from './styles.scss';\nimport { createGlobalStyle } from 'styled-components';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Enable Overflows\nexport const ReleaseOverflow = createGlobalStyle`\n  html, body {\n    overflow: visible;\n  }\n\n  .wrapper {\n    overflow: visible;\n  }\n`;\n\n// Render Element\nconst StickyScrollSection = ({\n  BgColor,\n  Style,\n  TextColor,\n  Content,\n  Gallery,\n  GalleryQueries,\n  Gutter,\n  Flex,\n  Button,\n}) => (\n  <StickyScrollSectionStyle\n    Style={Style}\n    BgColor={BgColor}\n    TextColor={TextColor}\n  >\n    <ReleaseOverflow />\n    <StickyScrollSectionStyle.Inner Gutter={Gutter}>\n      <StickyScrollSectionStyle.Content Flex={Flex} className=\"sticky-section\">\n        <Block Padding={[0, 1, 0, 1]} className=\"sticky-block\">\n          <span className=\"txt-caption\">{Content.Subheadline}</span>\n          <h2>{Content.Headline}</h2>\n          <p className=\"p-md\">{Content.Body}</p>\n\n          {/* Check if a Btn exists, display if so. */}\n          {Button ? (\n            <Btn\n              Label={Button.Label}\n              BgColor={Button.BgColor}\n              TextColor={Button.TextColor}\n              Destination={Button.Destination}\n              IconPosition=\"left\"\n              IconClass={Button.IconClass ? Button.IconClass : null}\n              IconFas\n            />\n          ) : null}\n        </Block>\n        <Block Padding={[0, 1, 0, 1]}>\n          {Gallery\n            ? Gallery.map((Img, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgMatch src={Img.Src} AltText={Img.Alt} />\n                  </div>\n                );\n              })\n            : null}\n          {GalleryQueries\n            ? GalleryQueries.map((query, index) => {\n                return (\n                  <div key=\"index\" className=\"gallery-img\">\n                    <ImgQuery src={query.Fluid} AltText={query.Alt} />\n                  </div>\n                );\n              })\n            : null}\n        </Block>\n      </StickyScrollSectionStyle.Content>\n    </StickyScrollSectionStyle.Inner>\n  </StickyScrollSectionStyle>\n);\n\nexport default StickyScrollSection;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// StickyGallery component:\n// slice_type: sticky_gallery\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport Btn from 'components/library/Btn/';\nimport StickyScrollSection from 'components/library/Section/StickyScrollSection';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Style Overrides\nimport CastleStickyGalleryStyle from './styles.scss';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleSimpleSection Component\nconst CastleSimpleSection = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our GalleryQueries map.\n  const galleryImgQueriesTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let queries = data.map((Query, index) => {\n        return {\n          Fluid: Query.src.localFile.childImageSharp.fluid\n            ? Query.src.localFile.childImageSharp.fluid\n            : false,\n          Alt: Query.src.alt,\n        };\n      });\n\n      // Return new map.\n      return queries;\n    } else {\n      // Else, return 0.\n      return 0;\n    }\n  };\n\n  return (\n    <CastleStickyGalleryStyle>\n      <StickyScrollSection\n        BgColor={primaryData.background_color}\n        TextColor={primaryData.text_color}\n        Content={{\n          Subheadline: primaryData.subheadline,\n          Headline: primaryData.headline.text,\n          Body: primaryData.body_text,\n        }}\n        Flex={primaryData.direction == 'normal' ? 'row' : 'row-reverse'}\n        GalleryQueries={galleryImgQueriesTransformer(repeatableData)}\n        Button={{\n          Label: primaryData.cta_label,\n          BgColor: primaryData.cta_bg_color,\n          TextColor: primaryData.cta_text_color,\n          Destination: primaryData.cta_destination,\n          IconClass: primaryData.cta_icon,\n        }}\n      />\n    </CastleStickyGalleryStyle>\n  );\n};\n\nexport default CastleSimpleSection;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsStickyGalleryData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsStickyGalleryData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsStickyGallery {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            subheadline\n            direction\n            body_text\n            background_color\n            text_color\n            cta_label\n            cta_destination\n            cta_bg_color\n            cta_text_color\n            cta_icon\n          }\n          items {\n            src {\n              alt\n              copyright\n              url\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// Castle Builder Styles:\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport styled from 'styled-components';\n\n// Constants\nimport { Theme, Root } from 'constants/Theme';\n// Blocks\n\n// Begin Styles\n//////////////////////////////////////////////////////////////////////\n\nconst CastleSimpleSectionStyle = styled.div`\n  appearance: none;\n`;\n\nexport default CastleSimpleSectionStyle;\n\n//////////////////////////////////////////////////////////////////////\n// End Styles\n","// CastleWidgetRow component:\n// slice_type: widget_row\n\n// Imports\n//////////////////////////////////////////////////////////////////////\n\n// Core\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\n// Components\nimport SlideSection from 'components/library/Section/SlideSection';\n\n// Style Overrides\nimport CastleWidgetRowStyle from './styles.scss';\n\n// Elements\nimport Block from 'components/library/Block';\n\n// Constants\nimport { Theme } from 'constants/Theme';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// The CastleWidgetRow Component\nconst CastleWidgetRow = ({ data, location }) => {\n  const primaryData = data.primary;\n  const repeatableData = data.items.length > 0 ? data.items : 0;\n\n  // Function to create our Items map.\n  const widgetContentTransformer = data => {\n    if (data != 0) {\n      // Create a new map from Prismic Data.\n      let itemList = data.map((item, index) => {\n        return {\n          // Begin WidgetContent\n          Flex: 1,\n          WidgetContent: [\n            {\n              Destination: item.widget_destination,\n              Style: 'Generic',\n              Meta: {\n                Generic: {\n                  BgColor: item.widget_bg_color,\n                  BgQuery: item.widget_background_image.localFile\n                    ? item.widget_background_image.localFile.childImageSharp\n                        .fluid\n                    : false,\n                  Subhead: item.widget_subheadline,\n                  Headline: item.widget_headline.text,\n                  TextColor: item.widget_text_color,\n                  IconColor: item.widget_text_color,\n                  IconName: item.widget_icon_class, // FontAwesome Icon Name\n                  TintColor: item.widget_tint_color\n                    ? item.widget_tint_color\n                    : Theme.Color.Black,\n                  TintOpacity: item.widget_tint_opacity,\n                  IconSize: '',\n                },\n              },\n            },\n          ],\n          // End WidgetContent\n        };\n      });\n\n      // Return new map.\n      return itemList;\n    } else {\n      // Else, don't return anything.\n      return null;\n    }\n  };\n\n  return (\n    <CastleWidgetRowStyle>\n      <Block maxWidth=\"100%\">\n        <SlideSection\n          Widgets={widgetContentTransformer(repeatableData)}\n          SectionSize={primaryData.section_size}\n          Header={\n            primaryData.headline.text\n              ? primaryData.headline.text\n              : 'Keep Browsing'\n          }\n          Gutter={\n            primaryData.padding\n              ? primaryData.padding.replace(/\\s/g, '').split(',')\n              : null\n          }\n          Theme={{\n            TextColor: primaryData.text_color,\n            BgColor: primaryData.bg_color,\n          }}\n          SliderSettings={{\n            slidesToShow: 4,\n            slidesToScroll: 1,\n            autoplay: primaryData.autoplay == 'On' ? true : false,\n            arrows: true,\n          }}\n        />\n      </Block>\n    </CastleWidgetRowStyle>\n  );\n};\n\nexport default CastleWidgetRow;\n\n// GraphQL Queries:\n// This is where you specify what data you need. It's fragment is\n// used in the templated page query and passed into the Castle component.\n// Example from the Special.js Template: https://www.dropbox.com/s/7d8hlm7yuqrlyi9/Screenshot%202019-05-08%2019.25.50.png?dl=0\n//\n// Basic Process:s\n// 1. We run createPage() in gatsby-node.js\n// 2. Query the needed data and pass it to a specified template.js. In the case\n// above, it's Special/index.js. That template holds the GraphQL Query to pass said\n// data and our fragment we make below down into the <Castle /> level component\n// to identify the elements needed to build out the page content.\n// 3. Rejoice.\n//\n// ///////////////////////////////////////////////////////////////////\n\nexport const query = graphql`\n  fragment PrismicSpecialElementsWidgetRowData on PrismicSpecial {\n    data {\n      elements {\n        ... on PrismicSpecialElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n\n  fragment PrismicLocationElementsWidgetRowData on PrismicLocation {\n    data {\n      elements {\n        ... on PrismicLocationElementsWidgetRow {\n          slice_type\n          primary {\n            headline {\n              text\n            }\n            section_size\n            text_color\n            bg_color\n            padding\n            autoplay\n          }\n          items {\n            widget_headline {\n              text\n            }\n            widget_background_image {\n              alt\n              localFile {\n                id\n                childImageSharp {\n                  fluid(maxWidth: 1200) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n            widget_destination\n            widget_subheadline\n            widget_icon_class\n            widget_text_color\n            widget_bg_color\n            widget_tint_color\n            widget_tint_opacity\n          }\n        }\n      }\n    }\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n","// ::::::::      :::      ::::::::  ::::::::::: :::        ::::::::::\n// :+:    :+:   :+: :+:   :+:    :+:     :+:     :+:        :+:\n// +:+         +:+   +:+  +:+            +:+     +:+        +:+\n// +#+        +#++:++#++: +#++:++#++     +#+     +#+        +#++:++#\n// +#+        +#+     +#+        +#+     +#+     +#+        +#+\n// #+#    #+# #+#     #+# #+#    #+#     #+#     #+#        #+#\n//  ########  ###     ###  ########      ###     ########## ##########\n//\n// Castle.js // By Peter Laxalt // www.laxaltandmciver.co\n// This is the page builder for Elements.\n// Future regex for matching {{ variables }} https://regex101.com/r/xgOodL/1\n\n// Core\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport Slider from 'react-slick'; // For Slick Slider\nimport { Helmet } from 'react-helmet'; // For Slick Styles\n\n// Styles\nimport CastleStyle from './styles.scss';\n\n// Components\nimport CastleHero from './components/CastleHero';\nimport CastleFullSplitSection from './components/CastleFullSplitSection';\nimport CastleSimpleSection from './components/CastleSimpleSection';\nimport CastleSplitSection from './components/CastleSplitSection';\nimport CastleSplitImageHero from './components/CastleSplitImageHero';\nimport CastlePromotionalStrip from './components/CastlePromotionalStrip';\nimport CastleStickyGallery from './components/CastleStickyGallery';\nimport CastleWidgetRow from './components/CastleWidgetRow';\n\n// Begin Component\n//////////////////////////////////////////////////////////////////////\n\n// Castle\nclass CastleBuilder extends React.Component {\n  constructor(props) {\n    // Make our props accessible through this.props\n    super(props);\n  }\n\n  // Render\n  render() {\n    const bricks = this.props.Bricks;\n    const location = this.props.Location;\n\n    return (\n      <>\n        {bricks.map((brick, index) => {\n          switch (brick.slice_type) {\n            case 'hero':\n              return (\n                <CastleHero data={brick} location={location} key={index} />\n              );\n            case 'full_split_section':\n              return (\n                <CastleFullSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_section':\n              return (\n                <CastleSplitSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'split_image_hero':\n              return (\n                <CastleSplitImageHero\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'promotional_strip':\n              return (\n                <CastlePromotionalStrip\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'sticky_gallery':\n              return (\n                <CastleStickyGallery\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'simple_section':\n              return (\n                <CastleSimpleSection\n                  data={brick}\n                  location={location}\n                  key={index}\n                />\n              );\n            case 'widget_row':\n              return (\n                <CastleWidgetRow data={brick} location={location} key={index} />\n              );\n          }\n        })}\n      </>\n    );\n  }\n}\n\nconst Castle = ({ Bricks, Location }) => (\n  <CastleStyle>\n    <CastleBuilder Bricks={Bricks} Location={Location} />\n  </CastleStyle>\n);\n\nexport default Castle;\n"],"sourceRoot":""}